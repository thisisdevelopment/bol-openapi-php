<?php
/**
 * ProcessStatusApi
 * PHP version 7.4
 *
 * @category Class
 * @package  ThisIsDevelopment\OpenApi\Bol\Shared
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * v8 - Shared API
 *
 * The bol.com API shared logic.  # Authentication Our API requires authentication via OAuth2. The detailed steps to authenticate are explained [here](https://api.bol.com/retailer/public/Retailer-API/authentication.html)   # Demo scenarios Our API specification includes examples of the responses you can expect. For more information as well as more examples, we refer you to the following resources:   - [Demo environment](https://api.bol.com/retailer/public/Retailer-API/demo/demo.html) - [Demo scenarios](https://api.bol.com/retailer/public/Retailer-API/demo/v8-index.html)
 *
 * The version of the OpenAPI document: 8.x
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 7.3.0-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace ThisIsDevelopment\OpenApi\Bol\Shared\Api;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\ConnectException;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use ThisIsDevelopment\OpenApi\Bol\Shared\ApiException;
use ThisIsDevelopment\OpenApi\Bol\Shared\Configuration;
use ThisIsDevelopment\OpenApi\Bol\Shared\HeaderSelector;
use ThisIsDevelopment\OpenApi\Bol\Shared\ObjectSerializer;

/**
 * ProcessStatusApi Class Doc Comment
 *
 * @category Class
 * @package  ThisIsDevelopment\OpenApi\Bol\Shared
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class ProcessStatusApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * @var int Host index
     */
    protected $hostIndex;

    /** @var string[] $contentTypes **/
    public const contentTypes = [
        'getProcessStatus' => [
            'application/json',
        ],
        'getProcessStatusBulk' => [
            'application/vnd.retailer.v8+json',
            'application/vnd.advertiser.v8+json',
        ],
        'getProcessStatusEntityId' => [
            'application/json',
        ],
    ];

    /**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     * @param int             $hostIndex (Optional) host index to select the list of hosts if defined in the OpenAPI spec
     */
    public function __construct(
        ClientInterface $client = null,
        Configuration $config = null,
        HeaderSelector $selector = null,
        $hostIndex = 0
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: new Configuration();
        $this->headerSelector = $selector ?: new HeaderSelector();
        $this->hostIndex = $hostIndex;
    }

    /**
     * Set the host index
     *
     * @param int $hostIndex Host index (required)
     */
    public function setHostIndex($hostIndex): void
    {
        $this->hostIndex = $hostIndex;
    }

    /**
     * Get the host index
     *
     * @return int Host index
     */
    public function getHostIndex()
    {
        return $this->hostIndex;
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation getProcessStatus
     *
     * Get the status of an asynchronous process by process status id
     *
     * @param  string $processStatusId The id of the process status being requested. This id is supplied in every response to a PUT/POST/DELETE request on the other endpoints. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getProcessStatus'] to see the possible values for this operation
     *
     * @throws \ThisIsDevelopment\OpenApi\Bol\Shared\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \ThisIsDevelopment\OpenApi\Bol\Shared\Models\ProcessStatus|\ThisIsDevelopment\OpenApi\Bol\Shared\Models\Problem
     */
    public function getProcessStatus($processStatusId, string $contentType = self::contentTypes['getProcessStatus'][0])
    {
        list($response) = $this->getProcessStatusWithHttpInfo($processStatusId, $contentType);
        return $response;
    }

    /**
     * Operation getProcessStatusWithHttpInfo
     *
     * Get the status of an asynchronous process by process status id
     *
     * @param  string $processStatusId The id of the process status being requested. This id is supplied in every response to a PUT/POST/DELETE request on the other endpoints. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getProcessStatus'] to see the possible values for this operation
     *
     * @throws \ThisIsDevelopment\OpenApi\Bol\Shared\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \ThisIsDevelopment\OpenApi\Bol\Shared\Models\ProcessStatus|\ThisIsDevelopment\OpenApi\Bol\Shared\Models\Problem, HTTP status code, HTTP response headers (array of strings)
     */
    public function getProcessStatusWithHttpInfo($processStatusId, string $contentType = self::contentTypes['getProcessStatus'][0])
    {
        $request = $this->getProcessStatusRequest($processStatusId, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\ThisIsDevelopment\OpenApi\Bol\Shared\Models\ProcessStatus' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\ThisIsDevelopment\OpenApi\Bol\Shared\Models\ProcessStatus' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\ThisIsDevelopment\OpenApi\Bol\Shared\Models\ProcessStatus', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 404:
                    if ('\ThisIsDevelopment\OpenApi\Bol\Shared\Models\Problem' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\ThisIsDevelopment\OpenApi\Bol\Shared\Models\Problem' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\ThisIsDevelopment\OpenApi\Bol\Shared\Models\Problem', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\ThisIsDevelopment\OpenApi\Bol\Shared\Models\ProcessStatus';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ThisIsDevelopment\OpenApi\Bol\Shared\Models\ProcessStatus',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ThisIsDevelopment\OpenApi\Bol\Shared\Models\Problem',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getProcessStatusAsync
     *
     * Get the status of an asynchronous process by process status id
     *
     * @param  string $processStatusId The id of the process status being requested. This id is supplied in every response to a PUT/POST/DELETE request on the other endpoints. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getProcessStatus'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getProcessStatusAsync($processStatusId, string $contentType = self::contentTypes['getProcessStatus'][0])
    {
        return $this->getProcessStatusAsyncWithHttpInfo($processStatusId, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getProcessStatusAsyncWithHttpInfo
     *
     * Get the status of an asynchronous process by process status id
     *
     * @param  string $processStatusId The id of the process status being requested. This id is supplied in every response to a PUT/POST/DELETE request on the other endpoints. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getProcessStatus'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getProcessStatusAsyncWithHttpInfo($processStatusId, string $contentType = self::contentTypes['getProcessStatus'][0])
    {
        $returnType = '\ThisIsDevelopment\OpenApi\Bol\Shared\Models\ProcessStatus';
        $request = $this->getProcessStatusRequest($processStatusId, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getProcessStatus'
     *
     * @param  string $processStatusId The id of the process status being requested. This id is supplied in every response to a PUT/POST/DELETE request on the other endpoints. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getProcessStatus'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getProcessStatusRequest($processStatusId, string $contentType = self::contentTypes['getProcessStatus'][0])
    {

        // verify the required parameter 'processStatusId' is set
        if ($processStatusId === null || (is_array($processStatusId) && count($processStatusId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $processStatusId when calling getProcessStatus'
            );
        }


        $resourcePath = '/shared/process-status/{process-status-id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($processStatusId !== null) {
            $resourcePath = str_replace(
                '{' . 'process-status-id' . '}',
                ObjectSerializer::toPathValue($processStatusId),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/vnd.retailer.v8+json', 'application/vnd.advertiser.v8+json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires Bearer authentication (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getProcessStatusBulk
     *
     * Get the status of multiple asynchronous processes by an array of process status ids for a retailer
     *
     * @param  \ThisIsDevelopment\OpenApi\Bol\Shared\Models\BulkProcessStatusRequest $bulkProcessStatusRequest bulkProcessStatusRequest (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getProcessStatusBulk'] to see the possible values for this operation
     *
     * @throws \ThisIsDevelopment\OpenApi\Bol\Shared\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \ThisIsDevelopment\OpenApi\Bol\Shared\Models\ProcessStatusResponse|\ThisIsDevelopment\OpenApi\Bol\Shared\Models\Problem
     */
    public function getProcessStatusBulk($bulkProcessStatusRequest, string $contentType = self::contentTypes['getProcessStatusBulk'][0])
    {
        list($response) = $this->getProcessStatusBulkWithHttpInfo($bulkProcessStatusRequest, $contentType);
        return $response;
    }

    /**
     * Operation getProcessStatusBulkWithHttpInfo
     *
     * Get the status of multiple asynchronous processes by an array of process status ids for a retailer
     *
     * @param  \ThisIsDevelopment\OpenApi\Bol\Shared\Models\BulkProcessStatusRequest $bulkProcessStatusRequest (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getProcessStatusBulk'] to see the possible values for this operation
     *
     * @throws \ThisIsDevelopment\OpenApi\Bol\Shared\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \ThisIsDevelopment\OpenApi\Bol\Shared\Models\ProcessStatusResponse|\ThisIsDevelopment\OpenApi\Bol\Shared\Models\Problem, HTTP status code, HTTP response headers (array of strings)
     */
    public function getProcessStatusBulkWithHttpInfo($bulkProcessStatusRequest, string $contentType = self::contentTypes['getProcessStatusBulk'][0])
    {
        $request = $this->getProcessStatusBulkRequest($bulkProcessStatusRequest, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\ThisIsDevelopment\OpenApi\Bol\Shared\Models\ProcessStatusResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\ThisIsDevelopment\OpenApi\Bol\Shared\Models\ProcessStatusResponse' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\ThisIsDevelopment\OpenApi\Bol\Shared\Models\ProcessStatusResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 400:
                    if ('\ThisIsDevelopment\OpenApi\Bol\Shared\Models\Problem' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\ThisIsDevelopment\OpenApi\Bol\Shared\Models\Problem' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\ThisIsDevelopment\OpenApi\Bol\Shared\Models\Problem', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\ThisIsDevelopment\OpenApi\Bol\Shared\Models\ProcessStatusResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ThisIsDevelopment\OpenApi\Bol\Shared\Models\ProcessStatusResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ThisIsDevelopment\OpenApi\Bol\Shared\Models\Problem',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getProcessStatusBulkAsync
     *
     * Get the status of multiple asynchronous processes by an array of process status ids for a retailer
     *
     * @param  \ThisIsDevelopment\OpenApi\Bol\Shared\Models\BulkProcessStatusRequest $bulkProcessStatusRequest (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getProcessStatusBulk'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getProcessStatusBulkAsync($bulkProcessStatusRequest, string $contentType = self::contentTypes['getProcessStatusBulk'][0])
    {
        return $this->getProcessStatusBulkAsyncWithHttpInfo($bulkProcessStatusRequest, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getProcessStatusBulkAsyncWithHttpInfo
     *
     * Get the status of multiple asynchronous processes by an array of process status ids for a retailer
     *
     * @param  \ThisIsDevelopment\OpenApi\Bol\Shared\Models\BulkProcessStatusRequest $bulkProcessStatusRequest (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getProcessStatusBulk'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getProcessStatusBulkAsyncWithHttpInfo($bulkProcessStatusRequest, string $contentType = self::contentTypes['getProcessStatusBulk'][0])
    {
        $returnType = '\ThisIsDevelopment\OpenApi\Bol\Shared\Models\ProcessStatusResponse';
        $request = $this->getProcessStatusBulkRequest($bulkProcessStatusRequest, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getProcessStatusBulk'
     *
     * @param  \ThisIsDevelopment\OpenApi\Bol\Shared\Models\BulkProcessStatusRequest $bulkProcessStatusRequest (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getProcessStatusBulk'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getProcessStatusBulkRequest($bulkProcessStatusRequest, string $contentType = self::contentTypes['getProcessStatusBulk'][0])
    {

        // verify the required parameter 'bulkProcessStatusRequest' is set
        if ($bulkProcessStatusRequest === null || (is_array($bulkProcessStatusRequest) && count($bulkProcessStatusRequest) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $bulkProcessStatusRequest when calling getProcessStatusBulk'
            );
        }


        $resourcePath = '/shared/process-status';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;





        $headers = $this->headerSelector->selectHeaders(
            ['application/vnd.retailer.v8+json', 'application/vnd.advertiser.v8+json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($bulkProcessStatusRequest)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($bulkProcessStatusRequest));
            } else {
                $httpBody = $bulkProcessStatusRequest;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires Bearer authentication (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getProcessStatusEntityId
     *
     * Get the status of an asynchronous process by entity id and event type for a retailer
     *
     * @param  string $entityId The entity id is not unique, so you will need to provide an event type. For example, an entity id can be an order item id, transport id, return number, replenishment id, campaign id, and keyword id. (required)
     * @param  string $eventType The event type can only be used in combination with the entity id. (required)
     * @param  int $page The requested page number with a page size of 50 items. (optional, default to 1)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getProcessStatusEntityId'] to see the possible values for this operation
     *
     * @throws \ThisIsDevelopment\OpenApi\Bol\Shared\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \ThisIsDevelopment\OpenApi\Bol\Shared\Models\ProcessStatusResponse|\ThisIsDevelopment\OpenApi\Bol\Shared\Models\Problem
     */
    public function getProcessStatusEntityId($entityId, $eventType, $page = 1, string $contentType = self::contentTypes['getProcessStatusEntityId'][0])
    {
        list($response) = $this->getProcessStatusEntityIdWithHttpInfo($entityId, $eventType, $page, $contentType);
        return $response;
    }

    /**
     * Operation getProcessStatusEntityIdWithHttpInfo
     *
     * Get the status of an asynchronous process by entity id and event type for a retailer
     *
     * @param  string $entityId The entity id is not unique, so you will need to provide an event type. For example, an entity id can be an order item id, transport id, return number, replenishment id, campaign id, and keyword id. (required)
     * @param  string $eventType The event type can only be used in combination with the entity id. (required)
     * @param  int $page The requested page number with a page size of 50 items. (optional, default to 1)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getProcessStatusEntityId'] to see the possible values for this operation
     *
     * @throws \ThisIsDevelopment\OpenApi\Bol\Shared\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \ThisIsDevelopment\OpenApi\Bol\Shared\Models\ProcessStatusResponse|\ThisIsDevelopment\OpenApi\Bol\Shared\Models\Problem, HTTP status code, HTTP response headers (array of strings)
     */
    public function getProcessStatusEntityIdWithHttpInfo($entityId, $eventType, $page = 1, string $contentType = self::contentTypes['getProcessStatusEntityId'][0])
    {
        $request = $this->getProcessStatusEntityIdRequest($entityId, $eventType, $page, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\ThisIsDevelopment\OpenApi\Bol\Shared\Models\ProcessStatusResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\ThisIsDevelopment\OpenApi\Bol\Shared\Models\ProcessStatusResponse' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\ThisIsDevelopment\OpenApi\Bol\Shared\Models\ProcessStatusResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 400:
                    if ('\ThisIsDevelopment\OpenApi\Bol\Shared\Models\Problem' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\ThisIsDevelopment\OpenApi\Bol\Shared\Models\Problem' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\ThisIsDevelopment\OpenApi\Bol\Shared\Models\Problem', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\ThisIsDevelopment\OpenApi\Bol\Shared\Models\ProcessStatusResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ThisIsDevelopment\OpenApi\Bol\Shared\Models\ProcessStatusResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ThisIsDevelopment\OpenApi\Bol\Shared\Models\Problem',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getProcessStatusEntityIdAsync
     *
     * Get the status of an asynchronous process by entity id and event type for a retailer
     *
     * @param  string $entityId The entity id is not unique, so you will need to provide an event type. For example, an entity id can be an order item id, transport id, return number, replenishment id, campaign id, and keyword id. (required)
     * @param  string $eventType The event type can only be used in combination with the entity id. (required)
     * @param  int $page The requested page number with a page size of 50 items. (optional, default to 1)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getProcessStatusEntityId'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getProcessStatusEntityIdAsync($entityId, $eventType, $page = 1, string $contentType = self::contentTypes['getProcessStatusEntityId'][0])
    {
        return $this->getProcessStatusEntityIdAsyncWithHttpInfo($entityId, $eventType, $page, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getProcessStatusEntityIdAsyncWithHttpInfo
     *
     * Get the status of an asynchronous process by entity id and event type for a retailer
     *
     * @param  string $entityId The entity id is not unique, so you will need to provide an event type. For example, an entity id can be an order item id, transport id, return number, replenishment id, campaign id, and keyword id. (required)
     * @param  string $eventType The event type can only be used in combination with the entity id. (required)
     * @param  int $page The requested page number with a page size of 50 items. (optional, default to 1)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getProcessStatusEntityId'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getProcessStatusEntityIdAsyncWithHttpInfo($entityId, $eventType, $page = 1, string $contentType = self::contentTypes['getProcessStatusEntityId'][0])
    {
        $returnType = '\ThisIsDevelopment\OpenApi\Bol\Shared\Models\ProcessStatusResponse';
        $request = $this->getProcessStatusEntityIdRequest($entityId, $eventType, $page, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getProcessStatusEntityId'
     *
     * @param  string $entityId The entity id is not unique, so you will need to provide an event type. For example, an entity id can be an order item id, transport id, return number, replenishment id, campaign id, and keyword id. (required)
     * @param  string $eventType The event type can only be used in combination with the entity id. (required)
     * @param  int $page The requested page number with a page size of 50 items. (optional, default to 1)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getProcessStatusEntityId'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getProcessStatusEntityIdRequest($entityId, $eventType, $page = 1, string $contentType = self::contentTypes['getProcessStatusEntityId'][0])
    {

        // verify the required parameter 'entityId' is set
        if ($entityId === null || (is_array($entityId) && count($entityId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $entityId when calling getProcessStatusEntityId'
            );
        }

        // verify the required parameter 'eventType' is set
        if ($eventType === null || (is_array($eventType) && count($eventType) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $eventType when calling getProcessStatusEntityId'
            );
        }

        if ($page !== null && $page < 1) {
            throw new \InvalidArgumentException('invalid value for "$page" when calling ProcessStatusApi.getProcessStatusEntityId, must be bigger than or equal to 1.');
        }
        

        $resourcePath = '/shared/process-status';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $entityId,
            'entity-id', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            true // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $eventType,
            'event-type', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            true // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $page,
            'page', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);




        $headers = $this->headerSelector->selectHeaders(
            ['application/vnd.retailer.v8+json', 'application/vnd.advertiser.v8+json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires Bearer authentication (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }
}
