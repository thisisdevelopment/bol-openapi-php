<?php
/**
 * ReportingApi
 * PHP version 7.4
 *
 * @category Class
 * @package  ThisIsDevelopment\OpenApi\Bol\Advertiser
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * v10 - Advertising API
 *
 * The bol.com API for advertisers.  # Authentication Our API requires authentication via OAuth2. The detailed steps to authenticate are explained [here](https://api.bol.com/retailer/public/Retailer-API/authentication.html)   # Demo scenarios Our API specification includes examples of the responses you can expect. For more information as well as more examples, we refer you to the following resources:   - [Demo environment](https://api.bol.com/retailer/public/Retailer-API/demo/demo.html) - [Demo scenarios](https://api.bol.com/retailer/public/Retailer-API/demo/v10-index.html)
 *
 * The version of the OpenAPI document: 10.x
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 7.3.0-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace ThisIsDevelopment\OpenApi\Bol\Advertiser\Api;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\ConnectException;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use ThisIsDevelopment\OpenApi\Bol\Advertiser\ApiException;
use ThisIsDevelopment\OpenApi\Bol\Advertiser\Configuration;
use ThisIsDevelopment\OpenApi\Bol\Advertiser\HeaderSelector;
use ThisIsDevelopment\OpenApi\Bol\Advertiser\ObjectSerializer;

/**
 * ReportingApi Class Doc Comment
 *
 * @category Class
 * @package  ThisIsDevelopment\OpenApi\Bol\Advertiser
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class ReportingApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * @var int Host index
     */
    protected $hostIndex;

    /** @var string[] $contentTypes **/
    public const contentTypes = [
        'createShareOfVoiceCategoryReport' => [
            'application/json',
        ],
        'createShareOfVoiceSearchTermReport' => [
            'application/json',
        ],
        'getCampaignPerformanceReport' => [
            'application/json',
        ],
        'getShareOfVoiceReport' => [
            'application/json',
        ],
        'postCampaignPerformanceReport' => [
            'application/json',
        ],
    ];

    /**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     * @param int             $hostIndex (Optional) host index to select the list of hosts if defined in the OpenAPI spec
     */
    public function __construct(
        ClientInterface $client = null,
        Configuration $config = null,
        HeaderSelector $selector = null,
        $hostIndex = 0
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: new Configuration();
        $this->headerSelector = $selector ?: new HeaderSelector();
        $this->hostIndex = $hostIndex;
    }

    /**
     * Set the host index
     *
     * @param int $hostIndex Host index (required)
     */
    public function setHostIndex($hostIndex): void
    {
        $this->hostIndex = $hostIndex;
    }

    /**
     * Get the host index
     *
     * @return int Host index
     */
    public function getHostIndex()
    {
        return $this->hostIndex;
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation createShareOfVoiceCategoryReport
     *
     * Request a share of voice report for categories (BETA)
     *
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createShareOfVoiceCategoryReport'] to see the possible values for this operation
     *
     * @throws \ThisIsDevelopment\OpenApi\Bol\Advertiser\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \ThisIsDevelopment\OpenApi\Bol\Advertiser\Models\ProcessStatus
     */
    public function createShareOfVoiceCategoryReport(string $contentType = self::contentTypes['createShareOfVoiceCategoryReport'][0])
    {
        list($response) = $this->createShareOfVoiceCategoryReportWithHttpInfo($contentType);
        return $response;
    }

    /**
     * Operation createShareOfVoiceCategoryReportWithHttpInfo
     *
     * Request a share of voice report for categories (BETA)
     *
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createShareOfVoiceCategoryReport'] to see the possible values for this operation
     *
     * @throws \ThisIsDevelopment\OpenApi\Bol\Advertiser\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \ThisIsDevelopment\OpenApi\Bol\Advertiser\Models\ProcessStatus, HTTP status code, HTTP response headers (array of strings)
     */
    public function createShareOfVoiceCategoryReportWithHttpInfo(string $contentType = self::contentTypes['createShareOfVoiceCategoryReport'][0])
    {
        $request = $this->createShareOfVoiceCategoryReportRequest($contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 202:
                    if ('\ThisIsDevelopment\OpenApi\Bol\Advertiser\Models\ProcessStatus' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\ThisIsDevelopment\OpenApi\Bol\Advertiser\Models\ProcessStatus' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\ThisIsDevelopment\OpenApi\Bol\Advertiser\Models\ProcessStatus', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\ThisIsDevelopment\OpenApi\Bol\Advertiser\Models\ProcessStatus';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 202:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ThisIsDevelopment\OpenApi\Bol\Advertiser\Models\ProcessStatus',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation createShareOfVoiceCategoryReportAsync
     *
     * Request a share of voice report for categories (BETA)
     *
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createShareOfVoiceCategoryReport'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function createShareOfVoiceCategoryReportAsync(string $contentType = self::contentTypes['createShareOfVoiceCategoryReport'][0])
    {
        return $this->createShareOfVoiceCategoryReportAsyncWithHttpInfo($contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation createShareOfVoiceCategoryReportAsyncWithHttpInfo
     *
     * Request a share of voice report for categories (BETA)
     *
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createShareOfVoiceCategoryReport'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function createShareOfVoiceCategoryReportAsyncWithHttpInfo(string $contentType = self::contentTypes['createShareOfVoiceCategoryReport'][0])
    {
        $returnType = '\ThisIsDevelopment\OpenApi\Bol\Advertiser\Models\ProcessStatus';
        $request = $this->createShareOfVoiceCategoryReportRequest($contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'createShareOfVoiceCategoryReport'
     *
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createShareOfVoiceCategoryReport'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function createShareOfVoiceCategoryReportRequest(string $contentType = self::contentTypes['createShareOfVoiceCategoryReport'][0])
    {


        $resourcePath = '/advertiser/sponsored-products/share-of-voice/reports/category';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;





        $headers = $this->headerSelector->selectHeaders(
            ['application/vnd.advertiser.v10+json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires Bearer authentication (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation createShareOfVoiceSearchTermReport
     *
     * Request a share of voice report for search terms (BETA)
     *
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createShareOfVoiceSearchTermReport'] to see the possible values for this operation
     *
     * @throws \ThisIsDevelopment\OpenApi\Bol\Advertiser\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \ThisIsDevelopment\OpenApi\Bol\Advertiser\Models\ProcessStatus
     */
    public function createShareOfVoiceSearchTermReport(string $contentType = self::contentTypes['createShareOfVoiceSearchTermReport'][0])
    {
        list($response) = $this->createShareOfVoiceSearchTermReportWithHttpInfo($contentType);
        return $response;
    }

    /**
     * Operation createShareOfVoiceSearchTermReportWithHttpInfo
     *
     * Request a share of voice report for search terms (BETA)
     *
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createShareOfVoiceSearchTermReport'] to see the possible values for this operation
     *
     * @throws \ThisIsDevelopment\OpenApi\Bol\Advertiser\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \ThisIsDevelopment\OpenApi\Bol\Advertiser\Models\ProcessStatus, HTTP status code, HTTP response headers (array of strings)
     */
    public function createShareOfVoiceSearchTermReportWithHttpInfo(string $contentType = self::contentTypes['createShareOfVoiceSearchTermReport'][0])
    {
        $request = $this->createShareOfVoiceSearchTermReportRequest($contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 202:
                    if ('\ThisIsDevelopment\OpenApi\Bol\Advertiser\Models\ProcessStatus' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\ThisIsDevelopment\OpenApi\Bol\Advertiser\Models\ProcessStatus' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\ThisIsDevelopment\OpenApi\Bol\Advertiser\Models\ProcessStatus', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\ThisIsDevelopment\OpenApi\Bol\Advertiser\Models\ProcessStatus';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 202:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ThisIsDevelopment\OpenApi\Bol\Advertiser\Models\ProcessStatus',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation createShareOfVoiceSearchTermReportAsync
     *
     * Request a share of voice report for search terms (BETA)
     *
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createShareOfVoiceSearchTermReport'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function createShareOfVoiceSearchTermReportAsync(string $contentType = self::contentTypes['createShareOfVoiceSearchTermReport'][0])
    {
        return $this->createShareOfVoiceSearchTermReportAsyncWithHttpInfo($contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation createShareOfVoiceSearchTermReportAsyncWithHttpInfo
     *
     * Request a share of voice report for search terms (BETA)
     *
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createShareOfVoiceSearchTermReport'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function createShareOfVoiceSearchTermReportAsyncWithHttpInfo(string $contentType = self::contentTypes['createShareOfVoiceSearchTermReport'][0])
    {
        $returnType = '\ThisIsDevelopment\OpenApi\Bol\Advertiser\Models\ProcessStatus';
        $request = $this->createShareOfVoiceSearchTermReportRequest($contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'createShareOfVoiceSearchTermReport'
     *
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createShareOfVoiceSearchTermReport'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function createShareOfVoiceSearchTermReportRequest(string $contentType = self::contentTypes['createShareOfVoiceSearchTermReport'][0])
    {


        $resourcePath = '/advertiser/sponsored-products/share-of-voice/reports/search-term';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;





        $headers = $this->headerSelector->selectHeaders(
            ['application/vnd.advertiser.v10+json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires Bearer authentication (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getCampaignPerformanceReport
     *
     * Retrieve a campaign performance report by report id (BETA)
     *
     * @param  string $reportId Unique identifier for a campaign performance report (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getCampaignPerformanceReport'] to see the possible values for this operation
     *
     * @throws \ThisIsDevelopment\OpenApi\Bol\Advertiser\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \ThisIsDevelopment\OpenApi\Bol\Advertiser\Models\GetCampaignPerformanceReportResponse|\ThisIsDevelopment\OpenApi\Bol\Advertiser\Models\GetCampaignPerformanceReportResponse|\ThisIsDevelopment\OpenApi\Bol\Advertiser\Models\GetCampaignPerformanceReportResponse
     */
    public function getCampaignPerformanceReport($reportId, string $contentType = self::contentTypes['getCampaignPerformanceReport'][0])
    {
        list($response) = $this->getCampaignPerformanceReportWithHttpInfo($reportId, $contentType);
        return $response;
    }

    /**
     * Operation getCampaignPerformanceReportWithHttpInfo
     *
     * Retrieve a campaign performance report by report id (BETA)
     *
     * @param  string $reportId Unique identifier for a campaign performance report (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getCampaignPerformanceReport'] to see the possible values for this operation
     *
     * @throws \ThisIsDevelopment\OpenApi\Bol\Advertiser\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \ThisIsDevelopment\OpenApi\Bol\Advertiser\Models\GetCampaignPerformanceReportResponse|\ThisIsDevelopment\OpenApi\Bol\Advertiser\Models\GetCampaignPerformanceReportResponse|\ThisIsDevelopment\OpenApi\Bol\Advertiser\Models\GetCampaignPerformanceReportResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function getCampaignPerformanceReportWithHttpInfo($reportId, string $contentType = self::contentTypes['getCampaignPerformanceReport'][0])
    {
        $request = $this->getCampaignPerformanceReportRequest($reportId, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\ThisIsDevelopment\OpenApi\Bol\Advertiser\Models\GetCampaignPerformanceReportResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\ThisIsDevelopment\OpenApi\Bol\Advertiser\Models\GetCampaignPerformanceReportResponse' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\ThisIsDevelopment\OpenApi\Bol\Advertiser\Models\GetCampaignPerformanceReportResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 404:
                    if ('\ThisIsDevelopment\OpenApi\Bol\Advertiser\Models\GetCampaignPerformanceReportResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\ThisIsDevelopment\OpenApi\Bol\Advertiser\Models\GetCampaignPerformanceReportResponse' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\ThisIsDevelopment\OpenApi\Bol\Advertiser\Models\GetCampaignPerformanceReportResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 410:
                    if ('\ThisIsDevelopment\OpenApi\Bol\Advertiser\Models\GetCampaignPerformanceReportResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\ThisIsDevelopment\OpenApi\Bol\Advertiser\Models\GetCampaignPerformanceReportResponse' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\ThisIsDevelopment\OpenApi\Bol\Advertiser\Models\GetCampaignPerformanceReportResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\ThisIsDevelopment\OpenApi\Bol\Advertiser\Models\GetCampaignPerformanceReportResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ThisIsDevelopment\OpenApi\Bol\Advertiser\Models\GetCampaignPerformanceReportResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ThisIsDevelopment\OpenApi\Bol\Advertiser\Models\GetCampaignPerformanceReportResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 410:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ThisIsDevelopment\OpenApi\Bol\Advertiser\Models\GetCampaignPerformanceReportResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getCampaignPerformanceReportAsync
     *
     * Retrieve a campaign performance report by report id (BETA)
     *
     * @param  string $reportId Unique identifier for a campaign performance report (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getCampaignPerformanceReport'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getCampaignPerformanceReportAsync($reportId, string $contentType = self::contentTypes['getCampaignPerformanceReport'][0])
    {
        return $this->getCampaignPerformanceReportAsyncWithHttpInfo($reportId, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getCampaignPerformanceReportAsyncWithHttpInfo
     *
     * Retrieve a campaign performance report by report id (BETA)
     *
     * @param  string $reportId Unique identifier for a campaign performance report (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getCampaignPerformanceReport'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getCampaignPerformanceReportAsyncWithHttpInfo($reportId, string $contentType = self::contentTypes['getCampaignPerformanceReport'][0])
    {
        $returnType = '\ThisIsDevelopment\OpenApi\Bol\Advertiser\Models\GetCampaignPerformanceReportResponse';
        $request = $this->getCampaignPerformanceReportRequest($reportId, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getCampaignPerformanceReport'
     *
     * @param  string $reportId Unique identifier for a campaign performance report (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getCampaignPerformanceReport'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getCampaignPerformanceReportRequest($reportId, string $contentType = self::contentTypes['getCampaignPerformanceReport'][0])
    {

        // verify the required parameter 'reportId' is set
        if ($reportId === null || (is_array($reportId) && count($reportId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $reportId when calling getCampaignPerformanceReport'
            );
        }


        $resourcePath = '/advertiser/sponsored-products/campaign-performance/reports/{report-id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($reportId !== null) {
            $resourcePath = str_replace(
                '{' . 'report-id' . '}',
                ObjectSerializer::toPathValue($reportId),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/vnd.advertiser.v10+json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires Bearer authentication (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getShareOfVoiceReport
     *
     * Retrieve a share of voice report by report id (BETA)
     *
     * @param  string $reportId Unique identifier for a share of voice report (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getShareOfVoiceReport'] to see the possible values for this operation
     *
     * @throws \ThisIsDevelopment\OpenApi\Bol\Advertiser\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \ThisIsDevelopment\OpenApi\Bol\Advertiser\Models\GetShareOfVoiceReportResponse|\ThisIsDevelopment\OpenApi\Bol\Advertiser\Models\GetShareOfVoiceReportResponse|\ThisIsDevelopment\OpenApi\Bol\Advertiser\Models\GetShareOfVoiceReportResponse
     */
    public function getShareOfVoiceReport($reportId, string $contentType = self::contentTypes['getShareOfVoiceReport'][0])
    {
        list($response) = $this->getShareOfVoiceReportWithHttpInfo($reportId, $contentType);
        return $response;
    }

    /**
     * Operation getShareOfVoiceReportWithHttpInfo
     *
     * Retrieve a share of voice report by report id (BETA)
     *
     * @param  string $reportId Unique identifier for a share of voice report (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getShareOfVoiceReport'] to see the possible values for this operation
     *
     * @throws \ThisIsDevelopment\OpenApi\Bol\Advertiser\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \ThisIsDevelopment\OpenApi\Bol\Advertiser\Models\GetShareOfVoiceReportResponse|\ThisIsDevelopment\OpenApi\Bol\Advertiser\Models\GetShareOfVoiceReportResponse|\ThisIsDevelopment\OpenApi\Bol\Advertiser\Models\GetShareOfVoiceReportResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function getShareOfVoiceReportWithHttpInfo($reportId, string $contentType = self::contentTypes['getShareOfVoiceReport'][0])
    {
        $request = $this->getShareOfVoiceReportRequest($reportId, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\ThisIsDevelopment\OpenApi\Bol\Advertiser\Models\GetShareOfVoiceReportResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\ThisIsDevelopment\OpenApi\Bol\Advertiser\Models\GetShareOfVoiceReportResponse' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\ThisIsDevelopment\OpenApi\Bol\Advertiser\Models\GetShareOfVoiceReportResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 404:
                    if ('\ThisIsDevelopment\OpenApi\Bol\Advertiser\Models\GetShareOfVoiceReportResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\ThisIsDevelopment\OpenApi\Bol\Advertiser\Models\GetShareOfVoiceReportResponse' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\ThisIsDevelopment\OpenApi\Bol\Advertiser\Models\GetShareOfVoiceReportResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 410:
                    if ('\ThisIsDevelopment\OpenApi\Bol\Advertiser\Models\GetShareOfVoiceReportResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\ThisIsDevelopment\OpenApi\Bol\Advertiser\Models\GetShareOfVoiceReportResponse' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\ThisIsDevelopment\OpenApi\Bol\Advertiser\Models\GetShareOfVoiceReportResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\ThisIsDevelopment\OpenApi\Bol\Advertiser\Models\GetShareOfVoiceReportResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ThisIsDevelopment\OpenApi\Bol\Advertiser\Models\GetShareOfVoiceReportResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ThisIsDevelopment\OpenApi\Bol\Advertiser\Models\GetShareOfVoiceReportResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 410:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ThisIsDevelopment\OpenApi\Bol\Advertiser\Models\GetShareOfVoiceReportResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getShareOfVoiceReportAsync
     *
     * Retrieve a share of voice report by report id (BETA)
     *
     * @param  string $reportId Unique identifier for a share of voice report (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getShareOfVoiceReport'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getShareOfVoiceReportAsync($reportId, string $contentType = self::contentTypes['getShareOfVoiceReport'][0])
    {
        return $this->getShareOfVoiceReportAsyncWithHttpInfo($reportId, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getShareOfVoiceReportAsyncWithHttpInfo
     *
     * Retrieve a share of voice report by report id (BETA)
     *
     * @param  string $reportId Unique identifier for a share of voice report (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getShareOfVoiceReport'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getShareOfVoiceReportAsyncWithHttpInfo($reportId, string $contentType = self::contentTypes['getShareOfVoiceReport'][0])
    {
        $returnType = '\ThisIsDevelopment\OpenApi\Bol\Advertiser\Models\GetShareOfVoiceReportResponse';
        $request = $this->getShareOfVoiceReportRequest($reportId, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getShareOfVoiceReport'
     *
     * @param  string $reportId Unique identifier for a share of voice report (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getShareOfVoiceReport'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getShareOfVoiceReportRequest($reportId, string $contentType = self::contentTypes['getShareOfVoiceReport'][0])
    {

        // verify the required parameter 'reportId' is set
        if ($reportId === null || (is_array($reportId) && count($reportId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $reportId when calling getShareOfVoiceReport'
            );
        }


        $resourcePath = '/advertiser/sponsored-products/share-of-voice/reports/{report-id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($reportId !== null) {
            $resourcePath = str_replace(
                '{' . 'report-id' . '}',
                ObjectSerializer::toPathValue($reportId),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/vnd.advertiser.v10+json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires Bearer authentication (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation postCampaignPerformanceReport
     *
     * Request a campaign performance report (BETA)
     *
     * @param  string $startDate The start date for the reporting period. Period start date in ISO 8601 standard. (optional)
     * @param  string $endDate The end date for the reporting period. This will be one day after the last full day that is included in the reporting. Period end date in ISO 8601 standard. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['postCampaignPerformanceReport'] to see the possible values for this operation
     *
     * @throws \ThisIsDevelopment\OpenApi\Bol\Advertiser\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \ThisIsDevelopment\OpenApi\Bol\Advertiser\Models\ProcessStatus
     */
    public function postCampaignPerformanceReport($startDate = null, $endDate = null, string $contentType = self::contentTypes['postCampaignPerformanceReport'][0])
    {
        list($response) = $this->postCampaignPerformanceReportWithHttpInfo($startDate, $endDate, $contentType);
        return $response;
    }

    /**
     * Operation postCampaignPerformanceReportWithHttpInfo
     *
     * Request a campaign performance report (BETA)
     *
     * @param  string $startDate The start date for the reporting period. Period start date in ISO 8601 standard. (optional)
     * @param  string $endDate The end date for the reporting period. This will be one day after the last full day that is included in the reporting. Period end date in ISO 8601 standard. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['postCampaignPerformanceReport'] to see the possible values for this operation
     *
     * @throws \ThisIsDevelopment\OpenApi\Bol\Advertiser\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \ThisIsDevelopment\OpenApi\Bol\Advertiser\Models\ProcessStatus, HTTP status code, HTTP response headers (array of strings)
     */
    public function postCampaignPerformanceReportWithHttpInfo($startDate = null, $endDate = null, string $contentType = self::contentTypes['postCampaignPerformanceReport'][0])
    {
        $request = $this->postCampaignPerformanceReportRequest($startDate, $endDate, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 202:
                    if ('\ThisIsDevelopment\OpenApi\Bol\Advertiser\Models\ProcessStatus' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\ThisIsDevelopment\OpenApi\Bol\Advertiser\Models\ProcessStatus' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\ThisIsDevelopment\OpenApi\Bol\Advertiser\Models\ProcessStatus', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\ThisIsDevelopment\OpenApi\Bol\Advertiser\Models\ProcessStatus';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 202:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ThisIsDevelopment\OpenApi\Bol\Advertiser\Models\ProcessStatus',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation postCampaignPerformanceReportAsync
     *
     * Request a campaign performance report (BETA)
     *
     * @param  string $startDate The start date for the reporting period. Period start date in ISO 8601 standard. (optional)
     * @param  string $endDate The end date for the reporting period. This will be one day after the last full day that is included in the reporting. Period end date in ISO 8601 standard. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['postCampaignPerformanceReport'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function postCampaignPerformanceReportAsync($startDate = null, $endDate = null, string $contentType = self::contentTypes['postCampaignPerformanceReport'][0])
    {
        return $this->postCampaignPerformanceReportAsyncWithHttpInfo($startDate, $endDate, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation postCampaignPerformanceReportAsyncWithHttpInfo
     *
     * Request a campaign performance report (BETA)
     *
     * @param  string $startDate The start date for the reporting period. Period start date in ISO 8601 standard. (optional)
     * @param  string $endDate The end date for the reporting period. This will be one day after the last full day that is included in the reporting. Period end date in ISO 8601 standard. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['postCampaignPerformanceReport'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function postCampaignPerformanceReportAsyncWithHttpInfo($startDate = null, $endDate = null, string $contentType = self::contentTypes['postCampaignPerformanceReport'][0])
    {
        $returnType = '\ThisIsDevelopment\OpenApi\Bol\Advertiser\Models\ProcessStatus';
        $request = $this->postCampaignPerformanceReportRequest($startDate, $endDate, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'postCampaignPerformanceReport'
     *
     * @param  string $startDate The start date for the reporting period. Period start date in ISO 8601 standard. (optional)
     * @param  string $endDate The end date for the reporting period. This will be one day after the last full day that is included in the reporting. Period end date in ISO 8601 standard. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['postCampaignPerformanceReport'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function postCampaignPerformanceReportRequest($startDate = null, $endDate = null, string $contentType = self::contentTypes['postCampaignPerformanceReport'][0])
    {




        $resourcePath = '/advertiser/sponsored-products/campaign-performance/reports';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $startDate,
            'start-date', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $endDate,
            'end-date', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);




        $headers = $this->headerSelector->selectHeaders(
            ['application/vnd.advertiser.v10+json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires Bearer authentication (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }
}
