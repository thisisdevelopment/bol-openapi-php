<?php
/**
 * ReportingApi
 * PHP version 7.4
 *
 * @category Class
 * @package  ThisIsDevelopment\OpenApi\Bol\Advertiser
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * v9 - Advertising API
 *
 * The bol.com API for advertisers.  # Authentication Our API requires authentication via OAuth2. The detailed steps to authenticate are explained [here](https://api.bol.com/retailer/public/Retailer-API/authentication.html)   # Demo scenarios Our API specification includes examples of the responses you can expect. For more information as well as more examples, we refer you to the following resources:   - [Demo environment](https://api.bol.com/retailer/public/Retailer-API/demo/demo.html) - [Demo scenarios](https://api.bol.com/retailer/public/Retailer-API/demo/v9-index.html)
 *
 * The version of the OpenAPI document: 9.x
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 7.3.0-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace ThisIsDevelopment\OpenApi\Bol\Advertiser\Api;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\ConnectException;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use ThisIsDevelopment\OpenApi\Bol\Advertiser\ApiException;
use ThisIsDevelopment\OpenApi\Bol\Advertiser\Configuration;
use ThisIsDevelopment\OpenApi\Bol\Advertiser\HeaderSelector;
use ThisIsDevelopment\OpenApi\Bol\Advertiser\ObjectSerializer;

/**
 * ReportingApi Class Doc Comment
 *
 * @category Class
 * @package  ThisIsDevelopment\OpenApi\Bol\Advertiser
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class ReportingApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * @var int Host index
     */
    protected $hostIndex;

    /** @var string[] $contentTypes **/
    public const contentTypes = [
        'getAdGroupPerformance' => [
            'application/json',
        ],
        'getAdvertiserPerformance' => [
            'application/json',
        ],
        'getCampaignPerformance' => [
            'application/json',
        ],
        'getKeywordPerformance' => [
            'application/json',
        ],
        'getProductPerformance' => [
            'application/json',
        ],
        'getSearchTermPerformance' => [
            'application/json',
        ],
    ];

    /**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     * @param int             $hostIndex (Optional) host index to select the list of hosts if defined in the OpenAPI spec
     */
    public function __construct(
        ClientInterface $client = null,
        Configuration $config = null,
        HeaderSelector $selector = null,
        $hostIndex = 0
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: new Configuration();
        $this->headerSelector = $selector ?: new HeaderSelector();
        $this->hostIndex = $hostIndex;
    }

    /**
     * Set the host index
     *
     * @param int $hostIndex Host index (required)
     */
    public function setHostIndex($hostIndex): void
    {
        $this->hostIndex = $hostIndex;
    }

    /**
     * Get the host index
     *
     * @return int Host index
     */
    public function getHostIndex()
    {
        return $this->hostIndex;
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation getAdGroupPerformance
     *
     * Get ad group performance results
     *
     * @param  string $adGroupId The identifier of the ad group. (required)
     * @param  string $startDate The start date for the reporting period. Period start date in ISO 8601 standard. (required)
     * @param  string $endDate The end date for the reporting period. This will be one day after the last full day that is included in the reporting. Period end date in ISO 8601 standard. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getAdGroupPerformance'] to see the possible values for this operation
     *
     * @throws \ThisIsDevelopment\OpenApi\Bol\Advertiser\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \ThisIsDevelopment\OpenApi\Bol\Advertiser\Models\AdGroupPerformanceResponse|\ThisIsDevelopment\OpenApi\Bol\Advertiser\Models\Problem|\ThisIsDevelopment\OpenApi\Bol\Advertiser\Models\Problem
     */
    public function getAdGroupPerformance($adGroupId, $startDate, $endDate, string $contentType = self::contentTypes['getAdGroupPerformance'][0])
    {
        list($response) = $this->getAdGroupPerformanceWithHttpInfo($adGroupId, $startDate, $endDate, $contentType);
        return $response;
    }

    /**
     * Operation getAdGroupPerformanceWithHttpInfo
     *
     * Get ad group performance results
     *
     * @param  string $adGroupId The identifier of the ad group. (required)
     * @param  string $startDate The start date for the reporting period. Period start date in ISO 8601 standard. (required)
     * @param  string $endDate The end date for the reporting period. This will be one day after the last full day that is included in the reporting. Period end date in ISO 8601 standard. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getAdGroupPerformance'] to see the possible values for this operation
     *
     * @throws \ThisIsDevelopment\OpenApi\Bol\Advertiser\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \ThisIsDevelopment\OpenApi\Bol\Advertiser\Models\AdGroupPerformanceResponse|\ThisIsDevelopment\OpenApi\Bol\Advertiser\Models\Problem|\ThisIsDevelopment\OpenApi\Bol\Advertiser\Models\Problem, HTTP status code, HTTP response headers (array of strings)
     */
    public function getAdGroupPerformanceWithHttpInfo($adGroupId, $startDate, $endDate, string $contentType = self::contentTypes['getAdGroupPerformance'][0])
    {
        $request = $this->getAdGroupPerformanceRequest($adGroupId, $startDate, $endDate, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\ThisIsDevelopment\OpenApi\Bol\Advertiser\Models\AdGroupPerformanceResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\ThisIsDevelopment\OpenApi\Bol\Advertiser\Models\AdGroupPerformanceResponse' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\ThisIsDevelopment\OpenApi\Bol\Advertiser\Models\AdGroupPerformanceResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 400:
                    if ('\ThisIsDevelopment\OpenApi\Bol\Advertiser\Models\Problem' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\ThisIsDevelopment\OpenApi\Bol\Advertiser\Models\Problem' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\ThisIsDevelopment\OpenApi\Bol\Advertiser\Models\Problem', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 404:
                    if ('\ThisIsDevelopment\OpenApi\Bol\Advertiser\Models\Problem' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\ThisIsDevelopment\OpenApi\Bol\Advertiser\Models\Problem' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\ThisIsDevelopment\OpenApi\Bol\Advertiser\Models\Problem', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\ThisIsDevelopment\OpenApi\Bol\Advertiser\Models\AdGroupPerformanceResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ThisIsDevelopment\OpenApi\Bol\Advertiser\Models\AdGroupPerformanceResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ThisIsDevelopment\OpenApi\Bol\Advertiser\Models\Problem',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ThisIsDevelopment\OpenApi\Bol\Advertiser\Models\Problem',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getAdGroupPerformanceAsync
     *
     * Get ad group performance results
     *
     * @param  string $adGroupId The identifier of the ad group. (required)
     * @param  string $startDate The start date for the reporting period. Period start date in ISO 8601 standard. (required)
     * @param  string $endDate The end date for the reporting period. This will be one day after the last full day that is included in the reporting. Period end date in ISO 8601 standard. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getAdGroupPerformance'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getAdGroupPerformanceAsync($adGroupId, $startDate, $endDate, string $contentType = self::contentTypes['getAdGroupPerformance'][0])
    {
        return $this->getAdGroupPerformanceAsyncWithHttpInfo($adGroupId, $startDate, $endDate, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getAdGroupPerformanceAsyncWithHttpInfo
     *
     * Get ad group performance results
     *
     * @param  string $adGroupId The identifier of the ad group. (required)
     * @param  string $startDate The start date for the reporting period. Period start date in ISO 8601 standard. (required)
     * @param  string $endDate The end date for the reporting period. This will be one day after the last full day that is included in the reporting. Period end date in ISO 8601 standard. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getAdGroupPerformance'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getAdGroupPerformanceAsyncWithHttpInfo($adGroupId, $startDate, $endDate, string $contentType = self::contentTypes['getAdGroupPerformance'][0])
    {
        $returnType = '\ThisIsDevelopment\OpenApi\Bol\Advertiser\Models\AdGroupPerformanceResponse';
        $request = $this->getAdGroupPerformanceRequest($adGroupId, $startDate, $endDate, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getAdGroupPerformance'
     *
     * @param  string $adGroupId The identifier of the ad group. (required)
     * @param  string $startDate The start date for the reporting period. Period start date in ISO 8601 standard. (required)
     * @param  string $endDate The end date for the reporting period. This will be one day after the last full day that is included in the reporting. Period end date in ISO 8601 standard. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getAdGroupPerformance'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getAdGroupPerformanceRequest($adGroupId, $startDate, $endDate, string $contentType = self::contentTypes['getAdGroupPerformance'][0])
    {

        // verify the required parameter 'adGroupId' is set
        if ($adGroupId === null || (is_array($adGroupId) && count($adGroupId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $adGroupId when calling getAdGroupPerformance'
            );
        }

        // verify the required parameter 'startDate' is set
        if ($startDate === null || (is_array($startDate) && count($startDate) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $startDate when calling getAdGroupPerformance'
            );
        }

        // verify the required parameter 'endDate' is set
        if ($endDate === null || (is_array($endDate) && count($endDate) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $endDate when calling getAdGroupPerformance'
            );
        }


        $resourcePath = '/advertiser/sponsored-products/ad-group-performance/{ad-group-id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $startDate,
            'start-date', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            true // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $endDate,
            'end-date', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            true // required
        ) ?? []);


        // path params
        if ($adGroupId !== null) {
            $resourcePath = str_replace(
                '{' . 'ad-group-id' . '}',
                ObjectSerializer::toPathValue($adGroupId),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/vnd.advertiser.v9+json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires Bearer authentication (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getAdvertiserPerformance
     *
     * Get advertiser performance results
     *
     * @param  string $startDate The start date for the reporting period. Period start date in ISO 8601 standard. (required)
     * @param  string $endDate The end date for the reporting period. This will be one day after the last full day that is included in the reporting. Period end date in ISO 8601 standard. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getAdvertiserPerformance'] to see the possible values for this operation
     *
     * @throws \ThisIsDevelopment\OpenApi\Bol\Advertiser\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \ThisIsDevelopment\OpenApi\Bol\Advertiser\Models\AdvertiserPerformanceResponse|\ThisIsDevelopment\OpenApi\Bol\Advertiser\Models\Problem
     */
    public function getAdvertiserPerformance($startDate, $endDate, string $contentType = self::contentTypes['getAdvertiserPerformance'][0])
    {
        list($response) = $this->getAdvertiserPerformanceWithHttpInfo($startDate, $endDate, $contentType);
        return $response;
    }

    /**
     * Operation getAdvertiserPerformanceWithHttpInfo
     *
     * Get advertiser performance results
     *
     * @param  string $startDate The start date for the reporting period. Period start date in ISO 8601 standard. (required)
     * @param  string $endDate The end date for the reporting period. This will be one day after the last full day that is included in the reporting. Period end date in ISO 8601 standard. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getAdvertiserPerformance'] to see the possible values for this operation
     *
     * @throws \ThisIsDevelopment\OpenApi\Bol\Advertiser\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \ThisIsDevelopment\OpenApi\Bol\Advertiser\Models\AdvertiserPerformanceResponse|\ThisIsDevelopment\OpenApi\Bol\Advertiser\Models\Problem, HTTP status code, HTTP response headers (array of strings)
     */
    public function getAdvertiserPerformanceWithHttpInfo($startDate, $endDate, string $contentType = self::contentTypes['getAdvertiserPerformance'][0])
    {
        $request = $this->getAdvertiserPerformanceRequest($startDate, $endDate, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\ThisIsDevelopment\OpenApi\Bol\Advertiser\Models\AdvertiserPerformanceResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\ThisIsDevelopment\OpenApi\Bol\Advertiser\Models\AdvertiserPerformanceResponse' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\ThisIsDevelopment\OpenApi\Bol\Advertiser\Models\AdvertiserPerformanceResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 400:
                    if ('\ThisIsDevelopment\OpenApi\Bol\Advertiser\Models\Problem' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\ThisIsDevelopment\OpenApi\Bol\Advertiser\Models\Problem' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\ThisIsDevelopment\OpenApi\Bol\Advertiser\Models\Problem', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\ThisIsDevelopment\OpenApi\Bol\Advertiser\Models\AdvertiserPerformanceResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ThisIsDevelopment\OpenApi\Bol\Advertiser\Models\AdvertiserPerformanceResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ThisIsDevelopment\OpenApi\Bol\Advertiser\Models\Problem',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getAdvertiserPerformanceAsync
     *
     * Get advertiser performance results
     *
     * @param  string $startDate The start date for the reporting period. Period start date in ISO 8601 standard. (required)
     * @param  string $endDate The end date for the reporting period. This will be one day after the last full day that is included in the reporting. Period end date in ISO 8601 standard. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getAdvertiserPerformance'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getAdvertiserPerformanceAsync($startDate, $endDate, string $contentType = self::contentTypes['getAdvertiserPerformance'][0])
    {
        return $this->getAdvertiserPerformanceAsyncWithHttpInfo($startDate, $endDate, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getAdvertiserPerformanceAsyncWithHttpInfo
     *
     * Get advertiser performance results
     *
     * @param  string $startDate The start date for the reporting period. Period start date in ISO 8601 standard. (required)
     * @param  string $endDate The end date for the reporting period. This will be one day after the last full day that is included in the reporting. Period end date in ISO 8601 standard. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getAdvertiserPerformance'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getAdvertiserPerformanceAsyncWithHttpInfo($startDate, $endDate, string $contentType = self::contentTypes['getAdvertiserPerformance'][0])
    {
        $returnType = '\ThisIsDevelopment\OpenApi\Bol\Advertiser\Models\AdvertiserPerformanceResponse';
        $request = $this->getAdvertiserPerformanceRequest($startDate, $endDate, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getAdvertiserPerformance'
     *
     * @param  string $startDate The start date for the reporting period. Period start date in ISO 8601 standard. (required)
     * @param  string $endDate The end date for the reporting period. This will be one day after the last full day that is included in the reporting. Period end date in ISO 8601 standard. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getAdvertiserPerformance'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getAdvertiserPerformanceRequest($startDate, $endDate, string $contentType = self::contentTypes['getAdvertiserPerformance'][0])
    {

        // verify the required parameter 'startDate' is set
        if ($startDate === null || (is_array($startDate) && count($startDate) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $startDate when calling getAdvertiserPerformance'
            );
        }

        // verify the required parameter 'endDate' is set
        if ($endDate === null || (is_array($endDate) && count($endDate) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $endDate when calling getAdvertiserPerformance'
            );
        }


        $resourcePath = '/advertiser/sponsored-products/advertiser-performance';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $startDate,
            'start-date', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            true // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $endDate,
            'end-date', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            true // required
        ) ?? []);




        $headers = $this->headerSelector->selectHeaders(
            ['application/vnd.advertiser.v9+json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires Bearer authentication (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getCampaignPerformance
     *
     * Get campaign performance results
     *
     * @param  string $campaignId Unique identifier for the campaign. (required)
     * @param  string $startDate The start date for the reporting period. Period start date in ISO 8601 standard. (required)
     * @param  string $endDate The end date for the reporting period. This will be one day after the last full day that is included in the reporting. Period end date in ISO 8601 standard. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getCampaignPerformance'] to see the possible values for this operation
     *
     * @throws \ThisIsDevelopment\OpenApi\Bol\Advertiser\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \ThisIsDevelopment\OpenApi\Bol\Advertiser\Models\CampaignPerformanceResponse|\ThisIsDevelopment\OpenApi\Bol\Advertiser\Models\Problem|\ThisIsDevelopment\OpenApi\Bol\Advertiser\Models\Problem
     */
    public function getCampaignPerformance($campaignId, $startDate, $endDate, string $contentType = self::contentTypes['getCampaignPerformance'][0])
    {
        list($response) = $this->getCampaignPerformanceWithHttpInfo($campaignId, $startDate, $endDate, $contentType);
        return $response;
    }

    /**
     * Operation getCampaignPerformanceWithHttpInfo
     *
     * Get campaign performance results
     *
     * @param  string $campaignId Unique identifier for the campaign. (required)
     * @param  string $startDate The start date for the reporting period. Period start date in ISO 8601 standard. (required)
     * @param  string $endDate The end date for the reporting period. This will be one day after the last full day that is included in the reporting. Period end date in ISO 8601 standard. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getCampaignPerformance'] to see the possible values for this operation
     *
     * @throws \ThisIsDevelopment\OpenApi\Bol\Advertiser\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \ThisIsDevelopment\OpenApi\Bol\Advertiser\Models\CampaignPerformanceResponse|\ThisIsDevelopment\OpenApi\Bol\Advertiser\Models\Problem|\ThisIsDevelopment\OpenApi\Bol\Advertiser\Models\Problem, HTTP status code, HTTP response headers (array of strings)
     */
    public function getCampaignPerformanceWithHttpInfo($campaignId, $startDate, $endDate, string $contentType = self::contentTypes['getCampaignPerformance'][0])
    {
        $request = $this->getCampaignPerformanceRequest($campaignId, $startDate, $endDate, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\ThisIsDevelopment\OpenApi\Bol\Advertiser\Models\CampaignPerformanceResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\ThisIsDevelopment\OpenApi\Bol\Advertiser\Models\CampaignPerformanceResponse' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\ThisIsDevelopment\OpenApi\Bol\Advertiser\Models\CampaignPerformanceResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 400:
                    if ('\ThisIsDevelopment\OpenApi\Bol\Advertiser\Models\Problem' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\ThisIsDevelopment\OpenApi\Bol\Advertiser\Models\Problem' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\ThisIsDevelopment\OpenApi\Bol\Advertiser\Models\Problem', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 404:
                    if ('\ThisIsDevelopment\OpenApi\Bol\Advertiser\Models\Problem' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\ThisIsDevelopment\OpenApi\Bol\Advertiser\Models\Problem' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\ThisIsDevelopment\OpenApi\Bol\Advertiser\Models\Problem', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\ThisIsDevelopment\OpenApi\Bol\Advertiser\Models\CampaignPerformanceResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ThisIsDevelopment\OpenApi\Bol\Advertiser\Models\CampaignPerformanceResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ThisIsDevelopment\OpenApi\Bol\Advertiser\Models\Problem',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ThisIsDevelopment\OpenApi\Bol\Advertiser\Models\Problem',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getCampaignPerformanceAsync
     *
     * Get campaign performance results
     *
     * @param  string $campaignId Unique identifier for the campaign. (required)
     * @param  string $startDate The start date for the reporting period. Period start date in ISO 8601 standard. (required)
     * @param  string $endDate The end date for the reporting period. This will be one day after the last full day that is included in the reporting. Period end date in ISO 8601 standard. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getCampaignPerformance'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getCampaignPerformanceAsync($campaignId, $startDate, $endDate, string $contentType = self::contentTypes['getCampaignPerformance'][0])
    {
        return $this->getCampaignPerformanceAsyncWithHttpInfo($campaignId, $startDate, $endDate, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getCampaignPerformanceAsyncWithHttpInfo
     *
     * Get campaign performance results
     *
     * @param  string $campaignId Unique identifier for the campaign. (required)
     * @param  string $startDate The start date for the reporting period. Period start date in ISO 8601 standard. (required)
     * @param  string $endDate The end date for the reporting period. This will be one day after the last full day that is included in the reporting. Period end date in ISO 8601 standard. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getCampaignPerformance'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getCampaignPerformanceAsyncWithHttpInfo($campaignId, $startDate, $endDate, string $contentType = self::contentTypes['getCampaignPerformance'][0])
    {
        $returnType = '\ThisIsDevelopment\OpenApi\Bol\Advertiser\Models\CampaignPerformanceResponse';
        $request = $this->getCampaignPerformanceRequest($campaignId, $startDate, $endDate, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getCampaignPerformance'
     *
     * @param  string $campaignId Unique identifier for the campaign. (required)
     * @param  string $startDate The start date for the reporting period. Period start date in ISO 8601 standard. (required)
     * @param  string $endDate The end date for the reporting period. This will be one day after the last full day that is included in the reporting. Period end date in ISO 8601 standard. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getCampaignPerformance'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getCampaignPerformanceRequest($campaignId, $startDate, $endDate, string $contentType = self::contentTypes['getCampaignPerformance'][0])
    {

        // verify the required parameter 'campaignId' is set
        if ($campaignId === null || (is_array($campaignId) && count($campaignId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $campaignId when calling getCampaignPerformance'
            );
        }

        // verify the required parameter 'startDate' is set
        if ($startDate === null || (is_array($startDate) && count($startDate) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $startDate when calling getCampaignPerformance'
            );
        }

        // verify the required parameter 'endDate' is set
        if ($endDate === null || (is_array($endDate) && count($endDate) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $endDate when calling getCampaignPerformance'
            );
        }


        $resourcePath = '/advertiser/sponsored-products/campaign-performance/{campaign-id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $startDate,
            'start-date', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            true // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $endDate,
            'end-date', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            true // required
        ) ?? []);


        // path params
        if ($campaignId !== null) {
            $resourcePath = str_replace(
                '{' . 'campaign-id' . '}',
                ObjectSerializer::toPathValue($campaignId),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/vnd.advertiser.v9+json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires Bearer authentication (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getKeywordPerformance
     *
     * Get keyword performance results
     *
     * @param  string $adGroupId The identifier of the ad group. (required)
     * @param  string $startDate The start date for the reporting period. Period start date in ISO 8601 standard. (required)
     * @param  string $endDate The end date for the reporting period. This will be one day after the last full day that is included in the reporting. Period end date in ISO 8601 standard. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getKeywordPerformance'] to see the possible values for this operation
     *
     * @throws \ThisIsDevelopment\OpenApi\Bol\Advertiser\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \ThisIsDevelopment\OpenApi\Bol\Advertiser\Models\KeywordPerformanceResponse|\ThisIsDevelopment\OpenApi\Bol\Advertiser\Models\Problem|\ThisIsDevelopment\OpenApi\Bol\Advertiser\Models\Problem
     */
    public function getKeywordPerformance($adGroupId, $startDate, $endDate, string $contentType = self::contentTypes['getKeywordPerformance'][0])
    {
        list($response) = $this->getKeywordPerformanceWithHttpInfo($adGroupId, $startDate, $endDate, $contentType);
        return $response;
    }

    /**
     * Operation getKeywordPerformanceWithHttpInfo
     *
     * Get keyword performance results
     *
     * @param  string $adGroupId The identifier of the ad group. (required)
     * @param  string $startDate The start date for the reporting period. Period start date in ISO 8601 standard. (required)
     * @param  string $endDate The end date for the reporting period. This will be one day after the last full day that is included in the reporting. Period end date in ISO 8601 standard. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getKeywordPerformance'] to see the possible values for this operation
     *
     * @throws \ThisIsDevelopment\OpenApi\Bol\Advertiser\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \ThisIsDevelopment\OpenApi\Bol\Advertiser\Models\KeywordPerformanceResponse|\ThisIsDevelopment\OpenApi\Bol\Advertiser\Models\Problem|\ThisIsDevelopment\OpenApi\Bol\Advertiser\Models\Problem, HTTP status code, HTTP response headers (array of strings)
     */
    public function getKeywordPerformanceWithHttpInfo($adGroupId, $startDate, $endDate, string $contentType = self::contentTypes['getKeywordPerformance'][0])
    {
        $request = $this->getKeywordPerformanceRequest($adGroupId, $startDate, $endDate, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\ThisIsDevelopment\OpenApi\Bol\Advertiser\Models\KeywordPerformanceResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\ThisIsDevelopment\OpenApi\Bol\Advertiser\Models\KeywordPerformanceResponse' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\ThisIsDevelopment\OpenApi\Bol\Advertiser\Models\KeywordPerformanceResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 400:
                    if ('\ThisIsDevelopment\OpenApi\Bol\Advertiser\Models\Problem' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\ThisIsDevelopment\OpenApi\Bol\Advertiser\Models\Problem' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\ThisIsDevelopment\OpenApi\Bol\Advertiser\Models\Problem', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 404:
                    if ('\ThisIsDevelopment\OpenApi\Bol\Advertiser\Models\Problem' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\ThisIsDevelopment\OpenApi\Bol\Advertiser\Models\Problem' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\ThisIsDevelopment\OpenApi\Bol\Advertiser\Models\Problem', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\ThisIsDevelopment\OpenApi\Bol\Advertiser\Models\KeywordPerformanceResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ThisIsDevelopment\OpenApi\Bol\Advertiser\Models\KeywordPerformanceResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ThisIsDevelopment\OpenApi\Bol\Advertiser\Models\Problem',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ThisIsDevelopment\OpenApi\Bol\Advertiser\Models\Problem',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getKeywordPerformanceAsync
     *
     * Get keyword performance results
     *
     * @param  string $adGroupId The identifier of the ad group. (required)
     * @param  string $startDate The start date for the reporting period. Period start date in ISO 8601 standard. (required)
     * @param  string $endDate The end date for the reporting period. This will be one day after the last full day that is included in the reporting. Period end date in ISO 8601 standard. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getKeywordPerformance'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getKeywordPerformanceAsync($adGroupId, $startDate, $endDate, string $contentType = self::contentTypes['getKeywordPerformance'][0])
    {
        return $this->getKeywordPerformanceAsyncWithHttpInfo($adGroupId, $startDate, $endDate, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getKeywordPerformanceAsyncWithHttpInfo
     *
     * Get keyword performance results
     *
     * @param  string $adGroupId The identifier of the ad group. (required)
     * @param  string $startDate The start date for the reporting period. Period start date in ISO 8601 standard. (required)
     * @param  string $endDate The end date for the reporting period. This will be one day after the last full day that is included in the reporting. Period end date in ISO 8601 standard. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getKeywordPerformance'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getKeywordPerformanceAsyncWithHttpInfo($adGroupId, $startDate, $endDate, string $contentType = self::contentTypes['getKeywordPerformance'][0])
    {
        $returnType = '\ThisIsDevelopment\OpenApi\Bol\Advertiser\Models\KeywordPerformanceResponse';
        $request = $this->getKeywordPerformanceRequest($adGroupId, $startDate, $endDate, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getKeywordPerformance'
     *
     * @param  string $adGroupId The identifier of the ad group. (required)
     * @param  string $startDate The start date for the reporting period. Period start date in ISO 8601 standard. (required)
     * @param  string $endDate The end date for the reporting period. This will be one day after the last full day that is included in the reporting. Period end date in ISO 8601 standard. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getKeywordPerformance'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getKeywordPerformanceRequest($adGroupId, $startDate, $endDate, string $contentType = self::contentTypes['getKeywordPerformance'][0])
    {

        // verify the required parameter 'adGroupId' is set
        if ($adGroupId === null || (is_array($adGroupId) && count($adGroupId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $adGroupId when calling getKeywordPerformance'
            );
        }

        // verify the required parameter 'startDate' is set
        if ($startDate === null || (is_array($startDate) && count($startDate) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $startDate when calling getKeywordPerformance'
            );
        }

        // verify the required parameter 'endDate' is set
        if ($endDate === null || (is_array($endDate) && count($endDate) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $endDate when calling getKeywordPerformance'
            );
        }


        $resourcePath = '/advertiser/sponsored-products/keyword-performance/{ad-group-id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $startDate,
            'start-date', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            true // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $endDate,
            'end-date', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            true // required
        ) ?? []);


        // path params
        if ($adGroupId !== null) {
            $resourcePath = str_replace(
                '{' . 'ad-group-id' . '}',
                ObjectSerializer::toPathValue($adGroupId),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/vnd.advertiser.v9+json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires Bearer authentication (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getProductPerformance
     *
     * Get product performance results
     *
     * @param  string $adGroupId The identifier of the ad group. (required)
     * @param  string $startDate The start date for the reporting period. Period start date in ISO 8601 standard. (required)
     * @param  string $endDate The end date for the reporting period. This will be one day after the last full day that is included in the reporting. Period end date in ISO 8601 standard. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getProductPerformance'] to see the possible values for this operation
     *
     * @throws \ThisIsDevelopment\OpenApi\Bol\Advertiser\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \ThisIsDevelopment\OpenApi\Bol\Advertiser\Models\ProductPerformanceResponse|\ThisIsDevelopment\OpenApi\Bol\Advertiser\Models\Problem|\ThisIsDevelopment\OpenApi\Bol\Advertiser\Models\Problem
     */
    public function getProductPerformance($adGroupId, $startDate, $endDate, string $contentType = self::contentTypes['getProductPerformance'][0])
    {
        list($response) = $this->getProductPerformanceWithHttpInfo($adGroupId, $startDate, $endDate, $contentType);
        return $response;
    }

    /**
     * Operation getProductPerformanceWithHttpInfo
     *
     * Get product performance results
     *
     * @param  string $adGroupId The identifier of the ad group. (required)
     * @param  string $startDate The start date for the reporting period. Period start date in ISO 8601 standard. (required)
     * @param  string $endDate The end date for the reporting period. This will be one day after the last full day that is included in the reporting. Period end date in ISO 8601 standard. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getProductPerformance'] to see the possible values for this operation
     *
     * @throws \ThisIsDevelopment\OpenApi\Bol\Advertiser\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \ThisIsDevelopment\OpenApi\Bol\Advertiser\Models\ProductPerformanceResponse|\ThisIsDevelopment\OpenApi\Bol\Advertiser\Models\Problem|\ThisIsDevelopment\OpenApi\Bol\Advertiser\Models\Problem, HTTP status code, HTTP response headers (array of strings)
     */
    public function getProductPerformanceWithHttpInfo($adGroupId, $startDate, $endDate, string $contentType = self::contentTypes['getProductPerformance'][0])
    {
        $request = $this->getProductPerformanceRequest($adGroupId, $startDate, $endDate, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\ThisIsDevelopment\OpenApi\Bol\Advertiser\Models\ProductPerformanceResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\ThisIsDevelopment\OpenApi\Bol\Advertiser\Models\ProductPerformanceResponse' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\ThisIsDevelopment\OpenApi\Bol\Advertiser\Models\ProductPerformanceResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 400:
                    if ('\ThisIsDevelopment\OpenApi\Bol\Advertiser\Models\Problem' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\ThisIsDevelopment\OpenApi\Bol\Advertiser\Models\Problem' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\ThisIsDevelopment\OpenApi\Bol\Advertiser\Models\Problem', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 404:
                    if ('\ThisIsDevelopment\OpenApi\Bol\Advertiser\Models\Problem' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\ThisIsDevelopment\OpenApi\Bol\Advertiser\Models\Problem' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\ThisIsDevelopment\OpenApi\Bol\Advertiser\Models\Problem', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\ThisIsDevelopment\OpenApi\Bol\Advertiser\Models\ProductPerformanceResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ThisIsDevelopment\OpenApi\Bol\Advertiser\Models\ProductPerformanceResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ThisIsDevelopment\OpenApi\Bol\Advertiser\Models\Problem',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ThisIsDevelopment\OpenApi\Bol\Advertiser\Models\Problem',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getProductPerformanceAsync
     *
     * Get product performance results
     *
     * @param  string $adGroupId The identifier of the ad group. (required)
     * @param  string $startDate The start date for the reporting period. Period start date in ISO 8601 standard. (required)
     * @param  string $endDate The end date for the reporting period. This will be one day after the last full day that is included in the reporting. Period end date in ISO 8601 standard. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getProductPerformance'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getProductPerformanceAsync($adGroupId, $startDate, $endDate, string $contentType = self::contentTypes['getProductPerformance'][0])
    {
        return $this->getProductPerformanceAsyncWithHttpInfo($adGroupId, $startDate, $endDate, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getProductPerformanceAsyncWithHttpInfo
     *
     * Get product performance results
     *
     * @param  string $adGroupId The identifier of the ad group. (required)
     * @param  string $startDate The start date for the reporting period. Period start date in ISO 8601 standard. (required)
     * @param  string $endDate The end date for the reporting period. This will be one day after the last full day that is included in the reporting. Period end date in ISO 8601 standard. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getProductPerformance'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getProductPerformanceAsyncWithHttpInfo($adGroupId, $startDate, $endDate, string $contentType = self::contentTypes['getProductPerformance'][0])
    {
        $returnType = '\ThisIsDevelopment\OpenApi\Bol\Advertiser\Models\ProductPerformanceResponse';
        $request = $this->getProductPerformanceRequest($adGroupId, $startDate, $endDate, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getProductPerformance'
     *
     * @param  string $adGroupId The identifier of the ad group. (required)
     * @param  string $startDate The start date for the reporting period. Period start date in ISO 8601 standard. (required)
     * @param  string $endDate The end date for the reporting period. This will be one day after the last full day that is included in the reporting. Period end date in ISO 8601 standard. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getProductPerformance'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getProductPerformanceRequest($adGroupId, $startDate, $endDate, string $contentType = self::contentTypes['getProductPerformance'][0])
    {

        // verify the required parameter 'adGroupId' is set
        if ($adGroupId === null || (is_array($adGroupId) && count($adGroupId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $adGroupId when calling getProductPerformance'
            );
        }

        // verify the required parameter 'startDate' is set
        if ($startDate === null || (is_array($startDate) && count($startDate) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $startDate when calling getProductPerformance'
            );
        }

        // verify the required parameter 'endDate' is set
        if ($endDate === null || (is_array($endDate) && count($endDate) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $endDate when calling getProductPerformance'
            );
        }


        $resourcePath = '/advertiser/sponsored-products/product-performance/{ad-group-id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $startDate,
            'start-date', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            true // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $endDate,
            'end-date', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            true // required
        ) ?? []);


        // path params
        if ($adGroupId !== null) {
            $resourcePath = str_replace(
                '{' . 'ad-group-id' . '}',
                ObjectSerializer::toPathValue($adGroupId),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/vnd.advertiser.v9+json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires Bearer authentication (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getSearchTermPerformance
     *
     * Get search term performance results
     *
     * @param  string $adGroupId The identifier of the ad group. (required)
     * @param  string $startDate The start date for the reporting period. Period start date in ISO 8601 standard. (required)
     * @param  string $endDate The end date for the reporting period. This will be one day after the last full day that is included in the reporting. Period end date in ISO 8601 standard. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getSearchTermPerformance'] to see the possible values for this operation
     *
     * @throws \ThisIsDevelopment\OpenApi\Bol\Advertiser\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \ThisIsDevelopment\OpenApi\Bol\Advertiser\Models\SearchTermPerformanceResponse|\ThisIsDevelopment\OpenApi\Bol\Advertiser\Models\Problem|\ThisIsDevelopment\OpenApi\Bol\Advertiser\Models\Problem
     */
    public function getSearchTermPerformance($adGroupId, $startDate, $endDate, string $contentType = self::contentTypes['getSearchTermPerformance'][0])
    {
        list($response) = $this->getSearchTermPerformanceWithHttpInfo($adGroupId, $startDate, $endDate, $contentType);
        return $response;
    }

    /**
     * Operation getSearchTermPerformanceWithHttpInfo
     *
     * Get search term performance results
     *
     * @param  string $adGroupId The identifier of the ad group. (required)
     * @param  string $startDate The start date for the reporting period. Period start date in ISO 8601 standard. (required)
     * @param  string $endDate The end date for the reporting period. This will be one day after the last full day that is included in the reporting. Period end date in ISO 8601 standard. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getSearchTermPerformance'] to see the possible values for this operation
     *
     * @throws \ThisIsDevelopment\OpenApi\Bol\Advertiser\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \ThisIsDevelopment\OpenApi\Bol\Advertiser\Models\SearchTermPerformanceResponse|\ThisIsDevelopment\OpenApi\Bol\Advertiser\Models\Problem|\ThisIsDevelopment\OpenApi\Bol\Advertiser\Models\Problem, HTTP status code, HTTP response headers (array of strings)
     */
    public function getSearchTermPerformanceWithHttpInfo($adGroupId, $startDate, $endDate, string $contentType = self::contentTypes['getSearchTermPerformance'][0])
    {
        $request = $this->getSearchTermPerformanceRequest($adGroupId, $startDate, $endDate, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\ThisIsDevelopment\OpenApi\Bol\Advertiser\Models\SearchTermPerformanceResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\ThisIsDevelopment\OpenApi\Bol\Advertiser\Models\SearchTermPerformanceResponse' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\ThisIsDevelopment\OpenApi\Bol\Advertiser\Models\SearchTermPerformanceResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 400:
                    if ('\ThisIsDevelopment\OpenApi\Bol\Advertiser\Models\Problem' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\ThisIsDevelopment\OpenApi\Bol\Advertiser\Models\Problem' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\ThisIsDevelopment\OpenApi\Bol\Advertiser\Models\Problem', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 404:
                    if ('\ThisIsDevelopment\OpenApi\Bol\Advertiser\Models\Problem' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\ThisIsDevelopment\OpenApi\Bol\Advertiser\Models\Problem' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\ThisIsDevelopment\OpenApi\Bol\Advertiser\Models\Problem', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\ThisIsDevelopment\OpenApi\Bol\Advertiser\Models\SearchTermPerformanceResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ThisIsDevelopment\OpenApi\Bol\Advertiser\Models\SearchTermPerformanceResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ThisIsDevelopment\OpenApi\Bol\Advertiser\Models\Problem',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ThisIsDevelopment\OpenApi\Bol\Advertiser\Models\Problem',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getSearchTermPerformanceAsync
     *
     * Get search term performance results
     *
     * @param  string $adGroupId The identifier of the ad group. (required)
     * @param  string $startDate The start date for the reporting period. Period start date in ISO 8601 standard. (required)
     * @param  string $endDate The end date for the reporting period. This will be one day after the last full day that is included in the reporting. Period end date in ISO 8601 standard. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getSearchTermPerformance'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getSearchTermPerformanceAsync($adGroupId, $startDate, $endDate, string $contentType = self::contentTypes['getSearchTermPerformance'][0])
    {
        return $this->getSearchTermPerformanceAsyncWithHttpInfo($adGroupId, $startDate, $endDate, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getSearchTermPerformanceAsyncWithHttpInfo
     *
     * Get search term performance results
     *
     * @param  string $adGroupId The identifier of the ad group. (required)
     * @param  string $startDate The start date for the reporting period. Period start date in ISO 8601 standard. (required)
     * @param  string $endDate The end date for the reporting period. This will be one day after the last full day that is included in the reporting. Period end date in ISO 8601 standard. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getSearchTermPerformance'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getSearchTermPerformanceAsyncWithHttpInfo($adGroupId, $startDate, $endDate, string $contentType = self::contentTypes['getSearchTermPerformance'][0])
    {
        $returnType = '\ThisIsDevelopment\OpenApi\Bol\Advertiser\Models\SearchTermPerformanceResponse';
        $request = $this->getSearchTermPerformanceRequest($adGroupId, $startDate, $endDate, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getSearchTermPerformance'
     *
     * @param  string $adGroupId The identifier of the ad group. (required)
     * @param  string $startDate The start date for the reporting period. Period start date in ISO 8601 standard. (required)
     * @param  string $endDate The end date for the reporting period. This will be one day after the last full day that is included in the reporting. Period end date in ISO 8601 standard. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getSearchTermPerformance'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getSearchTermPerformanceRequest($adGroupId, $startDate, $endDate, string $contentType = self::contentTypes['getSearchTermPerformance'][0])
    {

        // verify the required parameter 'adGroupId' is set
        if ($adGroupId === null || (is_array($adGroupId) && count($adGroupId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $adGroupId when calling getSearchTermPerformance'
            );
        }

        // verify the required parameter 'startDate' is set
        if ($startDate === null || (is_array($startDate) && count($startDate) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $startDate when calling getSearchTermPerformance'
            );
        }

        // verify the required parameter 'endDate' is set
        if ($endDate === null || (is_array($endDate) && count($endDate) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $endDate when calling getSearchTermPerformance'
            );
        }


        $resourcePath = '/advertiser/sponsored-products/search-term-performance/{ad-group-id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $startDate,
            'start-date', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            true // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $endDate,
            'end-date', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            true // required
        ) ?? []);


        // path params
        if ($adGroupId !== null) {
            $resourcePath = str_replace(
                '{' . 'ad-group-id' . '}',
                ObjectSerializer::toPathValue($adGroupId),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/vnd.advertiser.v9+json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires Bearer authentication (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }
}
