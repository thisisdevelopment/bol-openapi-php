<?php
/**
 * RetailerOffer
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  ThisIsDevelopment\OpenApi\Bol\Retailer
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * v10 - Retailer API
 *
 * The bol.com API for retailers.  # Authentication Our API requires authentication via OAuth2. The detailed steps to authenticate are explained [here](https://api.bol.com/retailer/public/Retailer-API/authentication.html)   # Demo scenarios Our API specification includes examples of the responses you can expect. For more information as well as more examples, we refer you to the following resources:   - [Demo environment](https://api.bol.com/retailer/public/Retailer-API/demo/demo.html) - [Demo scenarios](https://api.bol.com/retailer/public/Retailer-API/demo/v10-index.html)
 *
 * The version of the OpenAPI document: 10.x
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 7.3.0-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace ThisIsDevelopment\OpenApi\Bol\Retailer\Models;

use \ArrayAccess;
use \ThisIsDevelopment\OpenApi\Bol\Retailer\ObjectSerializer;

/**
 * RetailerOffer Class Doc Comment
 *
 * @category Class
 * @package  ThisIsDevelopment\OpenApi\Bol\Retailer
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class RetailerOffer implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'RetailerOffer';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'offerId' => 'string',
        'ean' => 'string',
        'reference' => 'string',
        'onHoldByRetailer' => 'bool',
        'unknownProductTitle' => 'string',
        'pricing' => '\ThisIsDevelopment\OpenApi\Bol\Retailer\Models\Pricing',
        'stock' => '\ThisIsDevelopment\OpenApi\Bol\Retailer\Models\Stock',
        'fulfilment' => '\ThisIsDevelopment\OpenApi\Bol\Retailer\Models\Fulfilment',
        'store' => '\ThisIsDevelopment\OpenApi\Bol\Retailer\Models\Store',
        'condition' => '\ThisIsDevelopment\OpenApi\Bol\Retailer\Models\Condition',
        'notPublishableReasons' => '\ThisIsDevelopment\OpenApi\Bol\Retailer\Models\NotPublishableReason[]'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'offerId' => null,
        'ean' => null,
        'reference' => null,
        'onHoldByRetailer' => null,
        'unknownProductTitle' => null,
        'pricing' => null,
        'stock' => null,
        'fulfilment' => null,
        'store' => null,
        'condition' => null,
        'notPublishableReasons' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'offerId' => false,
        'ean' => false,
        'reference' => false,
        'onHoldByRetailer' => false,
        'unknownProductTitle' => false,
        'pricing' => false,
        'stock' => false,
        'fulfilment' => false,
        'store' => false,
        'condition' => false,
        'notPublishableReasons' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'offerId' => 'offerId',
        'ean' => 'ean',
        'reference' => 'reference',
        'onHoldByRetailer' => 'onHoldByRetailer',
        'unknownProductTitle' => 'unknownProductTitle',
        'pricing' => 'pricing',
        'stock' => 'stock',
        'fulfilment' => 'fulfilment',
        'store' => 'store',
        'condition' => 'condition',
        'notPublishableReasons' => 'notPublishableReasons'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'offerId' => 'setOfferId',
        'ean' => 'setEan',
        'reference' => 'setReference',
        'onHoldByRetailer' => 'setOnHoldByRetailer',
        'unknownProductTitle' => 'setUnknownProductTitle',
        'pricing' => 'setPricing',
        'stock' => 'setStock',
        'fulfilment' => 'setFulfilment',
        'store' => 'setStore',
        'condition' => 'setCondition',
        'notPublishableReasons' => 'setNotPublishableReasons'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'offerId' => 'getOfferId',
        'ean' => 'getEan',
        'reference' => 'getReference',
        'onHoldByRetailer' => 'getOnHoldByRetailer',
        'unknownProductTitle' => 'getUnknownProductTitle',
        'pricing' => 'getPricing',
        'stock' => 'getStock',
        'fulfilment' => 'getFulfilment',
        'store' => 'getStore',
        'condition' => 'getCondition',
        'notPublishableReasons' => 'getNotPublishableReasons'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('offerId', $data ?? [], null);
        $this->setIfExists('ean', $data ?? [], null);
        $this->setIfExists('reference', $data ?? [], null);
        $this->setIfExists('onHoldByRetailer', $data ?? [], null);
        $this->setIfExists('unknownProductTitle', $data ?? [], null);
        $this->setIfExists('pricing', $data ?? [], null);
        $this->setIfExists('stock', $data ?? [], null);
        $this->setIfExists('fulfilment', $data ?? [], null);
        $this->setIfExists('store', $data ?? [], null);
        $this->setIfExists('condition', $data ?? [], null);
        $this->setIfExists('notPublishableReasons', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['offerId'] === null) {
            $invalidProperties[] = "'offerId' can't be null";
        }
        if ($this->container['ean'] === null) {
            $invalidProperties[] = "'ean' can't be null";
        }
        if ($this->container['onHoldByRetailer'] === null) {
            $invalidProperties[] = "'onHoldByRetailer' can't be null";
        }
        if ($this->container['pricing'] === null) {
            $invalidProperties[] = "'pricing' can't be null";
        }
        if ($this->container['stock'] === null) {
            $invalidProperties[] = "'stock' can't be null";
        }
        if ($this->container['fulfilment'] === null) {
            $invalidProperties[] = "'fulfilment' can't be null";
        }
        if ($this->container['store'] === null) {
            $invalidProperties[] = "'store' can't be null";
        }
        if ($this->container['condition'] === null) {
            $invalidProperties[] = "'condition' can't be null";
        }
        if ($this->container['notPublishableReasons'] === null) {
            $invalidProperties[] = "'notPublishableReasons' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets offerId
     *
     * @return string
     */
    public function getOfferId()
    {
        return $this->container['offerId'];
    }

    /**
     * Sets offerId
     *
     * @param string $offerId Unique identifier for an offer.
     *
     * @return self
     */
    public function setOfferId($offerId)
    {
        if (is_null($offerId)) {
            throw new \InvalidArgumentException('non-nullable offerId cannot be null');
        }
        $this->container['offerId'] = $offerId;

        return $this;
    }

    /**
     * Gets ean
     *
     * @return string
     */
    public function getEan()
    {
        return $this->container['ean'];
    }

    /**
     * Sets ean
     *
     * @param string $ean The EAN number associated with this product. Note: in case an ISBN is provided, the ISBN will be replaced with the actual EAN belonging to this ISBN.
     *
     * @return self
     */
    public function setEan($ean)
    {
        if (is_null($ean)) {
            throw new \InvalidArgumentException('non-nullable ean cannot be null');
        }
        $this->container['ean'] = $ean;

        return $this;
    }

    /**
     * Gets reference
     *
     * @return string|null
     */
    public function getReference()
    {
        return $this->container['reference'];
    }

    /**
     * Sets reference
     *
     * @param string|null $reference A user-defined reference that helps you identify this particular offer when receiving data from us. This element can optionally be left empty and has a maximum amount of 20 characters.
     *
     * @return self
     */
    public function setReference($reference)
    {
        if (is_null($reference)) {
            throw new \InvalidArgumentException('non-nullable reference cannot be null');
        }
        $this->container['reference'] = $reference;

        return $this;
    }

    /**
     * Gets onHoldByRetailer
     *
     * @return bool
     */
    public function getOnHoldByRetailer()
    {
        return $this->container['onHoldByRetailer'];
    }

    /**
     * Sets onHoldByRetailer
     *
     * @param bool $onHoldByRetailer This field specifies whether the retailer has temporarily suspended the listing of this offer on the bol.com website. When set to true, the offer becomes invisible to customers and is not available for purchase. The default setting, false, indicates that the offer is active and visible on the website. This feature is useful for managing inventory or making updates to the offer without permanently removing it from the site.
     *
     * @return self
     */
    public function setOnHoldByRetailer($onHoldByRetailer)
    {
        if (is_null($onHoldByRetailer)) {
            throw new \InvalidArgumentException('non-nullable onHoldByRetailer cannot be null');
        }
        $this->container['onHoldByRetailer'] = $onHoldByRetailer;

        return $this;
    }

    /**
     * Gets unknownProductTitle
     *
     * @return string|null
     */
    public function getUnknownProductTitle()
    {
        return $this->container['unknownProductTitle'];
    }

    /**
     * Sets unknownProductTitle
     *
     * @param string|null $unknownProductTitle In case the item is not known to bol.com you can use this field to identify this particular product. Note: in case the product is known to bol.com, the unknown product title will not be stored.
     *
     * @return self
     */
    public function setUnknownProductTitle($unknownProductTitle)
    {
        if (is_null($unknownProductTitle)) {
            throw new \InvalidArgumentException('non-nullable unknownProductTitle cannot be null');
        }
        $this->container['unknownProductTitle'] = $unknownProductTitle;

        return $this;
    }

    /**
     * Gets pricing
     *
     * @return \ThisIsDevelopment\OpenApi\Bol\Retailer\Models\Pricing
     */
    public function getPricing()
    {
        return $this->container['pricing'];
    }

    /**
     * Sets pricing
     *
     * @param \ThisIsDevelopment\OpenApi\Bol\Retailer\Models\Pricing $pricing pricing
     *
     * @return self
     */
    public function setPricing($pricing)
    {
        if (is_null($pricing)) {
            throw new \InvalidArgumentException('non-nullable pricing cannot be null');
        }
        $this->container['pricing'] = $pricing;

        return $this;
    }

    /**
     * Gets stock
     *
     * @return \ThisIsDevelopment\OpenApi\Bol\Retailer\Models\Stock
     */
    public function getStock()
    {
        return $this->container['stock'];
    }

    /**
     * Sets stock
     *
     * @param \ThisIsDevelopment\OpenApi\Bol\Retailer\Models\Stock $stock stock
     *
     * @return self
     */
    public function setStock($stock)
    {
        if (is_null($stock)) {
            throw new \InvalidArgumentException('non-nullable stock cannot be null');
        }
        $this->container['stock'] = $stock;

        return $this;
    }

    /**
     * Gets fulfilment
     *
     * @return \ThisIsDevelopment\OpenApi\Bol\Retailer\Models\Fulfilment
     */
    public function getFulfilment()
    {
        return $this->container['fulfilment'];
    }

    /**
     * Sets fulfilment
     *
     * @param \ThisIsDevelopment\OpenApi\Bol\Retailer\Models\Fulfilment $fulfilment fulfilment
     *
     * @return self
     */
    public function setFulfilment($fulfilment)
    {
        if (is_null($fulfilment)) {
            throw new \InvalidArgumentException('non-nullable fulfilment cannot be null');
        }
        $this->container['fulfilment'] = $fulfilment;

        return $this;
    }

    /**
     * Gets store
     *
     * @return \ThisIsDevelopment\OpenApi\Bol\Retailer\Models\Store
     */
    public function getStore()
    {
        return $this->container['store'];
    }

    /**
     * Sets store
     *
     * @param \ThisIsDevelopment\OpenApi\Bol\Retailer\Models\Store $store store
     *
     * @return self
     */
    public function setStore($store)
    {
        if (is_null($store)) {
            throw new \InvalidArgumentException('non-nullable store cannot be null');
        }
        $this->container['store'] = $store;

        return $this;
    }

    /**
     * Gets condition
     *
     * @return \ThisIsDevelopment\OpenApi\Bol\Retailer\Models\Condition
     */
    public function getCondition()
    {
        return $this->container['condition'];
    }

    /**
     * Sets condition
     *
     * @param \ThisIsDevelopment\OpenApi\Bol\Retailer\Models\Condition $condition condition
     *
     * @return self
     */
    public function setCondition($condition)
    {
        if (is_null($condition)) {
            throw new \InvalidArgumentException('non-nullable condition cannot be null');
        }
        $this->container['condition'] = $condition;

        return $this;
    }

    /**
     * Gets notPublishableReasons
     *
     * @return \ThisIsDevelopment\OpenApi\Bol\Retailer\Models\NotPublishableReason[]
     */
    public function getNotPublishableReasons()
    {
        return $this->container['notPublishableReasons'];
    }

    /**
     * Sets notPublishableReasons
     *
     * @param \ThisIsDevelopment\OpenApi\Bol\Retailer\Models\NotPublishableReason[] $notPublishableReasons notPublishableReasons
     *
     * @return self
     */
    public function setNotPublishableReasons($notPublishableReasons)
    {
        if (is_null($notPublishableReasons)) {
            throw new \InvalidArgumentException('non-nullable notPublishableReasons cannot be null');
        }
        $this->container['notPublishableReasons'] = $notPublishableReasons;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


