<?php
/**
 * ReducedPromotion
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  ThisIsDevelopment\OpenApi\Bol\Retailer
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * v8 - Retailer API
 *
 * The bol.com API for retailers.  # Authentication Our API requires authentication via OAuth2. The detailed steps to authenticate are explained [here](https://api.bol.com/retailer/public/Retailer-API/authentication.html)   # Demo scenarios Our API specification includes examples of the responses you can expect. For more information as well as more examples, we refer you to the following resources:   - [Demo environment](https://api.bol.com/retailer/public/Retailer-API/demo/demo.html) - [Demo scenarios](https://api.bol.com/retailer/public/Retailer-API/demo/v8-index.html)
 *
 * The version of the OpenAPI document: 8.x
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 7.3.0-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace ThisIsDevelopment\OpenApi\Bol\Retailer\Models;

use \ArrayAccess;
use \ThisIsDevelopment\OpenApi\Bol\Retailer\ObjectSerializer;

/**
 * ReducedPromotion Class Doc Comment
 *
 * @category Class
 * @description A single promotion.
 * @package  ThisIsDevelopment\OpenApi\Bol\Retailer
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class ReducedPromotion implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'ReducedPromotion';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'promotionId' => 'string',
        'title' => 'string',
        'startDateTime' => '\DateTime',
        'endDateTime' => '\DateTime',
        'countries' => '\ThisIsDevelopment\OpenApi\Bol\Retailer\Models\PromotionCountryCode[]',
        'promotionType' => 'string',
        'retailerSpecificPromotion' => 'bool',
        'campaign' => '\ThisIsDevelopment\OpenApi\Bol\Retailer\Models\Campaign'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'promotionId' => null,
        'title' => null,
        'startDateTime' => 'date-time',
        'endDateTime' => 'date-time',
        'countries' => null,
        'promotionType' => null,
        'retailerSpecificPromotion' => null,
        'campaign' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'promotionId' => false,
        'title' => false,
        'startDateTime' => false,
        'endDateTime' => false,
        'countries' => false,
        'promotionType' => false,
        'retailerSpecificPromotion' => false,
        'campaign' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'promotionId' => 'promotionId',
        'title' => 'title',
        'startDateTime' => 'startDateTime',
        'endDateTime' => 'endDateTime',
        'countries' => 'countries',
        'promotionType' => 'promotionType',
        'retailerSpecificPromotion' => 'retailerSpecificPromotion',
        'campaign' => 'campaign'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'promotionId' => 'setPromotionId',
        'title' => 'setTitle',
        'startDateTime' => 'setStartDateTime',
        'endDateTime' => 'setEndDateTime',
        'countries' => 'setCountries',
        'promotionType' => 'setPromotionType',
        'retailerSpecificPromotion' => 'setRetailerSpecificPromotion',
        'campaign' => 'setCampaign'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'promotionId' => 'getPromotionId',
        'title' => 'getTitle',
        'startDateTime' => 'getStartDateTime',
        'endDateTime' => 'getEndDateTime',
        'countries' => 'getCountries',
        'promotionType' => 'getPromotionType',
        'retailerSpecificPromotion' => 'getRetailerSpecificPromotion',
        'campaign' => 'getCampaign'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    public const PROMOTION_TYPE_AWARENESS = 'AWARENESS';
    public const PROMOTION_TYPE_PRICE_OFF = 'PRICE_OFF';

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getPromotionTypeAllowableValues()
    {
        return [
            self::PROMOTION_TYPE_AWARENESS,
            self::PROMOTION_TYPE_PRICE_OFF,
        ];
    }

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('promotionId', $data ?? [], null);
        $this->setIfExists('title', $data ?? [], null);
        $this->setIfExists('startDateTime', $data ?? [], null);
        $this->setIfExists('endDateTime', $data ?? [], null);
        $this->setIfExists('countries', $data ?? [], null);
        $this->setIfExists('promotionType', $data ?? [], null);
        $this->setIfExists('retailerSpecificPromotion', $data ?? [], null);
        $this->setIfExists('campaign', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['promotionId'] === null) {
            $invalidProperties[] = "'promotionId' can't be null";
        }
        if ($this->container['title'] === null) {
            $invalidProperties[] = "'title' can't be null";
        }
        if ($this->container['startDateTime'] === null) {
            $invalidProperties[] = "'startDateTime' can't be null";
        }
        if ($this->container['endDateTime'] === null) {
            $invalidProperties[] = "'endDateTime' can't be null";
        }
        if ($this->container['countries'] === null) {
            $invalidProperties[] = "'countries' can't be null";
        }
        if ($this->container['promotionType'] === null) {
            $invalidProperties[] = "'promotionType' can't be null";
        }
        $allowedValues = $this->getPromotionTypeAllowableValues();
        if (!is_null($this->container['promotionType']) && !in_array($this->container['promotionType'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'promotionType', must be one of '%s'",
                $this->container['promotionType'],
                implode("', '", $allowedValues)
            );
        }

        if ($this->container['retailerSpecificPromotion'] === null) {
            $invalidProperties[] = "'retailerSpecificPromotion' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets promotionId
     *
     * @return string
     */
    public function getPromotionId()
    {
        return $this->container['promotionId'];
    }

    /**
     * Sets promotionId
     *
     * @param string $promotionId The identifier of the promotion.
     *
     * @return self
     */
    public function setPromotionId($promotionId)
    {
        if (is_null($promotionId)) {
            throw new \InvalidArgumentException('non-nullable promotionId cannot be null');
        }
        $this->container['promotionId'] = $promotionId;

        return $this;
    }

    /**
     * Gets title
     *
     * @return string
     */
    public function getTitle()
    {
        return $this->container['title'];
    }

    /**
     * Sets title
     *
     * @param string $title The title of the promotion.
     *
     * @return self
     */
    public function setTitle($title)
    {
        if (is_null($title)) {
            throw new \InvalidArgumentException('non-nullable title cannot be null');
        }
        $this->container['title'] = $title;

        return $this;
    }

    /**
     * Gets startDateTime
     *
     * @return \DateTime
     */
    public function getStartDateTime()
    {
        return $this->container['startDateTime'];
    }

    /**
     * Sets startDateTime
     *
     * @param \DateTime $startDateTime The starting date and time of the promotion.
     *
     * @return self
     */
    public function setStartDateTime($startDateTime)
    {
        if (is_null($startDateTime)) {
            throw new \InvalidArgumentException('non-nullable startDateTime cannot be null');
        }
        $this->container['startDateTime'] = $startDateTime;

        return $this;
    }

    /**
     * Gets endDateTime
     *
     * @return \DateTime
     */
    public function getEndDateTime()
    {
        return $this->container['endDateTime'];
    }

    /**
     * Sets endDateTime
     *
     * @param \DateTime $endDateTime The ending date and time of the promotion.
     *
     * @return self
     */
    public function setEndDateTime($endDateTime)
    {
        if (is_null($endDateTime)) {
            throw new \InvalidArgumentException('non-nullable endDateTime cannot be null');
        }
        $this->container['endDateTime'] = $endDateTime;

        return $this;
    }

    /**
     * Gets countries
     *
     * @return \ThisIsDevelopment\OpenApi\Bol\Retailer\Models\PromotionCountryCode[]
     */
    public function getCountries()
    {
        return $this->container['countries'];
    }

    /**
     * Sets countries
     *
     * @param \ThisIsDevelopment\OpenApi\Bol\Retailer\Models\PromotionCountryCode[] $countries countries
     *
     * @return self
     */
    public function setCountries($countries)
    {
        if (is_null($countries)) {
            throw new \InvalidArgumentException('non-nullable countries cannot be null');
        }
        $this->container['countries'] = $countries;

        return $this;
    }

    /**
     * Gets promotionType
     *
     * @return string
     */
    public function getPromotionType()
    {
        return $this->container['promotionType'];
    }

    /**
     * Sets promotionType
     *
     * @param string $promotionType The type of the promotion.
     *
     * @return self
     */
    public function setPromotionType($promotionType)
    {
        if (is_null($promotionType)) {
            throw new \InvalidArgumentException('non-nullable promotionType cannot be null');
        }
        $allowedValues = $this->getPromotionTypeAllowableValues();
        if (!in_array($promotionType, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'promotionType', must be one of '%s'",
                    $promotionType,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['promotionType'] = $promotionType;

        return $this;
    }

    /**
     * Gets retailerSpecificPromotion
     *
     * @return bool
     */
    public function getRetailerSpecificPromotion()
    {
        return $this->container['retailerSpecificPromotion'];
    }

    /**
     * Sets retailerSpecificPromotion
     *
     * @param bool $retailerSpecificPromotion Indicates whether the promotion is retailer specific or open to the platform.
     *
     * @return self
     */
    public function setRetailerSpecificPromotion($retailerSpecificPromotion)
    {
        if (is_null($retailerSpecificPromotion)) {
            throw new \InvalidArgumentException('non-nullable retailerSpecificPromotion cannot be null');
        }
        $this->container['retailerSpecificPromotion'] = $retailerSpecificPromotion;

        return $this;
    }

    /**
     * Gets campaign
     *
     * @return \ThisIsDevelopment\OpenApi\Bol\Retailer\Models\Campaign|null
     */
    public function getCampaign()
    {
        return $this->container['campaign'];
    }

    /**
     * Sets campaign
     *
     * @param \ThisIsDevelopment\OpenApi\Bol\Retailer\Models\Campaign|null $campaign campaign
     *
     * @return self
     */
    public function setCampaign($campaign)
    {
        if (is_null($campaign)) {
            throw new \InvalidArgumentException('non-nullable campaign cannot be null');
        }
        $this->container['campaign'] = $campaign;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


