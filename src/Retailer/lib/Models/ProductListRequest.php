<?php
/**
 * ProductListRequest
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  ThisIsDevelopment\OpenApi\Bol\Retailer
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * v10 - Retailer API
 *
 * The bol.com API for retailers.  # Authentication Our API requires authentication via OAuth2. The detailed steps to authenticate are explained [here](https://api.bol.com/retailer/public/Retailer-API/authentication.html)   # Demo scenarios Our API specification includes examples of the responses you can expect. For more information as well as more examples, we refer you to the following resources:   - [Demo environment](https://api.bol.com/retailer/public/Retailer-API/demo/demo.html) - [Demo scenarios](https://api.bol.com/retailer/public/Retailer-API/demo/v10-index.html)
 *
 * The version of the OpenAPI document: 10.x
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 7.3.0-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace ThisIsDevelopment\OpenApi\Bol\Retailer\Models;

use \ArrayAccess;
use \ThisIsDevelopment\OpenApi\Bol\Retailer\ObjectSerializer;

/**
 * ProductListRequest Class Doc Comment
 *
 * @category Class
 * @package  ThisIsDevelopment\OpenApi\Bol\Retailer
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class ProductListRequest implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'ProductListRequest';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'countryCode' => 'string',
        'searchTerm' => 'string',
        'categoryId' => 'string',
        'filterRanges' => '\ThisIsDevelopment\OpenApi\Bol\Retailer\Models\ProductListFilterRange[]',
        'filterValues' => '\ThisIsDevelopment\OpenApi\Bol\Retailer\Models\ProductListFilterValue[]',
        'sort' => 'string',
        'page' => 'int'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'countryCode' => null,
        'searchTerm' => null,
        'categoryId' => null,
        'filterRanges' => null,
        'filterValues' => null,
        'sort' => null,
        'page' => 'int32'
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'countryCode' => false,
        'searchTerm' => false,
        'categoryId' => false,
        'filterRanges' => false,
        'filterValues' => false,
        'sort' => false,
        'page' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'countryCode' => 'countryCode',
        'searchTerm' => 'searchTerm',
        'categoryId' => 'categoryId',
        'filterRanges' => 'filterRanges',
        'filterValues' => 'filterValues',
        'sort' => 'sort',
        'page' => 'page'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'countryCode' => 'setCountryCode',
        'searchTerm' => 'setSearchTerm',
        'categoryId' => 'setCategoryId',
        'filterRanges' => 'setFilterRanges',
        'filterValues' => 'setFilterValues',
        'sort' => 'setSort',
        'page' => 'setPage'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'countryCode' => 'getCountryCode',
        'searchTerm' => 'getSearchTerm',
        'categoryId' => 'getCategoryId',
        'filterRanges' => 'getFilterRanges',
        'filterValues' => 'getFilterValues',
        'sort' => 'getSort',
        'page' => 'getPage'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    public const COUNTRY_CODE_NL = 'NL';
    public const COUNTRY_CODE_BE = 'BE';
    public const SORT_RELEVANCE = 'RELEVANCE';
    public const SORT_POPULARITY = 'POPULARITY';
    public const SORT_PRICE_ASC = 'PRICE_ASC';
    public const SORT_PRICE_DESC = 'PRICE_DESC';
    public const SORT_RELEASE_DATE = 'RELEASE_DATE';
    public const SORT_RATING = 'RATING';
    public const SORT_WISHLIST = 'WISHLIST';

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getCountryCodeAllowableValues()
    {
        return [
            self::COUNTRY_CODE_NL,
            self::COUNTRY_CODE_BE,
        ];
    }

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getSortAllowableValues()
    {
        return [
            self::SORT_RELEVANCE,
            self::SORT_POPULARITY,
            self::SORT_PRICE_ASC,
            self::SORT_PRICE_DESC,
            self::SORT_RELEASE_DATE,
            self::SORT_RATING,
            self::SORT_WISHLIST,
        ];
    }

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('countryCode', $data ?? [], 'NL');
        $this->setIfExists('searchTerm', $data ?? [], null);
        $this->setIfExists('categoryId', $data ?? [], null);
        $this->setIfExists('filterRanges', $data ?? [], null);
        $this->setIfExists('filterValues', $data ?? [], null);
        $this->setIfExists('sort', $data ?? [], null);
        $this->setIfExists('page', $data ?? [], 1);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        $allowedValues = $this->getCountryCodeAllowableValues();
        if (!is_null($this->container['countryCode']) && !in_array($this->container['countryCode'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'countryCode', must be one of '%s'",
                $this->container['countryCode'],
                implode("', '", $allowedValues)
            );
        }

        if (!is_null($this->container['searchTerm']) && (mb_strlen($this->container['searchTerm']) > 50)) {
            $invalidProperties[] = "invalid value for 'searchTerm', the character length must be smaller than or equal to 50.";
        }

        if (!is_null($this->container['searchTerm']) && (mb_strlen($this->container['searchTerm']) < 1)) {
            $invalidProperties[] = "invalid value for 'searchTerm', the character length must be bigger than or equal to 1.";
        }

        if (!is_null($this->container['categoryId']) && (mb_strlen($this->container['categoryId']) > 11)) {
            $invalidProperties[] = "invalid value for 'categoryId', the character length must be smaller than or equal to 11.";
        }

        if (!is_null($this->container['categoryId']) && (mb_strlen($this->container['categoryId']) < 1)) {
            $invalidProperties[] = "invalid value for 'categoryId', the character length must be bigger than or equal to 1.";
        }

        if (!is_null($this->container['filterRanges']) && (count($this->container['filterRanges']) > 10)) {
            $invalidProperties[] = "invalid value for 'filterRanges', number of items must be less than or equal to 10.";
        }

        if (!is_null($this->container['filterRanges']) && (count($this->container['filterRanges']) < 0)) {
            $invalidProperties[] = "invalid value for 'filterRanges', number of items must be greater than or equal to 0.";
        }

        if (!is_null($this->container['filterValues']) && (count($this->container['filterValues']) > 10)) {
            $invalidProperties[] = "invalid value for 'filterValues', number of items must be less than or equal to 10.";
        }

        if (!is_null($this->container['filterValues']) && (count($this->container['filterValues']) < 0)) {
            $invalidProperties[] = "invalid value for 'filterValues', number of items must be greater than or equal to 0.";
        }

        $allowedValues = $this->getSortAllowableValues();
        if (!is_null($this->container['sort']) && !in_array($this->container['sort'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'sort', must be one of '%s'",
                $this->container['sort'],
                implode("', '", $allowedValues)
            );
        }

        if ($this->container['page'] === null) {
            $invalidProperties[] = "'page' can't be null";
        }
        if (($this->container['page'] > 200)) {
            $invalidProperties[] = "invalid value for 'page', must be smaller than or equal to 200.";
        }

        if (($this->container['page'] < 1)) {
            $invalidProperties[] = "invalid value for 'page', must be bigger than or equal to 1.";
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets countryCode
     *
     * @return string|null
     */
    public function getCountryCode()
    {
        return $this->container['countryCode'];
    }

    /**
     * Sets countryCode
     *
     * @param string|null $countryCode The country for which the products will be retrieved.
     *
     * @return self
     */
    public function setCountryCode($countryCode)
    {
        if (is_null($countryCode)) {
            throw new \InvalidArgumentException('non-nullable countryCode cannot be null');
        }
        $allowedValues = $this->getCountryCodeAllowableValues();
        if (!in_array($countryCode, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'countryCode', must be one of '%s'",
                    $countryCode,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['countryCode'] = $countryCode;

        return $this;
    }

    /**
     * Gets searchTerm
     *
     * @return string|null
     */
    public function getSearchTerm()
    {
        return $this->container['searchTerm'];
    }

    /**
     * Sets searchTerm
     *
     * @param string|null $searchTerm The search term to get the associated products for.
     *
     * @return self
     */
    public function setSearchTerm($searchTerm)
    {
        if (is_null($searchTerm)) {
            throw new \InvalidArgumentException('non-nullable searchTerm cannot be null');
        }
        if ((mb_strlen($searchTerm) > 50)) {
            throw new \InvalidArgumentException('invalid length for $searchTerm when calling ProductListRequest., must be smaller than or equal to 50.');
        }
        if ((mb_strlen($searchTerm) < 1)) {
            throw new \InvalidArgumentException('invalid length for $searchTerm when calling ProductListRequest., must be bigger than or equal to 1.');
        }

        $this->container['searchTerm'] = $searchTerm;

        return $this;
    }

    /**
     * Gets categoryId
     *
     * @return string|null
     */
    public function getCategoryId()
    {
        return $this->container['categoryId'];
    }

    /**
     * Sets categoryId
     *
     * @param string|null $categoryId The category to get the associated products for.
     *
     * @return self
     */
    public function setCategoryId($categoryId)
    {
        if (is_null($categoryId)) {
            throw new \InvalidArgumentException('non-nullable categoryId cannot be null');
        }
        if ((mb_strlen($categoryId) > 11)) {
            throw new \InvalidArgumentException('invalid length for $categoryId when calling ProductListRequest., must be smaller than or equal to 11.');
        }
        if ((mb_strlen($categoryId) < 1)) {
            throw new \InvalidArgumentException('invalid length for $categoryId when calling ProductListRequest., must be bigger than or equal to 1.');
        }

        $this->container['categoryId'] = $categoryId;

        return $this;
    }

    /**
     * Gets filterRanges
     *
     * @return \ThisIsDevelopment\OpenApi\Bol\Retailer\Models\ProductListFilterRange[]|null
     */
    public function getFilterRanges()
    {
        return $this->container['filterRanges'];
    }

    /**
     * Sets filterRanges
     *
     * @param \ThisIsDevelopment\OpenApi\Bol\Retailer\Models\ProductListFilterRange[]|null $filterRanges The list of range filters to get associated products for.
     *
     * @return self
     */
    public function setFilterRanges($filterRanges)
    {
        if (is_null($filterRanges)) {
            throw new \InvalidArgumentException('non-nullable filterRanges cannot be null');
        }

        if ((count($filterRanges) > 10)) {
            throw new \InvalidArgumentException('invalid value for $filterRanges when calling ProductListRequest., number of items must be less than or equal to 10.');
        }
        if ((count($filterRanges) < 0)) {
            throw new \InvalidArgumentException('invalid length for $filterRanges when calling ProductListRequest., number of items must be greater than or equal to 0.');
        }
        $this->container['filterRanges'] = $filterRanges;

        return $this;
    }

    /**
     * Gets filterValues
     *
     * @return \ThisIsDevelopment\OpenApi\Bol\Retailer\Models\ProductListFilterValue[]|null
     */
    public function getFilterValues()
    {
        return $this->container['filterValues'];
    }

    /**
     * Sets filterValues
     *
     * @param \ThisIsDevelopment\OpenApi\Bol\Retailer\Models\ProductListFilterValue[]|null $filterValues The list of filter values in this filter.
     *
     * @return self
     */
    public function setFilterValues($filterValues)
    {
        if (is_null($filterValues)) {
            throw new \InvalidArgumentException('non-nullable filterValues cannot be null');
        }

        if ((count($filterValues) > 10)) {
            throw new \InvalidArgumentException('invalid value for $filterValues when calling ProductListRequest., number of items must be less than or equal to 10.');
        }
        if ((count($filterValues) < 0)) {
            throw new \InvalidArgumentException('invalid length for $filterValues when calling ProductListRequest., number of items must be greater than or equal to 0.');
        }
        $this->container['filterValues'] = $filterValues;

        return $this;
    }

    /**
     * Gets sort
     *
     * @return string|null
     */
    public function getSort()
    {
        return $this->container['sort'];
    }

    /**
     * Sets sort
     *
     * @param string|null $sort Determines the order of the products.
     *
     * @return self
     */
    public function setSort($sort)
    {
        if (is_null($sort)) {
            throw new \InvalidArgumentException('non-nullable sort cannot be null');
        }
        $allowedValues = $this->getSortAllowableValues();
        if (!in_array($sort, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'sort', must be one of '%s'",
                    $sort,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['sort'] = $sort;

        return $this;
    }

    /**
     * Gets page
     *
     * @return int
     */
    public function getPage()
    {
        return $this->container['page'];
    }

    /**
     * Sets page
     *
     * @param int $page The requested page number with a page size of 50 items.
     *
     * @return self
     */
    public function setPage($page)
    {
        if (is_null($page)) {
            throw new \InvalidArgumentException('non-nullable page cannot be null');
        }

        if (($page > 200)) {
            throw new \InvalidArgumentException('invalid value for $page when calling ProductListRequest., must be smaller than or equal to 200.');
        }
        if (($page < 1)) {
            throw new \InvalidArgumentException('invalid value for $page when calling ProductListRequest., must be bigger than or equal to 1.');
        }

        $this->container['page'] = $page;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


