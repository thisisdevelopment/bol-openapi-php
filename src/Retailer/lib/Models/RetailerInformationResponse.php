<?php
/**
 * RetailerInformationResponse
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  ThisIsDevelopment\OpenApi\Bol\Retailer
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * v9 - Retailer API
 *
 * The bol.com API for retailers.  # Authentication Our API requires authentication via OAuth2. The detailed steps to authenticate are explained [here](https://api.bol.com/retailer/public/Retailer-API/authentication.html)   # Demo scenarios Our API specification includes examples of the responses you can expect. For more information as well as more examples, we refer you to the following resources:   - [Demo environment](https://api.bol.com/retailer/public/Retailer-API/demo/demo.html) - [Demo scenarios](https://api.bol.com/retailer/public/Retailer-API/demo/v9-index.html)
 *
 * The version of the OpenAPI document: 9.x
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 7.3.0-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace ThisIsDevelopment\OpenApi\Bol\Retailer\Models;

use \ArrayAccess;
use \ThisIsDevelopment\OpenApi\Bol\Retailer\ObjectSerializer;

/**
 * RetailerInformationResponse Class Doc Comment
 *
 * @category Class
 * @package  ThisIsDevelopment\OpenApi\Bol\Retailer
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class RetailerInformationResponse implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'RetailerInformationResponse';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'retailerId' => 'string',
        'displayName' => 'string',
        'registrationDate' => 'string',
        'topRetailer' => 'bool',
        'ratingMethod' => 'string',
        'retailerRating' => '\ThisIsDevelopment\OpenApi\Bol\Retailer\Models\RetailerRating',
        'retailerReview' => '\ThisIsDevelopment\OpenApi\Bol\Retailer\Models\RetailerReview'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'retailerId' => null,
        'displayName' => null,
        'registrationDate' => null,
        'topRetailer' => null,
        'ratingMethod' => null,
        'retailerRating' => null,
        'retailerReview' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'retailerId' => false,
        'displayName' => false,
        'registrationDate' => false,
        'topRetailer' => false,
        'ratingMethod' => false,
        'retailerRating' => false,
        'retailerReview' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'retailerId' => 'retailerId',
        'displayName' => 'displayName',
        'registrationDate' => 'registrationDate',
        'topRetailer' => 'topRetailer',
        'ratingMethod' => 'ratingMethod',
        'retailerRating' => 'retailerRating',
        'retailerReview' => 'retailerReview'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'retailerId' => 'setRetailerId',
        'displayName' => 'setDisplayName',
        'registrationDate' => 'setRegistrationDate',
        'topRetailer' => 'setTopRetailer',
        'ratingMethod' => 'setRatingMethod',
        'retailerRating' => 'setRetailerRating',
        'retailerReview' => 'setRetailerReview'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'retailerId' => 'getRetailerId',
        'displayName' => 'getDisplayName',
        'registrationDate' => 'getRegistrationDate',
        'topRetailer' => 'getTopRetailer',
        'ratingMethod' => 'getRatingMethod',
        'retailerRating' => 'getRetailerRating',
        'retailerReview' => 'getRetailerReview'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    public const RATING_METHOD_ALL_REVIEWS = 'ALL_REVIEWS';
    public const RATING_METHOD_THREE_MONTHS = 'THREE_MONTHS';

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getRatingMethodAllowableValues()
    {
        return [
            self::RATING_METHOD_ALL_REVIEWS,
            self::RATING_METHOD_THREE_MONTHS,
        ];
    }

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('retailerId', $data ?? [], null);
        $this->setIfExists('displayName', $data ?? [], null);
        $this->setIfExists('registrationDate', $data ?? [], null);
        $this->setIfExists('topRetailer', $data ?? [], null);
        $this->setIfExists('ratingMethod', $data ?? [], null);
        $this->setIfExists('retailerRating', $data ?? [], null);
        $this->setIfExists('retailerReview', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['retailerId'] === null) {
            $invalidProperties[] = "'retailerId' can't be null";
        }
        if ($this->container['displayName'] === null) {
            $invalidProperties[] = "'displayName' can't be null";
        }
        if ($this->container['registrationDate'] === null) {
            $invalidProperties[] = "'registrationDate' can't be null";
        }
        $allowedValues = $this->getRatingMethodAllowableValues();
        if (!is_null($this->container['ratingMethod']) && !in_array($this->container['ratingMethod'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'ratingMethod', must be one of '%s'",
                $this->container['ratingMethod'],
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets retailerId
     *
     * @return string
     */
    public function getRetailerId()
    {
        return $this->container['retailerId'];
    }

    /**
     * Sets retailerId
     *
     * @param string $retailerId The Id of the retailer which information belongs to.
     *
     * @return self
     */
    public function setRetailerId($retailerId)
    {
        if (is_null($retailerId)) {
            throw new \InvalidArgumentException('non-nullable retailerId cannot be null');
        }
        $this->container['retailerId'] = $retailerId;

        return $this;
    }

    /**
     * Gets displayName
     *
     * @return string
     */
    public function getDisplayName()
    {
        return $this->container['displayName'];
    }

    /**
     * Sets displayName
     *
     * @param string $displayName The name of the retailer visible on bol.com
     *
     * @return self
     */
    public function setDisplayName($displayName)
    {
        if (is_null($displayName)) {
            throw new \InvalidArgumentException('non-nullable displayName cannot be null');
        }
        $this->container['displayName'] = $displayName;

        return $this;
    }

    /**
     * Gets registrationDate
     *
     * @return string
     */
    public function getRegistrationDate()
    {
        return $this->container['registrationDate'];
    }

    /**
     * Sets registrationDate
     *
     * @param string $registrationDate A date representing the registration date for the retailer within bol.com
     *
     * @return self
     */
    public function setRegistrationDate($registrationDate)
    {
        if (is_null($registrationDate)) {
            throw new \InvalidArgumentException('non-nullable registrationDate cannot be null');
        }
        $this->container['registrationDate'] = $registrationDate;

        return $this;
    }

    /**
     * Gets topRetailer
     *
     * @return bool|null
     */
    public function getTopRetailer()
    {
        return $this->container['topRetailer'];
    }

    /**
     * Sets topRetailer
     *
     * @param bool|null $topRetailer Indication of retailer's being the top seller.
     *
     * @return self
     */
    public function setTopRetailer($topRetailer)
    {
        if (is_null($topRetailer)) {
            throw new \InvalidArgumentException('non-nullable topRetailer cannot be null');
        }
        $this->container['topRetailer'] = $topRetailer;

        return $this;
    }

    /**
     * Gets ratingMethod
     *
     * @return string|null
     */
    public function getRatingMethod()
    {
        return $this->container['ratingMethod'];
    }

    /**
     * Sets ratingMethod
     *
     * @param string|null $ratingMethod An identifier that identifies if the rating is calculated over the past three months or on all reviews for the retailer.
     *
     * @return self
     */
    public function setRatingMethod($ratingMethod)
    {
        if (is_null($ratingMethod)) {
            throw new \InvalidArgumentException('non-nullable ratingMethod cannot be null');
        }
        $allowedValues = $this->getRatingMethodAllowableValues();
        if (!in_array($ratingMethod, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'ratingMethod', must be one of '%s'",
                    $ratingMethod,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['ratingMethod'] = $ratingMethod;

        return $this;
    }

    /**
     * Gets retailerRating
     *
     * @return \ThisIsDevelopment\OpenApi\Bol\Retailer\Models\RetailerRating|null
     */
    public function getRetailerRating()
    {
        return $this->container['retailerRating'];
    }

    /**
     * Sets retailerRating
     *
     * @param \ThisIsDevelopment\OpenApi\Bol\Retailer\Models\RetailerRating|null $retailerRating retailerRating
     *
     * @return self
     */
    public function setRetailerRating($retailerRating)
    {
        if (is_null($retailerRating)) {
            throw new \InvalidArgumentException('non-nullable retailerRating cannot be null');
        }
        $this->container['retailerRating'] = $retailerRating;

        return $this;
    }

    /**
     * Gets retailerReview
     *
     * @return \ThisIsDevelopment\OpenApi\Bol\Retailer\Models\RetailerReview|null
     */
    public function getRetailerReview()
    {
        return $this->container['retailerReview'];
    }

    /**
     * Sets retailerReview
     *
     * @param \ThisIsDevelopment\OpenApi\Bol\Retailer\Models\RetailerReview|null $retailerReview retailerReview
     *
     * @return self
     */
    public function setRetailerReview($retailerReview)
    {
        if (is_null($retailerReview)) {
            throw new \InvalidArgumentException('non-nullable retailerReview cannot be null');
        }
        $this->container['retailerReview'] = $retailerReview;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


