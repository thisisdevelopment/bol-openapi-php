<?php
/**
 * DeliveryInformation
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  ThisIsDevelopment\OpenApi\Bol\Retailer
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * v8 - Retailer API
 *
 * The bol.com API for retailers.  # Authentication Our API requires authentication via OAuth2. The detailed steps to authenticate are explained [here](https://api.bol.com/retailer/public/Retailer-API/authentication.html)   # Demo scenarios Our API specification includes examples of the responses you can expect. For more information as well as more examples, we refer you to the following resources:   - [Demo environment](https://api.bol.com/retailer/public/Retailer-API/demo/demo.html) - [Demo scenarios](https://api.bol.com/retailer/public/Retailer-API/demo/v8-index.html)
 *
 * The version of the OpenAPI document: 8.x
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 7.3.0-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace ThisIsDevelopment\OpenApi\Bol\Retailer\Models;

use \ArrayAccess;
use \ThisIsDevelopment\OpenApi\Bol\Retailer\ObjectSerializer;

/**
 * DeliveryInformation Class Doc Comment
 *
 * @category Class
 * @package  ThisIsDevelopment\OpenApi\Bol\Retailer
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class DeliveryInformation implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'DeliveryInformation';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'expectedDeliveryDate' => '\DateTime',
        'transporterCode' => 'string',
        'destinationWarehouse' => '\ThisIsDevelopment\OpenApi\Bol\Retailer\Models\DestinationWarehouse'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'expectedDeliveryDate' => 'date',
        'transporterCode' => null,
        'destinationWarehouse' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'expectedDeliveryDate' => false,
        'transporterCode' => false,
        'destinationWarehouse' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'expectedDeliveryDate' => 'expectedDeliveryDate',
        'transporterCode' => 'transporterCode',
        'destinationWarehouse' => 'destinationWarehouse'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'expectedDeliveryDate' => 'setExpectedDeliveryDate',
        'transporterCode' => 'setTransporterCode',
        'destinationWarehouse' => 'setDestinationWarehouse'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'expectedDeliveryDate' => 'getExpectedDeliveryDate',
        'transporterCode' => 'getTransporterCode',
        'destinationWarehouse' => 'getDestinationWarehouse'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    public const TRANSPORTER_CODE_POSTNL = 'POSTNL';
    public const TRANSPORTER_CODE_DHL = 'DHL';
    public const TRANSPORTER_CODE_DPD = 'DPD';
    public const TRANSPORTER_CODE_GLS = 'GLS';
    public const TRANSPORTER_CODE_UPS = 'UPS';
    public const TRANSPORTER_CODE_OTHER = 'OTHER';

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getTransporterCodeAllowableValues()
    {
        return [
            self::TRANSPORTER_CODE_POSTNL,
            self::TRANSPORTER_CODE_DHL,
            self::TRANSPORTER_CODE_DPD,
            self::TRANSPORTER_CODE_GLS,
            self::TRANSPORTER_CODE_UPS,
            self::TRANSPORTER_CODE_OTHER,
        ];
    }

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('expectedDeliveryDate', $data ?? [], null);
        $this->setIfExists('transporterCode', $data ?? [], null);
        $this->setIfExists('destinationWarehouse', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['expectedDeliveryDate'] === null) {
            $invalidProperties[] = "'expectedDeliveryDate' can't be null";
        }
        if ($this->container['transporterCode'] === null) {
            $invalidProperties[] = "'transporterCode' can't be null";
        }
        $allowedValues = $this->getTransporterCodeAllowableValues();
        if (!is_null($this->container['transporterCode']) && !in_array($this->container['transporterCode'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'transporterCode', must be one of '%s'",
                $this->container['transporterCode'],
                implode("', '", $allowedValues)
            );
        }

        if ($this->container['destinationWarehouse'] === null) {
            $invalidProperties[] = "'destinationWarehouse' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets expectedDeliveryDate
     *
     * @return \DateTime
     */
    public function getExpectedDeliveryDate()
    {
        return $this->container['expectedDeliveryDate'];
    }

    /**
     * Sets expectedDeliveryDate
     *
     * @param \DateTime $expectedDeliveryDate The expected delivery date of the shipment at the bol.com warehouse in ISO 8601 format.
     *
     * @return self
     */
    public function setExpectedDeliveryDate($expectedDeliveryDate)
    {
        if (is_null($expectedDeliveryDate)) {
            throw new \InvalidArgumentException('non-nullable expectedDeliveryDate cannot be null');
        }
        $this->container['expectedDeliveryDate'] = $expectedDeliveryDate;

        return $this;
    }

    /**
     * Gets transporterCode
     *
     * @return string
     */
    public function getTransporterCode()
    {
        return $this->container['transporterCode'];
    }

    /**
     * Sets transporterCode
     *
     * @param string $transporterCode The transporter that will pickup this replenishment.
     *
     * @return self
     */
    public function setTransporterCode($transporterCode)
    {
        if (is_null($transporterCode)) {
            throw new \InvalidArgumentException('non-nullable transporterCode cannot be null');
        }
        $allowedValues = $this->getTransporterCodeAllowableValues();
        if (!in_array($transporterCode, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'transporterCode', must be one of '%s'",
                    $transporterCode,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['transporterCode'] = $transporterCode;

        return $this;
    }

    /**
     * Gets destinationWarehouse
     *
     * @return \ThisIsDevelopment\OpenApi\Bol\Retailer\Models\DestinationWarehouse
     */
    public function getDestinationWarehouse()
    {
        return $this->container['destinationWarehouse'];
    }

    /**
     * Sets destinationWarehouse
     *
     * @param \ThisIsDevelopment\OpenApi\Bol\Retailer\Models\DestinationWarehouse $destinationWarehouse destinationWarehouse
     *
     * @return self
     */
    public function setDestinationWarehouse($destinationWarehouse)
    {
        if (is_null($destinationWarehouse)) {
            throw new \InvalidArgumentException('non-nullable destinationWarehouse cannot be null');
        }
        $this->container['destinationWarehouse'] = $destinationWarehouse;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


