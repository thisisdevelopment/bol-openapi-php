<?php
/**
 * Offer
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  ThisIsDevelopment\OpenApi\Bol\Retailer
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * v9 - Retailer API
 *
 * The bol.com API for retailers.  # Authentication Our API requires authentication via OAuth2. The detailed steps to authenticate are explained [here](https://api.bol.com/retailer/public/Retailer-API/authentication.html)   # Demo scenarios Our API specification includes examples of the responses you can expect. For more information as well as more examples, we refer you to the following resources:   - [Demo environment](https://api.bol.com/retailer/public/Retailer-API/demo/demo.html) - [Demo scenarios](https://api.bol.com/retailer/public/Retailer-API/demo/v9-index.html)
 *
 * The version of the OpenAPI document: 9.x
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 7.3.0-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace ThisIsDevelopment\OpenApi\Bol\Retailer\Models;

use \ArrayAccess;
use \ThisIsDevelopment\OpenApi\Bol\Retailer\ObjectSerializer;

/**
 * Offer Class Doc Comment
 *
 * @category Class
 * @description List of offers.
 * @package  ThisIsDevelopment\OpenApi\Bol\Retailer
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class Offer implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'Offer';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'offerId' => 'string',
        'retailerId' => 'string',
        'countryCode' => 'string',
        'bestOffer' => 'bool',
        'price' => 'float',
        'fulfilmentMethod' => 'string',
        'condition' => 'string',
        'ultimateOrderTime' => 'string',
        'minDeliveryDate' => '\DateTime',
        'maxDeliveryDate' => '\DateTime'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'offerId' => null,
        'retailerId' => null,
        'countryCode' => null,
        'bestOffer' => null,
        'price' => null,
        'fulfilmentMethod' => null,
        'condition' => null,
        'ultimateOrderTime' => null,
        'minDeliveryDate' => 'date',
        'maxDeliveryDate' => 'date'
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'offerId' => false,
        'retailerId' => false,
        'countryCode' => false,
        'bestOffer' => false,
        'price' => false,
        'fulfilmentMethod' => false,
        'condition' => false,
        'ultimateOrderTime' => false,
        'minDeliveryDate' => false,
        'maxDeliveryDate' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'offerId' => 'offerId',
        'retailerId' => 'retailerId',
        'countryCode' => 'countryCode',
        'bestOffer' => 'bestOffer',
        'price' => 'price',
        'fulfilmentMethod' => 'fulfilmentMethod',
        'condition' => 'condition',
        'ultimateOrderTime' => 'ultimateOrderTime',
        'minDeliveryDate' => 'minDeliveryDate',
        'maxDeliveryDate' => 'maxDeliveryDate'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'offerId' => 'setOfferId',
        'retailerId' => 'setRetailerId',
        'countryCode' => 'setCountryCode',
        'bestOffer' => 'setBestOffer',
        'price' => 'setPrice',
        'fulfilmentMethod' => 'setFulfilmentMethod',
        'condition' => 'setCondition',
        'ultimateOrderTime' => 'setUltimateOrderTime',
        'minDeliveryDate' => 'setMinDeliveryDate',
        'maxDeliveryDate' => 'setMaxDeliveryDate'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'offerId' => 'getOfferId',
        'retailerId' => 'getRetailerId',
        'countryCode' => 'getCountryCode',
        'bestOffer' => 'getBestOffer',
        'price' => 'getPrice',
        'fulfilmentMethod' => 'getFulfilmentMethod',
        'condition' => 'getCondition',
        'ultimateOrderTime' => 'getUltimateOrderTime',
        'minDeliveryDate' => 'getMinDeliveryDate',
        'maxDeliveryDate' => 'getMaxDeliveryDate'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('offerId', $data ?? [], null);
        $this->setIfExists('retailerId', $data ?? [], null);
        $this->setIfExists('countryCode', $data ?? [], null);
        $this->setIfExists('bestOffer', $data ?? [], null);
        $this->setIfExists('price', $data ?? [], null);
        $this->setIfExists('fulfilmentMethod', $data ?? [], null);
        $this->setIfExists('condition', $data ?? [], null);
        $this->setIfExists('ultimateOrderTime', $data ?? [], null);
        $this->setIfExists('minDeliveryDate', $data ?? [], null);
        $this->setIfExists('maxDeliveryDate', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['offerId'] === null) {
            $invalidProperties[] = "'offerId' can't be null";
        }
        if ($this->container['retailerId'] === null) {
            $invalidProperties[] = "'retailerId' can't be null";
        }
        if ($this->container['countryCode'] === null) {
            $invalidProperties[] = "'countryCode' can't be null";
        }
        if ($this->container['bestOffer'] === null) {
            $invalidProperties[] = "'bestOffer' can't be null";
        }
        if ($this->container['price'] === null) {
            $invalidProperties[] = "'price' can't be null";
        }
        if ($this->container['fulfilmentMethod'] === null) {
            $invalidProperties[] = "'fulfilmentMethod' can't be null";
        }
        if ($this->container['maxDeliveryDate'] === null) {
            $invalidProperties[] = "'maxDeliveryDate' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets offerId
     *
     * @return string
     */
    public function getOfferId()
    {
        return $this->container['offerId'];
    }

    /**
     * Sets offerId
     *
     * @param string $offerId Unique identifier for an offer.
     *
     * @return self
     */
    public function setOfferId($offerId)
    {
        if (is_null($offerId)) {
            throw new \InvalidArgumentException('non-nullable offerId cannot be null');
        }
        $this->container['offerId'] = $offerId;

        return $this;
    }

    /**
     * Gets retailerId
     *
     * @return string
     */
    public function getRetailerId()
    {
        return $this->container['retailerId'];
    }

    /**
     * Sets retailerId
     *
     * @param string $retailerId The ID of the retailer which the offer belongs to.
     *
     * @return self
     */
    public function setRetailerId($retailerId)
    {
        if (is_null($retailerId)) {
            throw new \InvalidArgumentException('non-nullable retailerId cannot be null');
        }
        $this->container['retailerId'] = $retailerId;

        return $this;
    }

    /**
     * Gets countryCode
     *
     * @return string
     */
    public function getCountryCode()
    {
        return $this->container['countryCode'];
    }

    /**
     * Sets countryCode
     *
     * @param string $countryCode The country code.
     *
     * @return self
     */
    public function setCountryCode($countryCode)
    {
        if (is_null($countryCode)) {
            throw new \InvalidArgumentException('non-nullable countryCode cannot be null');
        }
        $this->container['countryCode'] = $countryCode;

        return $this;
    }

    /**
     * Gets bestOffer
     *
     * @return bool
     */
    public function getBestOffer()
    {
        return $this->container['bestOffer'];
    }

    /**
     * Sets bestOffer
     *
     * @param bool $bestOffer Indicator if the offer is the best offer within the country for the requested EAN.
     *
     * @return self
     */
    public function setBestOffer($bestOffer)
    {
        if (is_null($bestOffer)) {
            throw new \InvalidArgumentException('non-nullable bestOffer cannot be null');
        }
        $this->container['bestOffer'] = $bestOffer;

        return $this;
    }

    /**
     * Gets price
     *
     * @return float
     */
    public function getPrice()
    {
        return $this->container['price'];
    }

    /**
     * Sets price
     *
     * @param float $price The selling price to the customer of a single unit including VAT unless there is a discount. The price should always have two decimals precision.
     *
     * @return self
     */
    public function setPrice($price)
    {
        if (is_null($price)) {
            throw new \InvalidArgumentException('non-nullable price cannot be null');
        }
        $this->container['price'] = $price;

        return $this;
    }

    /**
     * Gets fulfilmentMethod
     *
     * @return string
     */
    public function getFulfilmentMethod()
    {
        return $this->container['fulfilmentMethod'];
    }

    /**
     * Sets fulfilmentMethod
     *
     * @param string $fulfilmentMethod The fulfilment method. Fulfilled by the retailer (FBR) or fulfilled by bol.com (FBB).
     *
     * @return self
     */
    public function setFulfilmentMethod($fulfilmentMethod)
    {
        if (is_null($fulfilmentMethod)) {
            throw new \InvalidArgumentException('non-nullable fulfilmentMethod cannot be null');
        }
        $this->container['fulfilmentMethod'] = $fulfilmentMethod;

        return $this;
    }

    /**
     * Gets condition
     *
     * @return string|null
     */
    public function getCondition()
    {
        return $this->container['condition'];
    }

    /**
     * Sets condition
     *
     * @param string|null $condition The condition of the offered product.
     *
     * @return self
     */
    public function setCondition($condition)
    {
        if (is_null($condition)) {
            throw new \InvalidArgumentException('non-nullable condition cannot be null');
        }
        $this->container['condition'] = $condition;

        return $this;
    }

    /**
     * Gets ultimateOrderTime
     *
     * @return string|null
     */
    public function getUltimateOrderTime()
    {
        return $this->container['ultimateOrderTime'];
    }

    /**
     * Sets ultimateOrderTime
     *
     * @param string|null $ultimateOrderTime The time in ISO 8601 format when the ultimate order time on the day in order to comply to the maxDeliveryDate as a promise.
     *
     * @return self
     */
    public function setUltimateOrderTime($ultimateOrderTime)
    {
        if (is_null($ultimateOrderTime)) {
            throw new \InvalidArgumentException('non-nullable ultimateOrderTime cannot be null');
        }
        $this->container['ultimateOrderTime'] = $ultimateOrderTime;

        return $this;
    }

    /**
     * Gets minDeliveryDate
     *
     * @return \DateTime|null
     */
    public function getMinDeliveryDate()
    {
        return $this->container['minDeliveryDate'];
    }

    /**
     * Sets minDeliveryDate
     *
     * @param \DateTime|null $minDeliveryDate The date at which package can be delivered to customer earliest.
     *
     * @return self
     */
    public function setMinDeliveryDate($minDeliveryDate)
    {
        if (is_null($minDeliveryDate)) {
            throw new \InvalidArgumentException('non-nullable minDeliveryDate cannot be null');
        }
        $this->container['minDeliveryDate'] = $minDeliveryDate;

        return $this;
    }

    /**
     * Gets maxDeliveryDate
     *
     * @return \DateTime
     */
    public function getMaxDeliveryDate()
    {
        return $this->container['maxDeliveryDate'];
    }

    /**
     * Sets maxDeliveryDate
     *
     * @param \DateTime $maxDeliveryDate The date at which package can be delivered to customer latest. In case of pre-orders where a specific delivery date is not available, a placeholder date will be used.
     *
     * @return self
     */
    public function setMaxDeliveryDate($maxDeliveryDate)
    {
        if (is_null($maxDeliveryDate)) {
            throw new \InvalidArgumentException('non-nullable maxDeliveryDate cannot be null');
        }
        $this->container['maxDeliveryDate'] = $maxDeliveryDate;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


