<?php
/**
 * CatalogProduct
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  ThisIsDevelopment\OpenApi\Bol\Retailer
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * v10 - Retailer API
 *
 * The bol.com API for retailers.  # Authentication Our API requires authentication via OAuth2. The detailed steps to authenticate are explained [here](https://api.bol.com/retailer/public/Retailer-API/authentication.html)   # Demo scenarios Our API specification includes examples of the responses you can expect. For more information as well as more examples, we refer you to the following resources:   - [Demo environment](https://api.bol.com/retailer/public/Retailer-API/demo/demo.html) - [Demo scenarios](https://api.bol.com/retailer/public/Retailer-API/demo/v10-index.html)
 *
 * The version of the OpenAPI document: 10.x
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 7.3.0-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace ThisIsDevelopment\OpenApi\Bol\Retailer\Models;

use \ArrayAccess;
use \ThisIsDevelopment\OpenApi\Bol\Retailer\ObjectSerializer;

/**
 * CatalogProduct Class Doc Comment
 *
 * @category Class
 * @package  ThisIsDevelopment\OpenApi\Bol\Retailer
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class CatalogProduct implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'CatalogProduct';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'published' => 'bool',
        'gpc' => '\ThisIsDevelopment\OpenApi\Bol\Retailer\Models\Gpc',
        'enrichment' => '\ThisIsDevelopment\OpenApi\Bol\Retailer\Models\Enrichment',
        'attributes' => '\ThisIsDevelopment\OpenApi\Bol\Retailer\Models\Attributes[]',
        'parties' => '\ThisIsDevelopment\OpenApi\Bol\Retailer\Models\Party[]',
        'audioTracks' => '\ThisIsDevelopment\OpenApi\Bol\Retailer\Models\AudioTracks[]',
        'series' => '\ThisIsDevelopment\OpenApi\Bol\Retailer\Models\Serie[]'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'published' => null,
        'gpc' => null,
        'enrichment' => null,
        'attributes' => null,
        'parties' => null,
        'audioTracks' => null,
        'series' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'published' => false,
        'gpc' => false,
        'enrichment' => false,
        'attributes' => false,
        'parties' => false,
        'audioTracks' => false,
        'series' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'published' => 'published',
        'gpc' => 'gpc',
        'enrichment' => 'enrichment',
        'attributes' => 'attributes',
        'parties' => 'parties',
        'audioTracks' => 'audioTracks',
        'series' => 'series'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'published' => 'setPublished',
        'gpc' => 'setGpc',
        'enrichment' => 'setEnrichment',
        'attributes' => 'setAttributes',
        'parties' => 'setParties',
        'audioTracks' => 'setAudioTracks',
        'series' => 'setSeries'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'published' => 'getPublished',
        'gpc' => 'getGpc',
        'enrichment' => 'getEnrichment',
        'attributes' => 'getAttributes',
        'parties' => 'getParties',
        'audioTracks' => 'getAudioTracks',
        'series' => 'getSeries'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('published', $data ?? [], null);
        $this->setIfExists('gpc', $data ?? [], null);
        $this->setIfExists('enrichment', $data ?? [], null);
        $this->setIfExists('attributes', $data ?? [], null);
        $this->setIfExists('parties', $data ?? [], null);
        $this->setIfExists('audioTracks', $data ?? [], null);
        $this->setIfExists('series', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['published'] === null) {
            $invalidProperties[] = "'published' can't be null";
        }
        if ($this->container['gpc'] === null) {
            $invalidProperties[] = "'gpc' can't be null";
        }
        if ($this->container['attributes'] === null) {
            $invalidProperties[] = "'attributes' can't be null";
        }
        if ($this->container['parties'] === null) {
            $invalidProperties[] = "'parties' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets published
     *
     * @return bool
     */
    public function getPublished()
    {
        return $this->container['published'];
    }

    /**
     * Sets published
     *
     * @param bool $published Indicates whether the product meets the minimum requirements for publishing to the webshop.
     *
     * @return self
     */
    public function setPublished($published)
    {
        if (is_null($published)) {
            throw new \InvalidArgumentException('non-nullable published cannot be null');
        }
        $this->container['published'] = $published;

        return $this;
    }

    /**
     * Gets gpc
     *
     * @return \ThisIsDevelopment\OpenApi\Bol\Retailer\Models\Gpc
     */
    public function getGpc()
    {
        return $this->container['gpc'];
    }

    /**
     * Sets gpc
     *
     * @param \ThisIsDevelopment\OpenApi\Bol\Retailer\Models\Gpc $gpc gpc
     *
     * @return self
     */
    public function setGpc($gpc)
    {
        if (is_null($gpc)) {
            throw new \InvalidArgumentException('non-nullable gpc cannot be null');
        }
        $this->container['gpc'] = $gpc;

        return $this;
    }

    /**
     * Gets enrichment
     *
     * @return \ThisIsDevelopment\OpenApi\Bol\Retailer\Models\Enrichment|null
     */
    public function getEnrichment()
    {
        return $this->container['enrichment'];
    }

    /**
     * Sets enrichment
     *
     * @param \ThisIsDevelopment\OpenApi\Bol\Retailer\Models\Enrichment|null $enrichment enrichment
     *
     * @return self
     */
    public function setEnrichment($enrichment)
    {
        if (is_null($enrichment)) {
            throw new \InvalidArgumentException('non-nullable enrichment cannot be null');
        }
        $this->container['enrichment'] = $enrichment;

        return $this;
    }

    /**
     * Gets attributes
     *
     * @return \ThisIsDevelopment\OpenApi\Bol\Retailer\Models\Attributes[]
     */
    public function getAttributes()
    {
        return $this->container['attributes'];
    }

    /**
     * Sets attributes
     *
     * @param \ThisIsDevelopment\OpenApi\Bol\Retailer\Models\Attributes[] $attributes attributes
     *
     * @return self
     */
    public function setAttributes($attributes)
    {
        if (is_null($attributes)) {
            throw new \InvalidArgumentException('non-nullable attributes cannot be null');
        }
        $this->container['attributes'] = $attributes;

        return $this;
    }

    /**
     * Gets parties
     *
     * @return \ThisIsDevelopment\OpenApi\Bol\Retailer\Models\Party[]
     */
    public function getParties()
    {
        return $this->container['parties'];
    }

    /**
     * Sets parties
     *
     * @param \ThisIsDevelopment\OpenApi\Bol\Retailer\Models\Party[] $parties parties
     *
     * @return self
     */
    public function setParties($parties)
    {
        if (is_null($parties)) {
            throw new \InvalidArgumentException('non-nullable parties cannot be null');
        }
        $this->container['parties'] = $parties;

        return $this;
    }

    /**
     * Gets audioTracks
     *
     * @return \ThisIsDevelopment\OpenApi\Bol\Retailer\Models\AudioTracks[]|null
     */
    public function getAudioTracks()
    {
        return $this->container['audioTracks'];
    }

    /**
     * Sets audioTracks
     *
     * @param \ThisIsDevelopment\OpenApi\Bol\Retailer\Models\AudioTracks[]|null $audioTracks audioTracks
     *
     * @return self
     */
    public function setAudioTracks($audioTracks)
    {
        if (is_null($audioTracks)) {
            throw new \InvalidArgumentException('non-nullable audioTracks cannot be null');
        }
        $this->container['audioTracks'] = $audioTracks;

        return $this;
    }

    /**
     * Gets series
     *
     * @return \ThisIsDevelopment\OpenApi\Bol\Retailer\Models\Serie[]|null
     */
    public function getSeries()
    {
        return $this->container['series'];
    }

    /**
     * Sets series
     *
     * @param \ThisIsDevelopment\OpenApi\Bol\Retailer\Models\Serie[]|null $series series
     *
     * @return self
     */
    public function setSeries($series)
    {
        if (is_null($series)) {
            throw new \InvalidArgumentException('non-nullable series cannot be null');
        }
        $this->container['series'] = $series;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


