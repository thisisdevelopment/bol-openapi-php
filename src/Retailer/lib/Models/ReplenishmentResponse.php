<?php
/**
 * ReplenishmentResponse
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  ThisIsDevelopment\OpenApi\Bol\Retailer
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * v8 - Retailer API
 *
 * The bol.com API for retailers.  # Authentication Our API requires authentication via OAuth2. The detailed steps to authenticate are explained [here](https://api.bol.com/retailer/public/Retailer-API/authentication.html)   # Demo scenarios Our API specification includes examples of the responses you can expect. For more information as well as more examples, we refer you to the following resources:   - [Demo environment](https://api.bol.com/retailer/public/Retailer-API/demo/demo.html) - [Demo scenarios](https://api.bol.com/retailer/public/Retailer-API/demo/v8-index.html)
 *
 * The version of the OpenAPI document: 8.x
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 7.3.0-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace ThisIsDevelopment\OpenApi\Bol\Retailer\Models;

use \ArrayAccess;
use \ThisIsDevelopment\OpenApi\Bol\Retailer\ObjectSerializer;

/**
 * ReplenishmentResponse Class Doc Comment
 *
 * @category Class
 * @package  ThisIsDevelopment\OpenApi\Bol\Retailer
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class ReplenishmentResponse implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'ReplenishmentResponse';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'replenishmentId' => 'string',
        'creationDateTime' => '\DateTime',
        'reference' => 'string',
        'labelingByBol' => 'bool',
        'state' => 'string',
        'deliveryInformation' => '\ThisIsDevelopment\OpenApi\Bol\Retailer\Models\DeliveryInformation',
        'pickupAppointment' => '\ThisIsDevelopment\OpenApi\Bol\Retailer\Models\PickupAppointment',
        'numberOfLoadCarriers' => 'int',
        'loadCarriers' => '\ThisIsDevelopment\OpenApi\Bol\Retailer\Models\LoadCarrier[]',
        'lines' => '\ThisIsDevelopment\OpenApi\Bol\Retailer\Models\ReplenishmentLine[]',
        'invalidLines' => '\ThisIsDevelopment\OpenApi\Bol\Retailer\Models\InvalidReplenishmentLine[]',
        'stateTransitions' => '\ThisIsDevelopment\OpenApi\Bol\Retailer\Models\StateTransition[]'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'replenishmentId' => null,
        'creationDateTime' => 'date-time',
        'reference' => null,
        'labelingByBol' => null,
        'state' => null,
        'deliveryInformation' => null,
        'pickupAppointment' => null,
        'numberOfLoadCarriers' => 'int32',
        'loadCarriers' => null,
        'lines' => null,
        'invalidLines' => null,
        'stateTransitions' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'replenishmentId' => false,
        'creationDateTime' => false,
        'reference' => false,
        'labelingByBol' => false,
        'state' => false,
        'deliveryInformation' => false,
        'pickupAppointment' => false,
        'numberOfLoadCarriers' => false,
        'loadCarriers' => false,
        'lines' => false,
        'invalidLines' => false,
        'stateTransitions' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'replenishmentId' => 'replenishmentId',
        'creationDateTime' => 'creationDateTime',
        'reference' => 'reference',
        'labelingByBol' => 'labelingByBol',
        'state' => 'state',
        'deliveryInformation' => 'deliveryInformation',
        'pickupAppointment' => 'pickupAppointment',
        'numberOfLoadCarriers' => 'numberOfLoadCarriers',
        'loadCarriers' => 'loadCarriers',
        'lines' => 'lines',
        'invalidLines' => 'invalidLines',
        'stateTransitions' => 'stateTransitions'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'replenishmentId' => 'setReplenishmentId',
        'creationDateTime' => 'setCreationDateTime',
        'reference' => 'setReference',
        'labelingByBol' => 'setLabelingByBol',
        'state' => 'setState',
        'deliveryInformation' => 'setDeliveryInformation',
        'pickupAppointment' => 'setPickupAppointment',
        'numberOfLoadCarriers' => 'setNumberOfLoadCarriers',
        'loadCarriers' => 'setLoadCarriers',
        'lines' => 'setLines',
        'invalidLines' => 'setInvalidLines',
        'stateTransitions' => 'setStateTransitions'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'replenishmentId' => 'getReplenishmentId',
        'creationDateTime' => 'getCreationDateTime',
        'reference' => 'getReference',
        'labelingByBol' => 'getLabelingByBol',
        'state' => 'getState',
        'deliveryInformation' => 'getDeliveryInformation',
        'pickupAppointment' => 'getPickupAppointment',
        'numberOfLoadCarriers' => 'getNumberOfLoadCarriers',
        'loadCarriers' => 'getLoadCarriers',
        'lines' => 'getLines',
        'invalidLines' => 'getInvalidLines',
        'stateTransitions' => 'getStateTransitions'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    public const STATE_ANNOUNCED = 'ANNOUNCED';
    public const STATE_IN_TRANSIT = 'IN_TRANSIT';
    public const STATE_ARRIVED_AT_WH = 'ARRIVED_AT_WH';
    public const STATE_IN_PROGRESS_AT_WH = 'IN_PROGRESS_AT_WH';
    public const STATE_CANCELLED = 'CANCELLED';
    public const STATE_DONE = 'DONE';

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getStateAllowableValues()
    {
        return [
            self::STATE_ANNOUNCED,
            self::STATE_IN_TRANSIT,
            self::STATE_ARRIVED_AT_WH,
            self::STATE_IN_PROGRESS_AT_WH,
            self::STATE_CANCELLED,
            self::STATE_DONE,
        ];
    }

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('replenishmentId', $data ?? [], null);
        $this->setIfExists('creationDateTime', $data ?? [], null);
        $this->setIfExists('reference', $data ?? [], null);
        $this->setIfExists('labelingByBol', $data ?? [], null);
        $this->setIfExists('state', $data ?? [], null);
        $this->setIfExists('deliveryInformation', $data ?? [], null);
        $this->setIfExists('pickupAppointment', $data ?? [], null);
        $this->setIfExists('numberOfLoadCarriers', $data ?? [], null);
        $this->setIfExists('loadCarriers', $data ?? [], null);
        $this->setIfExists('lines', $data ?? [], null);
        $this->setIfExists('invalidLines', $data ?? [], null);
        $this->setIfExists('stateTransitions', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['replenishmentId'] === null) {
            $invalidProperties[] = "'replenishmentId' can't be null";
        }
        if ($this->container['creationDateTime'] === null) {
            $invalidProperties[] = "'creationDateTime' can't be null";
        }
        if ($this->container['reference'] === null) {
            $invalidProperties[] = "'reference' can't be null";
        }
        if ($this->container['labelingByBol'] === null) {
            $invalidProperties[] = "'labelingByBol' can't be null";
        }
        if ($this->container['state'] === null) {
            $invalidProperties[] = "'state' can't be null";
        }
        $allowedValues = $this->getStateAllowableValues();
        if (!is_null($this->container['state']) && !in_array($this->container['state'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'state', must be one of '%s'",
                $this->container['state'],
                implode("', '", $allowedValues)
            );
        }

        if ($this->container['deliveryInformation'] === null) {
            $invalidProperties[] = "'deliveryInformation' can't be null";
        }
        if ($this->container['loadCarriers'] === null) {
            $invalidProperties[] = "'loadCarriers' can't be null";
        }
        if ($this->container['lines'] === null) {
            $invalidProperties[] = "'lines' can't be null";
        }
        if ($this->container['invalidLines'] === null) {
            $invalidProperties[] = "'invalidLines' can't be null";
        }
        if ($this->container['stateTransitions'] === null) {
            $invalidProperties[] = "'stateTransitions' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets replenishmentId
     *
     * @return string
     */
    public function getReplenishmentId()
    {
        return $this->container['replenishmentId'];
    }

    /**
     * Sets replenishmentId
     *
     * @param string $replenishmentId The unique identifier of the replenishment.
     *
     * @return self
     */
    public function setReplenishmentId($replenishmentId)
    {
        if (is_null($replenishmentId)) {
            throw new \InvalidArgumentException('non-nullable replenishmentId cannot be null');
        }
        $this->container['replenishmentId'] = $replenishmentId;

        return $this;
    }

    /**
     * Gets creationDateTime
     *
     * @return \DateTime
     */
    public function getCreationDateTime()
    {
        return $this->container['creationDateTime'];
    }

    /**
     * Sets creationDateTime
     *
     * @param \DateTime $creationDateTime The date and time when this replenishment was created. In ISO 8601 format.
     *
     * @return self
     */
    public function setCreationDateTime($creationDateTime)
    {
        if (is_null($creationDateTime)) {
            throw new \InvalidArgumentException('non-nullable creationDateTime cannot be null');
        }
        $this->container['creationDateTime'] = $creationDateTime;

        return $this;
    }

    /**
     * Gets reference
     *
     * @return string
     */
    public function getReference()
    {
        return $this->container['reference'];
    }

    /**
     * Sets reference
     *
     * @param string $reference Custom user defined reference to identify the replenishment.
     *
     * @return self
     */
    public function setReference($reference)
    {
        if (is_null($reference)) {
            throw new \InvalidArgumentException('non-nullable reference cannot be null');
        }
        $this->container['reference'] = $reference;

        return $this;
    }

    /**
     * Gets labelingByBol
     *
     * @return bool
     */
    public function getLabelingByBol()
    {
        return $this->container['labelingByBol'];
    }

    /**
     * Sets labelingByBol
     *
     * @param bool $labelingByBol Indicates whether the replenishment will be labeled by bol.com or not.
     *
     * @return self
     */
    public function setLabelingByBol($labelingByBol)
    {
        if (is_null($labelingByBol)) {
            throw new \InvalidArgumentException('non-nullable labelingByBol cannot be null');
        }
        $this->container['labelingByBol'] = $labelingByBol;

        return $this;
    }

    /**
     * Gets state
     *
     * @return string
     */
    public function getState()
    {
        return $this->container['state'];
    }

    /**
     * Sets state
     *
     * @param string $state Indicates the state of this replenishment order.
     *
     * @return self
     */
    public function setState($state)
    {
        if (is_null($state)) {
            throw new \InvalidArgumentException('non-nullable state cannot be null');
        }
        $allowedValues = $this->getStateAllowableValues();
        if (!in_array($state, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'state', must be one of '%s'",
                    $state,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['state'] = $state;

        return $this;
    }

    /**
     * Gets deliveryInformation
     *
     * @return \ThisIsDevelopment\OpenApi\Bol\Retailer\Models\DeliveryInformation
     */
    public function getDeliveryInformation()
    {
        return $this->container['deliveryInformation'];
    }

    /**
     * Sets deliveryInformation
     *
     * @param \ThisIsDevelopment\OpenApi\Bol\Retailer\Models\DeliveryInformation $deliveryInformation deliveryInformation
     *
     * @return self
     */
    public function setDeliveryInformation($deliveryInformation)
    {
        if (is_null($deliveryInformation)) {
            throw new \InvalidArgumentException('non-nullable deliveryInformation cannot be null');
        }
        $this->container['deliveryInformation'] = $deliveryInformation;

        return $this;
    }

    /**
     * Gets pickupAppointment
     *
     * @return \ThisIsDevelopment\OpenApi\Bol\Retailer\Models\PickupAppointment|null
     */
    public function getPickupAppointment()
    {
        return $this->container['pickupAppointment'];
    }

    /**
     * Sets pickupAppointment
     *
     * @param \ThisIsDevelopment\OpenApi\Bol\Retailer\Models\PickupAppointment|null $pickupAppointment pickupAppointment
     *
     * @return self
     */
    public function setPickupAppointment($pickupAppointment)
    {
        if (is_null($pickupAppointment)) {
            throw new \InvalidArgumentException('non-nullable pickupAppointment cannot be null');
        }
        $this->container['pickupAppointment'] = $pickupAppointment;

        return $this;
    }

    /**
     * Gets numberOfLoadCarriers
     *
     * @return int|null
     */
    public function getNumberOfLoadCarriers()
    {
        return $this->container['numberOfLoadCarriers'];
    }

    /**
     * Sets numberOfLoadCarriers
     *
     * @param int|null $numberOfLoadCarriers The number of load carriers in this shipment.
     *
     * @return self
     */
    public function setNumberOfLoadCarriers($numberOfLoadCarriers)
    {
        if (is_null($numberOfLoadCarriers)) {
            throw new \InvalidArgumentException('non-nullable numberOfLoadCarriers cannot be null');
        }
        $this->container['numberOfLoadCarriers'] = $numberOfLoadCarriers;

        return $this;
    }

    /**
     * Gets loadCarriers
     *
     * @return \ThisIsDevelopment\OpenApi\Bol\Retailer\Models\LoadCarrier[]
     */
    public function getLoadCarriers()
    {
        return $this->container['loadCarriers'];
    }

    /**
     * Sets loadCarriers
     *
     * @param \ThisIsDevelopment\OpenApi\Bol\Retailer\Models\LoadCarrier[] $loadCarriers loadCarriers
     *
     * @return self
     */
    public function setLoadCarriers($loadCarriers)
    {
        if (is_null($loadCarriers)) {
            throw new \InvalidArgumentException('non-nullable loadCarriers cannot be null');
        }
        $this->container['loadCarriers'] = $loadCarriers;

        return $this;
    }

    /**
     * Gets lines
     *
     * @return \ThisIsDevelopment\OpenApi\Bol\Retailer\Models\ReplenishmentLine[]
     */
    public function getLines()
    {
        return $this->container['lines'];
    }

    /**
     * Sets lines
     *
     * @param \ThisIsDevelopment\OpenApi\Bol\Retailer\Models\ReplenishmentLine[] $lines lines
     *
     * @return self
     */
    public function setLines($lines)
    {
        if (is_null($lines)) {
            throw new \InvalidArgumentException('non-nullable lines cannot be null');
        }
        $this->container['lines'] = $lines;

        return $this;
    }

    /**
     * Gets invalidLines
     *
     * @return \ThisIsDevelopment\OpenApi\Bol\Retailer\Models\InvalidReplenishmentLine[]
     */
    public function getInvalidLines()
    {
        return $this->container['invalidLines'];
    }

    /**
     * Sets invalidLines
     *
     * @param \ThisIsDevelopment\OpenApi\Bol\Retailer\Models\InvalidReplenishmentLine[] $invalidLines invalidLines
     *
     * @return self
     */
    public function setInvalidLines($invalidLines)
    {
        if (is_null($invalidLines)) {
            throw new \InvalidArgumentException('non-nullable invalidLines cannot be null');
        }
        $this->container['invalidLines'] = $invalidLines;

        return $this;
    }

    /**
     * Gets stateTransitions
     *
     * @return \ThisIsDevelopment\OpenApi\Bol\Retailer\Models\StateTransition[]
     */
    public function getStateTransitions()
    {
        return $this->container['stateTransitions'];
    }

    /**
     * Sets stateTransitions
     *
     * @param \ThisIsDevelopment\OpenApi\Bol\Retailer\Models\StateTransition[] $stateTransitions stateTransitions
     *
     * @return self
     */
    public function setStateTransitions($stateTransitions)
    {
        if (is_null($stateTransitions)) {
            throw new \InvalidArgumentException('non-nullable stateTransitions cannot be null');
        }
        $this->container['stateTransitions'] = $stateTransitions;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


