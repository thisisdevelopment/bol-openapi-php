<?php
/**
 * PickupAppointment
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  ThisIsDevelopment\OpenApi\Bol\Retailer
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * v9 - Retailer API
 *
 * The bol.com API for retailers.  # Authentication Our API requires authentication via OAuth2. The detailed steps to authenticate are explained [here](https://api.bol.com/retailer/public/Retailer-API/authentication.html)   # Demo scenarios Our API specification includes examples of the responses you can expect. For more information as well as more examples, we refer you to the following resources:   - [Demo environment](https://api.bol.com/retailer/public/Retailer-API/demo/demo.html) - [Demo scenarios](https://api.bol.com/retailer/public/Retailer-API/demo/v9-index.html)
 *
 * The version of the OpenAPI document: 9.x
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 7.3.0-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace ThisIsDevelopment\OpenApi\Bol\Retailer\Models;

use \ArrayAccess;
use \ThisIsDevelopment\OpenApi\Bol\Retailer\ObjectSerializer;

/**
 * PickupAppointment Class Doc Comment
 *
 * @category Class
 * @package  ThisIsDevelopment\OpenApi\Bol\Retailer
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class PickupAppointment implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'PickupAppointment';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'commentToTransporter' => 'string',
        'address' => '\ThisIsDevelopment\OpenApi\Bol\Retailer\Models\Address',
        'pickupTimeSlot' => '\ThisIsDevelopment\OpenApi\Bol\Retailer\Models\ReplenishmentPickupTimeSlot',
        'pickupDateTime' => '\DateTime',
        'cancellationReason' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'commentToTransporter' => null,
        'address' => null,
        'pickupTimeSlot' => null,
        'pickupDateTime' => 'date-time',
        'cancellationReason' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'commentToTransporter' => false,
        'address' => false,
        'pickupTimeSlot' => false,
        'pickupDateTime' => false,
        'cancellationReason' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'commentToTransporter' => 'commentToTransporter',
        'address' => 'address',
        'pickupTimeSlot' => 'pickupTimeSlot',
        'pickupDateTime' => 'pickupDateTime',
        'cancellationReason' => 'cancellationReason'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'commentToTransporter' => 'setCommentToTransporter',
        'address' => 'setAddress',
        'pickupTimeSlot' => 'setPickupTimeSlot',
        'pickupDateTime' => 'setPickupDateTime',
        'cancellationReason' => 'setCancellationReason'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'commentToTransporter' => 'getCommentToTransporter',
        'address' => 'getAddress',
        'pickupTimeSlot' => 'getPickupTimeSlot',
        'pickupDateTime' => 'getPickupDateTime',
        'cancellationReason' => 'getCancellationReason'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    public const CANCELLATION_REASON_UNKNOWN_ADDRESS = 'UNKNOWN_ADDRESS';
    public const CANCELLATION_REASON_NOT_READY = 'NOT_READY';
    public const CANCELLATION_REASON_NO_LABEL = 'NO_LABEL';
    public const CANCELLATION_REASON_WRONG_PACKAGE = 'WRONG_PACKAGE';
    public const CANCELLATION_REASON_NOT_AT_HOME = 'NOT_AT_HOME';
    public const CANCELLATION_REASON_OTHER_REASON = 'OTHER_REASON';
    public const CANCELLATION_REASON_REQUEST_FROM_RETAILER = 'REQUEST_FROM_RETAILER';

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getCancellationReasonAllowableValues()
    {
        return [
            self::CANCELLATION_REASON_UNKNOWN_ADDRESS,
            self::CANCELLATION_REASON_NOT_READY,
            self::CANCELLATION_REASON_NO_LABEL,
            self::CANCELLATION_REASON_WRONG_PACKAGE,
            self::CANCELLATION_REASON_NOT_AT_HOME,
            self::CANCELLATION_REASON_OTHER_REASON,
            self::CANCELLATION_REASON_REQUEST_FROM_RETAILER,
        ];
    }

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('commentToTransporter', $data ?? [], null);
        $this->setIfExists('address', $data ?? [], null);
        $this->setIfExists('pickupTimeSlot', $data ?? [], null);
        $this->setIfExists('pickupDateTime', $data ?? [], null);
        $this->setIfExists('cancellationReason', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['address'] === null) {
            $invalidProperties[] = "'address' can't be null";
        }
        if ($this->container['pickupTimeSlot'] === null) {
            $invalidProperties[] = "'pickupTimeSlot' can't be null";
        }
        $allowedValues = $this->getCancellationReasonAllowableValues();
        if (!is_null($this->container['cancellationReason']) && !in_array($this->container['cancellationReason'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'cancellationReason', must be one of '%s'",
                $this->container['cancellationReason'],
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets commentToTransporter
     *
     * @return string|null
     */
    public function getCommentToTransporter()
    {
        return $this->container['commentToTransporter'];
    }

    /**
     * Sets commentToTransporter
     *
     * @param string|null $commentToTransporter A comment to the transporter regarding the pickup appointment.
     *
     * @return self
     */
    public function setCommentToTransporter($commentToTransporter)
    {
        if (is_null($commentToTransporter)) {
            throw new \InvalidArgumentException('non-nullable commentToTransporter cannot be null');
        }
        $this->container['commentToTransporter'] = $commentToTransporter;

        return $this;
    }

    /**
     * Gets address
     *
     * @return \ThisIsDevelopment\OpenApi\Bol\Retailer\Models\Address
     */
    public function getAddress()
    {
        return $this->container['address'];
    }

    /**
     * Sets address
     *
     * @param \ThisIsDevelopment\OpenApi\Bol\Retailer\Models\Address $address address
     *
     * @return self
     */
    public function setAddress($address)
    {
        if (is_null($address)) {
            throw new \InvalidArgumentException('non-nullable address cannot be null');
        }
        $this->container['address'] = $address;

        return $this;
    }

    /**
     * Gets pickupTimeSlot
     *
     * @return \ThisIsDevelopment\OpenApi\Bol\Retailer\Models\ReplenishmentPickupTimeSlot
     */
    public function getPickupTimeSlot()
    {
        return $this->container['pickupTimeSlot'];
    }

    /**
     * Sets pickupTimeSlot
     *
     * @param \ThisIsDevelopment\OpenApi\Bol\Retailer\Models\ReplenishmentPickupTimeSlot $pickupTimeSlot pickupTimeSlot
     *
     * @return self
     */
    public function setPickupTimeSlot($pickupTimeSlot)
    {
        if (is_null($pickupTimeSlot)) {
            throw new \InvalidArgumentException('non-nullable pickupTimeSlot cannot be null');
        }
        $this->container['pickupTimeSlot'] = $pickupTimeSlot;

        return $this;
    }

    /**
     * Gets pickupDateTime
     *
     * @return \DateTime|null
     */
    public function getPickupDateTime()
    {
        return $this->container['pickupDateTime'];
    }

    /**
     * Sets pickupDateTime
     *
     * @param \DateTime|null $pickupDateTime The date and time in ISO 8601 format when this replenishment was picked up by the transporter.
     *
     * @return self
     */
    public function setPickupDateTime($pickupDateTime)
    {
        if (is_null($pickupDateTime)) {
            throw new \InvalidArgumentException('non-nullable pickupDateTime cannot be null');
        }
        $this->container['pickupDateTime'] = $pickupDateTime;

        return $this;
    }

    /**
     * Gets cancellationReason
     *
     * @return string|null
     */
    public function getCancellationReason()
    {
        return $this->container['cancellationReason'];
    }

    /**
     * Sets cancellationReason
     *
     * @param string|null $cancellationReason In case of a pickup cancellation this field indicates the reason for cancelling this pickup.
     *
     * @return self
     */
    public function setCancellationReason($cancellationReason)
    {
        if (is_null($cancellationReason)) {
            throw new \InvalidArgumentException('non-nullable cancellationReason cannot be null');
        }
        $allowedValues = $this->getCancellationReasonAllowableValues();
        if (!in_array($cancellationReason, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'cancellationReason', must be one of '%s'",
                    $cancellationReason,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['cancellationReason'] = $cancellationReason;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


