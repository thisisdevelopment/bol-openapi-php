<?php
/**
 * CommissionsApi
 * PHP version 7.4
 *
 * @category Class
 * @package  ThisIsDevelopment\OpenApi\Bol\Retailer
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * v8 - Retailer API
 *
 * The bol.com API for retailers.  # Authentication Our API requires authentication via OAuth2. The detailed steps to authenticate are explained [here](https://api.bol.com/retailer/public/Retailer-API/authentication.html)   # Demo scenarios Our API specification includes examples of the responses you can expect. For more information as well as more examples, we refer you to the following resources:   - [Demo environment](https://api.bol.com/retailer/public/Retailer-API/demo/demo.html) - [Demo scenarios](https://api.bol.com/retailer/public/Retailer-API/demo/v8-index.html)
 *
 * The version of the OpenAPI document: 8.x
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 7.3.0-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace ThisIsDevelopment\OpenApi\Bol\Retailer\Api;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\ConnectException;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use ThisIsDevelopment\OpenApi\Bol\Retailer\ApiException;
use ThisIsDevelopment\OpenApi\Bol\Retailer\Configuration;
use ThisIsDevelopment\OpenApi\Bol\Retailer\HeaderSelector;
use ThisIsDevelopment\OpenApi\Bol\Retailer\ObjectSerializer;

/**
 * CommissionsApi Class Doc Comment
 *
 * @category Class
 * @package  ThisIsDevelopment\OpenApi\Bol\Retailer
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class CommissionsApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * @var int Host index
     */
    protected $hostIndex;

    /** @var string[] $contentTypes **/
    public const contentTypes = [
        'getCommission' => [
            'application/json',
        ],
        'getCommissions' => [
            'application/vnd.retailer.v8+json',
        ],
    ];

    /**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     * @param int             $hostIndex (Optional) host index to select the list of hosts if defined in the OpenAPI spec
     */
    public function __construct(
        ClientInterface $client = null,
        Configuration $config = null,
        HeaderSelector $selector = null,
        $hostIndex = 0
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: new Configuration();
        $this->headerSelector = $selector ?: new HeaderSelector();
        $this->hostIndex = $hostIndex;
    }

    /**
     * Set the host index
     *
     * @param int $hostIndex Host index (required)
     */
    public function setHostIndex($hostIndex): void
    {
        $this->hostIndex = $hostIndex;
    }

    /**
     * Get the host index
     *
     * @return int Host index
     */
    public function getHostIndex()
    {
        return $this->hostIndex;
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation getCommission
     *
     * Get all commissions and reductions by EAN per single EAN
     *
     * @param  string $ean The EAN number associated with this product. (required)
     * @param  float $unitPrice The price of the product with a period as a decimal separator. The price should always have two decimals precision. (required)
     * @param  string $condition The condition of the offer. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getCommission'] to see the possible values for this operation
     *
     * @throws \ThisIsDevelopment\OpenApi\Bol\Retailer\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \ThisIsDevelopment\OpenApi\Bol\Retailer\Models\Commission|\ThisIsDevelopment\OpenApi\Bol\Retailer\Models\Problem|\ThisIsDevelopment\OpenApi\Bol\Retailer\Models\Problem
     */
    public function getCommission($ean, $unitPrice, $condition = null, string $contentType = self::contentTypes['getCommission'][0])
    {
        list($response) = $this->getCommissionWithHttpInfo($ean, $unitPrice, $condition, $contentType);
        return $response;
    }

    /**
     * Operation getCommissionWithHttpInfo
     *
     * Get all commissions and reductions by EAN per single EAN
     *
     * @param  string $ean The EAN number associated with this product. (required)
     * @param  float $unitPrice The price of the product with a period as a decimal separator. The price should always have two decimals precision. (required)
     * @param  string $condition The condition of the offer. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getCommission'] to see the possible values for this operation
     *
     * @throws \ThisIsDevelopment\OpenApi\Bol\Retailer\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \ThisIsDevelopment\OpenApi\Bol\Retailer\Models\Commission|\ThisIsDevelopment\OpenApi\Bol\Retailer\Models\Problem|\ThisIsDevelopment\OpenApi\Bol\Retailer\Models\Problem, HTTP status code, HTTP response headers (array of strings)
     */
    public function getCommissionWithHttpInfo($ean, $unitPrice, $condition = null, string $contentType = self::contentTypes['getCommission'][0])
    {
        $request = $this->getCommissionRequest($ean, $unitPrice, $condition, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\ThisIsDevelopment\OpenApi\Bol\Retailer\Models\Commission' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\ThisIsDevelopment\OpenApi\Bol\Retailer\Models\Commission' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\ThisIsDevelopment\OpenApi\Bol\Retailer\Models\Commission', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 400:
                    if ('\ThisIsDevelopment\OpenApi\Bol\Retailer\Models\Problem' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\ThisIsDevelopment\OpenApi\Bol\Retailer\Models\Problem' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\ThisIsDevelopment\OpenApi\Bol\Retailer\Models\Problem', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 404:
                    if ('\ThisIsDevelopment\OpenApi\Bol\Retailer\Models\Problem' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\ThisIsDevelopment\OpenApi\Bol\Retailer\Models\Problem' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\ThisIsDevelopment\OpenApi\Bol\Retailer\Models\Problem', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\ThisIsDevelopment\OpenApi\Bol\Retailer\Models\Commission';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ThisIsDevelopment\OpenApi\Bol\Retailer\Models\Commission',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ThisIsDevelopment\OpenApi\Bol\Retailer\Models\Problem',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ThisIsDevelopment\OpenApi\Bol\Retailer\Models\Problem',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getCommissionAsync
     *
     * Get all commissions and reductions by EAN per single EAN
     *
     * @param  string $ean The EAN number associated with this product. (required)
     * @param  float $unitPrice The price of the product with a period as a decimal separator. The price should always have two decimals precision. (required)
     * @param  string $condition The condition of the offer. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getCommission'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getCommissionAsync($ean, $unitPrice, $condition = null, string $contentType = self::contentTypes['getCommission'][0])
    {
        return $this->getCommissionAsyncWithHttpInfo($ean, $unitPrice, $condition, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getCommissionAsyncWithHttpInfo
     *
     * Get all commissions and reductions by EAN per single EAN
     *
     * @param  string $ean The EAN number associated with this product. (required)
     * @param  float $unitPrice The price of the product with a period as a decimal separator. The price should always have two decimals precision. (required)
     * @param  string $condition The condition of the offer. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getCommission'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getCommissionAsyncWithHttpInfo($ean, $unitPrice, $condition = null, string $contentType = self::contentTypes['getCommission'][0])
    {
        $returnType = '\ThisIsDevelopment\OpenApi\Bol\Retailer\Models\Commission';
        $request = $this->getCommissionRequest($ean, $unitPrice, $condition, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getCommission'
     *
     * @param  string $ean The EAN number associated with this product. (required)
     * @param  float $unitPrice The price of the product with a period as a decimal separator. The price should always have two decimals precision. (required)
     * @param  string $condition The condition of the offer. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getCommission'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getCommissionRequest($ean, $unitPrice, $condition = null, string $contentType = self::contentTypes['getCommission'][0])
    {

        // verify the required parameter 'ean' is set
        if ($ean === null || (is_array($ean) && count($ean) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $ean when calling getCommission'
            );
        }

        // verify the required parameter 'unitPrice' is set
        if ($unitPrice === null || (is_array($unitPrice) && count($unitPrice) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $unitPrice when calling getCommission'
            );
        }
        if ($unitPrice > 9999) {
            throw new \InvalidArgumentException('invalid value for "$unitPrice" when calling CommissionsApi.getCommission, must be smaller than or equal to 9999.');
        }
        if ($unitPrice < 0) {
            throw new \InvalidArgumentException('invalid value for "$unitPrice" when calling CommissionsApi.getCommission, must be bigger than or equal to 0.');
        }
        


        $resourcePath = '/retailer/commission/{ean}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $condition,
            'condition', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $unitPrice,
            'unit-price', // param base name
            'number', // openApiType
            'form', // style
            true, // explode
            true // required
        ) ?? []);


        // path params
        if ($ean !== null) {
            $resourcePath = str_replace(
                '{' . 'ean' . '}',
                ObjectSerializer::toPathValue($ean),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/vnd.retailer.v8+json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires Bearer authentication (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getCommissions
     *
     * Get all commissions and reductions by EAN in bulk
     *
     * @param  \ThisIsDevelopment\OpenApi\Bol\Retailer\Models\BulkCommissionRequest $bulkCommissionRequest bulkCommissionRequest (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getCommissions'] to see the possible values for this operation
     *
     * @throws \ThisIsDevelopment\OpenApi\Bol\Retailer\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \ThisIsDevelopment\OpenApi\Bol\Retailer\Models\BulkCommissionResponse|\ThisIsDevelopment\OpenApi\Bol\Retailer\Models\Problem|\ThisIsDevelopment\OpenApi\Bol\Retailer\Models\Problem
     */
    public function getCommissions($bulkCommissionRequest, string $contentType = self::contentTypes['getCommissions'][0])
    {
        list($response) = $this->getCommissionsWithHttpInfo($bulkCommissionRequest, $contentType);
        return $response;
    }

    /**
     * Operation getCommissionsWithHttpInfo
     *
     * Get all commissions and reductions by EAN in bulk
     *
     * @param  \ThisIsDevelopment\OpenApi\Bol\Retailer\Models\BulkCommissionRequest $bulkCommissionRequest (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getCommissions'] to see the possible values for this operation
     *
     * @throws \ThisIsDevelopment\OpenApi\Bol\Retailer\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \ThisIsDevelopment\OpenApi\Bol\Retailer\Models\BulkCommissionResponse|\ThisIsDevelopment\OpenApi\Bol\Retailer\Models\Problem|\ThisIsDevelopment\OpenApi\Bol\Retailer\Models\Problem, HTTP status code, HTTP response headers (array of strings)
     */
    public function getCommissionsWithHttpInfo($bulkCommissionRequest, string $contentType = self::contentTypes['getCommissions'][0])
    {
        $request = $this->getCommissionsRequest($bulkCommissionRequest, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\ThisIsDevelopment\OpenApi\Bol\Retailer\Models\BulkCommissionResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\ThisIsDevelopment\OpenApi\Bol\Retailer\Models\BulkCommissionResponse' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\ThisIsDevelopment\OpenApi\Bol\Retailer\Models\BulkCommissionResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 400:
                    if ('\ThisIsDevelopment\OpenApi\Bol\Retailer\Models\Problem' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\ThisIsDevelopment\OpenApi\Bol\Retailer\Models\Problem' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\ThisIsDevelopment\OpenApi\Bol\Retailer\Models\Problem', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 404:
                    if ('\ThisIsDevelopment\OpenApi\Bol\Retailer\Models\Problem' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\ThisIsDevelopment\OpenApi\Bol\Retailer\Models\Problem' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\ThisIsDevelopment\OpenApi\Bol\Retailer\Models\Problem', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\ThisIsDevelopment\OpenApi\Bol\Retailer\Models\BulkCommissionResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ThisIsDevelopment\OpenApi\Bol\Retailer\Models\BulkCommissionResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ThisIsDevelopment\OpenApi\Bol\Retailer\Models\Problem',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ThisIsDevelopment\OpenApi\Bol\Retailer\Models\Problem',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getCommissionsAsync
     *
     * Get all commissions and reductions by EAN in bulk
     *
     * @param  \ThisIsDevelopment\OpenApi\Bol\Retailer\Models\BulkCommissionRequest $bulkCommissionRequest (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getCommissions'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getCommissionsAsync($bulkCommissionRequest, string $contentType = self::contentTypes['getCommissions'][0])
    {
        return $this->getCommissionsAsyncWithHttpInfo($bulkCommissionRequest, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getCommissionsAsyncWithHttpInfo
     *
     * Get all commissions and reductions by EAN in bulk
     *
     * @param  \ThisIsDevelopment\OpenApi\Bol\Retailer\Models\BulkCommissionRequest $bulkCommissionRequest (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getCommissions'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getCommissionsAsyncWithHttpInfo($bulkCommissionRequest, string $contentType = self::contentTypes['getCommissions'][0])
    {
        $returnType = '\ThisIsDevelopment\OpenApi\Bol\Retailer\Models\BulkCommissionResponse';
        $request = $this->getCommissionsRequest($bulkCommissionRequest, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getCommissions'
     *
     * @param  \ThisIsDevelopment\OpenApi\Bol\Retailer\Models\BulkCommissionRequest $bulkCommissionRequest (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getCommissions'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getCommissionsRequest($bulkCommissionRequest, string $contentType = self::contentTypes['getCommissions'][0])
    {

        // verify the required parameter 'bulkCommissionRequest' is set
        if ($bulkCommissionRequest === null || (is_array($bulkCommissionRequest) && count($bulkCommissionRequest) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $bulkCommissionRequest when calling getCommissions'
            );
        }


        $resourcePath = '/retailer/commission';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;





        $headers = $this->headerSelector->selectHeaders(
            ['application/vnd.retailer.v8+json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($bulkCommissionRequest)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($bulkCommissionRequest));
            } else {
                $httpBody = $bulkCommissionRequest;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires Bearer authentication (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }
}
