<?php
/**
 * ReplenishmentsApi
 * PHP version 7.4
 *
 * @category Class
 * @package  ThisIsDevelopment\OpenApi\Bol\Retailer
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * v9 - Retailer API
 *
 * The bol.com API for retailers.  # Authentication Our API requires authentication via OAuth2. The detailed steps to authenticate are explained [here](https://api.bol.com/retailer/public/Retailer-API/authentication.html)   # Demo scenarios Our API specification includes examples of the responses you can expect. For more information as well as more examples, we refer you to the following resources:   - [Demo environment](https://api.bol.com/retailer/public/Retailer-API/demo/demo.html) - [Demo scenarios](https://api.bol.com/retailer/public/Retailer-API/demo/v9-index.html)
 *
 * The version of the OpenAPI document: 9.x
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 7.3.0-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace ThisIsDevelopment\OpenApi\Bol\Retailer\Api;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\ConnectException;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use ThisIsDevelopment\OpenApi\Bol\Retailer\ApiException;
use ThisIsDevelopment\OpenApi\Bol\Retailer\Configuration;
use ThisIsDevelopment\OpenApi\Bol\Retailer\HeaderSelector;
use ThisIsDevelopment\OpenApi\Bol\Retailer\ObjectSerializer;

/**
 * ReplenishmentsApi Class Doc Comment
 *
 * @category Class
 * @package  ThisIsDevelopment\OpenApi\Bol\Retailer
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class ReplenishmentsApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * @var int Host index
     */
    protected $hostIndex;

    /** @var string[] $contentTypes **/
    public const contentTypes = [
        'getDeliveryDates' => [
            'application/json',
        ],
        'getLoadCarrierLabels' => [
            'application/json',
        ],
        'getPickList' => [
            'application/json',
        ],
        'getProductDestinations' => [
            'application/json',
        ],
        'getReplenishment' => [
            'application/json',
        ],
        'getReplenishments' => [
            'application/json',
        ],
        'postPickupTimeSlots' => [
            'application/vnd.retailer.v9+json',
        ],
        'postProductLabels' => [
            'application/vnd.retailer.v9+json',
        ],
        'postReplenishment' => [
            'application/vnd.retailer.v9+json',
        ],
        'postRequestProductDestinations' => [
            'application/vnd.retailer.v9+json',
        ],
        'putReplenishment' => [
            'application/vnd.retailer.v9+json',
        ],
    ];

    /**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     * @param int             $hostIndex (Optional) host index to select the list of hosts if defined in the OpenAPI spec
     */
    public function __construct(
        ClientInterface $client = null,
        Configuration $config = null,
        HeaderSelector $selector = null,
        $hostIndex = 0
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: new Configuration();
        $this->headerSelector = $selector ?: new HeaderSelector();
        $this->hostIndex = $hostIndex;
    }

    /**
     * Set the host index
     *
     * @param int $hostIndex Host index (required)
     */
    public function setHostIndex($hostIndex): void
    {
        $this->hostIndex = $hostIndex;
    }

    /**
     * Get the host index
     *
     * @return int Host index
     */
    public function getHostIndex()
    {
        return $this->hostIndex;
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation getDeliveryDates
     *
     * Get delivery dates
     *
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getDeliveryDates'] to see the possible values for this operation
     *
     * @throws \ThisIsDevelopment\OpenApi\Bol\Retailer\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \ThisIsDevelopment\OpenApi\Bol\Retailer\Models\DeliveryDatesResponse|\ThisIsDevelopment\OpenApi\Bol\Retailer\Models\Problem
     */
    public function getDeliveryDates(string $contentType = self::contentTypes['getDeliveryDates'][0])
    {
        list($response) = $this->getDeliveryDatesWithHttpInfo($contentType);
        return $response;
    }

    /**
     * Operation getDeliveryDatesWithHttpInfo
     *
     * Get delivery dates
     *
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getDeliveryDates'] to see the possible values for this operation
     *
     * @throws \ThisIsDevelopment\OpenApi\Bol\Retailer\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \ThisIsDevelopment\OpenApi\Bol\Retailer\Models\DeliveryDatesResponse|\ThisIsDevelopment\OpenApi\Bol\Retailer\Models\Problem, HTTP status code, HTTP response headers (array of strings)
     */
    public function getDeliveryDatesWithHttpInfo(string $contentType = self::contentTypes['getDeliveryDates'][0])
    {
        $request = $this->getDeliveryDatesRequest($contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\ThisIsDevelopment\OpenApi\Bol\Retailer\Models\DeliveryDatesResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\ThisIsDevelopment\OpenApi\Bol\Retailer\Models\DeliveryDatesResponse' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\ThisIsDevelopment\OpenApi\Bol\Retailer\Models\DeliveryDatesResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 400:
                    if ('\ThisIsDevelopment\OpenApi\Bol\Retailer\Models\Problem' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\ThisIsDevelopment\OpenApi\Bol\Retailer\Models\Problem' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\ThisIsDevelopment\OpenApi\Bol\Retailer\Models\Problem', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\ThisIsDevelopment\OpenApi\Bol\Retailer\Models\DeliveryDatesResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ThisIsDevelopment\OpenApi\Bol\Retailer\Models\DeliveryDatesResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ThisIsDevelopment\OpenApi\Bol\Retailer\Models\Problem',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getDeliveryDatesAsync
     *
     * Get delivery dates
     *
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getDeliveryDates'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getDeliveryDatesAsync(string $contentType = self::contentTypes['getDeliveryDates'][0])
    {
        return $this->getDeliveryDatesAsyncWithHttpInfo($contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getDeliveryDatesAsyncWithHttpInfo
     *
     * Get delivery dates
     *
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getDeliveryDates'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getDeliveryDatesAsyncWithHttpInfo(string $contentType = self::contentTypes['getDeliveryDates'][0])
    {
        $returnType = '\ThisIsDevelopment\OpenApi\Bol\Retailer\Models\DeliveryDatesResponse';
        $request = $this->getDeliveryDatesRequest($contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getDeliveryDates'
     *
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getDeliveryDates'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getDeliveryDatesRequest(string $contentType = self::contentTypes['getDeliveryDates'][0])
    {


        $resourcePath = '/retailer/replenishments/delivery-dates';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;





        $headers = $this->headerSelector->selectHeaders(
            ['application/vnd.retailer.v9+json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires Bearer authentication (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getLoadCarrierLabels
     *
     * Get load carrier labels
     *
     * @param  string $replenishmentId The unique identifier of the replenishment. (required)
     * @param  string $labelType The type of label which you want to print. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getLoadCarrierLabels'] to see the possible values for this operation
     *
     * @throws \ThisIsDevelopment\OpenApi\Bol\Retailer\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return string|\ThisIsDevelopment\OpenApi\Bol\Retailer\Models\Problem|\ThisIsDevelopment\OpenApi\Bol\Retailer\Models\Problem
     */
    public function getLoadCarrierLabels($replenishmentId, $labelType = null, string $contentType = self::contentTypes['getLoadCarrierLabels'][0])
    {
        list($response) = $this->getLoadCarrierLabelsWithHttpInfo($replenishmentId, $labelType, $contentType);
        return $response;
    }

    /**
     * Operation getLoadCarrierLabelsWithHttpInfo
     *
     * Get load carrier labels
     *
     * @param  string $replenishmentId The unique identifier of the replenishment. (required)
     * @param  string $labelType The type of label which you want to print. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getLoadCarrierLabels'] to see the possible values for this operation
     *
     * @throws \ThisIsDevelopment\OpenApi\Bol\Retailer\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of string|\ThisIsDevelopment\OpenApi\Bol\Retailer\Models\Problem|\ThisIsDevelopment\OpenApi\Bol\Retailer\Models\Problem, HTTP status code, HTTP response headers (array of strings)
     */
    public function getLoadCarrierLabelsWithHttpInfo($replenishmentId, $labelType = null, string $contentType = self::contentTypes['getLoadCarrierLabels'][0])
    {
        $request = $this->getLoadCarrierLabelsRequest($replenishmentId, $labelType, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('string' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('string' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, 'string', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 404:
                    if ('\ThisIsDevelopment\OpenApi\Bol\Retailer\Models\Problem' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\ThisIsDevelopment\OpenApi\Bol\Retailer\Models\Problem' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\ThisIsDevelopment\OpenApi\Bol\Retailer\Models\Problem', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 400:
                    if ('\ThisIsDevelopment\OpenApi\Bol\Retailer\Models\Problem' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\ThisIsDevelopment\OpenApi\Bol\Retailer\Models\Problem' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\ThisIsDevelopment\OpenApi\Bol\Retailer\Models\Problem', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = 'string';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'string',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ThisIsDevelopment\OpenApi\Bol\Retailer\Models\Problem',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ThisIsDevelopment\OpenApi\Bol\Retailer\Models\Problem',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getLoadCarrierLabelsAsync
     *
     * Get load carrier labels
     *
     * @param  string $replenishmentId The unique identifier of the replenishment. (required)
     * @param  string $labelType The type of label which you want to print. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getLoadCarrierLabels'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getLoadCarrierLabelsAsync($replenishmentId, $labelType = null, string $contentType = self::contentTypes['getLoadCarrierLabels'][0])
    {
        return $this->getLoadCarrierLabelsAsyncWithHttpInfo($replenishmentId, $labelType, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getLoadCarrierLabelsAsyncWithHttpInfo
     *
     * Get load carrier labels
     *
     * @param  string $replenishmentId The unique identifier of the replenishment. (required)
     * @param  string $labelType The type of label which you want to print. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getLoadCarrierLabels'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getLoadCarrierLabelsAsyncWithHttpInfo($replenishmentId, $labelType = null, string $contentType = self::contentTypes['getLoadCarrierLabels'][0])
    {
        $returnType = 'string';
        $request = $this->getLoadCarrierLabelsRequest($replenishmentId, $labelType, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getLoadCarrierLabels'
     *
     * @param  string $replenishmentId The unique identifier of the replenishment. (required)
     * @param  string $labelType The type of label which you want to print. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getLoadCarrierLabels'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getLoadCarrierLabelsRequest($replenishmentId, $labelType = null, string $contentType = self::contentTypes['getLoadCarrierLabels'][0])
    {

        // verify the required parameter 'replenishmentId' is set
        if ($replenishmentId === null || (is_array($replenishmentId) && count($replenishmentId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $replenishmentId when calling getLoadCarrierLabels'
            );
        }



        $resourcePath = '/retailer/replenishments/{replenishment-id}/load-carrier-labels';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $labelType,
            'label-type', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);


        // path params
        if ($replenishmentId !== null) {
            $resourcePath = str_replace(
                '{' . 'replenishment-id' . '}',
                ObjectSerializer::toPathValue($replenishmentId),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/vnd.retailer.v9+pdf', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires Bearer authentication (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getPickList
     *
     * Get pick list
     *
     * @param  string $replenishmentId The unique identifier of the replenishment. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getPickList'] to see the possible values for this operation
     *
     * @throws \ThisIsDevelopment\OpenApi\Bol\Retailer\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return string|\ThisIsDevelopment\OpenApi\Bol\Retailer\Models\Problem|\ThisIsDevelopment\OpenApi\Bol\Retailer\Models\Problem
     */
    public function getPickList($replenishmentId, string $contentType = self::contentTypes['getPickList'][0])
    {
        list($response) = $this->getPickListWithHttpInfo($replenishmentId, $contentType);
        return $response;
    }

    /**
     * Operation getPickListWithHttpInfo
     *
     * Get pick list
     *
     * @param  string $replenishmentId The unique identifier of the replenishment. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getPickList'] to see the possible values for this operation
     *
     * @throws \ThisIsDevelopment\OpenApi\Bol\Retailer\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of string|\ThisIsDevelopment\OpenApi\Bol\Retailer\Models\Problem|\ThisIsDevelopment\OpenApi\Bol\Retailer\Models\Problem, HTTP status code, HTTP response headers (array of strings)
     */
    public function getPickListWithHttpInfo($replenishmentId, string $contentType = self::contentTypes['getPickList'][0])
    {
        $request = $this->getPickListRequest($replenishmentId, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('string' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('string' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, 'string', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 404:
                    if ('\ThisIsDevelopment\OpenApi\Bol\Retailer\Models\Problem' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\ThisIsDevelopment\OpenApi\Bol\Retailer\Models\Problem' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\ThisIsDevelopment\OpenApi\Bol\Retailer\Models\Problem', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 400:
                    if ('\ThisIsDevelopment\OpenApi\Bol\Retailer\Models\Problem' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\ThisIsDevelopment\OpenApi\Bol\Retailer\Models\Problem' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\ThisIsDevelopment\OpenApi\Bol\Retailer\Models\Problem', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = 'string';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'string',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ThisIsDevelopment\OpenApi\Bol\Retailer\Models\Problem',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ThisIsDevelopment\OpenApi\Bol\Retailer\Models\Problem',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getPickListAsync
     *
     * Get pick list
     *
     * @param  string $replenishmentId The unique identifier of the replenishment. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getPickList'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getPickListAsync($replenishmentId, string $contentType = self::contentTypes['getPickList'][0])
    {
        return $this->getPickListAsyncWithHttpInfo($replenishmentId, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getPickListAsyncWithHttpInfo
     *
     * Get pick list
     *
     * @param  string $replenishmentId The unique identifier of the replenishment. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getPickList'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getPickListAsyncWithHttpInfo($replenishmentId, string $contentType = self::contentTypes['getPickList'][0])
    {
        $returnType = 'string';
        $request = $this->getPickListRequest($replenishmentId, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getPickList'
     *
     * @param  string $replenishmentId The unique identifier of the replenishment. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getPickList'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getPickListRequest($replenishmentId, string $contentType = self::contentTypes['getPickList'][0])
    {

        // verify the required parameter 'replenishmentId' is set
        if ($replenishmentId === null || (is_array($replenishmentId) && count($replenishmentId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $replenishmentId when calling getPickList'
            );
        }


        $resourcePath = '/retailer/replenishments/{replenishment-id}/pick-list';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($replenishmentId !== null) {
            $resourcePath = str_replace(
                '{' . 'replenishment-id' . '}',
                ObjectSerializer::toPathValue($replenishmentId),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/vnd.retailer.v9+pdf', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires Bearer authentication (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getProductDestinations
     *
     * Get product destinations by product destinations id
     *
     * @param  string $productDestinationsId The identifier of the product destinations requested. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getProductDestinations'] to see the possible values for this operation
     *
     * @throws \ThisIsDevelopment\OpenApi\Bol\Retailer\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \ThisIsDevelopment\OpenApi\Bol\Retailer\Models\ProductDestinationsResponse|\ThisIsDevelopment\OpenApi\Bol\Retailer\Models\Problem|\ThisIsDevelopment\OpenApi\Bol\Retailer\Models\Problem
     */
    public function getProductDestinations($productDestinationsId, string $contentType = self::contentTypes['getProductDestinations'][0])
    {
        list($response) = $this->getProductDestinationsWithHttpInfo($productDestinationsId, $contentType);
        return $response;
    }

    /**
     * Operation getProductDestinationsWithHttpInfo
     *
     * Get product destinations by product destinations id
     *
     * @param  string $productDestinationsId The identifier of the product destinations requested. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getProductDestinations'] to see the possible values for this operation
     *
     * @throws \ThisIsDevelopment\OpenApi\Bol\Retailer\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \ThisIsDevelopment\OpenApi\Bol\Retailer\Models\ProductDestinationsResponse|\ThisIsDevelopment\OpenApi\Bol\Retailer\Models\Problem|\ThisIsDevelopment\OpenApi\Bol\Retailer\Models\Problem, HTTP status code, HTTP response headers (array of strings)
     */
    public function getProductDestinationsWithHttpInfo($productDestinationsId, string $contentType = self::contentTypes['getProductDestinations'][0])
    {
        $request = $this->getProductDestinationsRequest($productDestinationsId, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\ThisIsDevelopment\OpenApi\Bol\Retailer\Models\ProductDestinationsResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\ThisIsDevelopment\OpenApi\Bol\Retailer\Models\ProductDestinationsResponse' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\ThisIsDevelopment\OpenApi\Bol\Retailer\Models\ProductDestinationsResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 400:
                    if ('\ThisIsDevelopment\OpenApi\Bol\Retailer\Models\Problem' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\ThisIsDevelopment\OpenApi\Bol\Retailer\Models\Problem' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\ThisIsDevelopment\OpenApi\Bol\Retailer\Models\Problem', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 404:
                    if ('\ThisIsDevelopment\OpenApi\Bol\Retailer\Models\Problem' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\ThisIsDevelopment\OpenApi\Bol\Retailer\Models\Problem' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\ThisIsDevelopment\OpenApi\Bol\Retailer\Models\Problem', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\ThisIsDevelopment\OpenApi\Bol\Retailer\Models\ProductDestinationsResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ThisIsDevelopment\OpenApi\Bol\Retailer\Models\ProductDestinationsResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ThisIsDevelopment\OpenApi\Bol\Retailer\Models\Problem',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ThisIsDevelopment\OpenApi\Bol\Retailer\Models\Problem',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getProductDestinationsAsync
     *
     * Get product destinations by product destinations id
     *
     * @param  string $productDestinationsId The identifier of the product destinations requested. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getProductDestinations'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getProductDestinationsAsync($productDestinationsId, string $contentType = self::contentTypes['getProductDestinations'][0])
    {
        return $this->getProductDestinationsAsyncWithHttpInfo($productDestinationsId, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getProductDestinationsAsyncWithHttpInfo
     *
     * Get product destinations by product destinations id
     *
     * @param  string $productDestinationsId The identifier of the product destinations requested. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getProductDestinations'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getProductDestinationsAsyncWithHttpInfo($productDestinationsId, string $contentType = self::contentTypes['getProductDestinations'][0])
    {
        $returnType = '\ThisIsDevelopment\OpenApi\Bol\Retailer\Models\ProductDestinationsResponse';
        $request = $this->getProductDestinationsRequest($productDestinationsId, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getProductDestinations'
     *
     * @param  string $productDestinationsId The identifier of the product destinations requested. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getProductDestinations'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getProductDestinationsRequest($productDestinationsId, string $contentType = self::contentTypes['getProductDestinations'][0])
    {

        // verify the required parameter 'productDestinationsId' is set
        if ($productDestinationsId === null || (is_array($productDestinationsId) && count($productDestinationsId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $productDestinationsId when calling getProductDestinations'
            );
        }


        $resourcePath = '/retailer/replenishments/product-destinations/{product-destinations-id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($productDestinationsId !== null) {
            $resourcePath = str_replace(
                '{' . 'product-destinations-id' . '}',
                ObjectSerializer::toPathValue($productDestinationsId),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/vnd.retailer.v9+json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires Bearer authentication (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getReplenishment
     *
     * Get a replenishment by replenishment id
     *
     * @param  string $replenishmentId The unique identifier of the replenishment. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getReplenishment'] to see the possible values for this operation
     *
     * @throws \ThisIsDevelopment\OpenApi\Bol\Retailer\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \ThisIsDevelopment\OpenApi\Bol\Retailer\Models\ReplenishmentResponse|\ThisIsDevelopment\OpenApi\Bol\Retailer\Models\Problem|\ThisIsDevelopment\OpenApi\Bol\Retailer\Models\Problem
     */
    public function getReplenishment($replenishmentId, string $contentType = self::contentTypes['getReplenishment'][0])
    {
        list($response) = $this->getReplenishmentWithHttpInfo($replenishmentId, $contentType);
        return $response;
    }

    /**
     * Operation getReplenishmentWithHttpInfo
     *
     * Get a replenishment by replenishment id
     *
     * @param  string $replenishmentId The unique identifier of the replenishment. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getReplenishment'] to see the possible values for this operation
     *
     * @throws \ThisIsDevelopment\OpenApi\Bol\Retailer\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \ThisIsDevelopment\OpenApi\Bol\Retailer\Models\ReplenishmentResponse|\ThisIsDevelopment\OpenApi\Bol\Retailer\Models\Problem|\ThisIsDevelopment\OpenApi\Bol\Retailer\Models\Problem, HTTP status code, HTTP response headers (array of strings)
     */
    public function getReplenishmentWithHttpInfo($replenishmentId, string $contentType = self::contentTypes['getReplenishment'][0])
    {
        $request = $this->getReplenishmentRequest($replenishmentId, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\ThisIsDevelopment\OpenApi\Bol\Retailer\Models\ReplenishmentResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\ThisIsDevelopment\OpenApi\Bol\Retailer\Models\ReplenishmentResponse' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\ThisIsDevelopment\OpenApi\Bol\Retailer\Models\ReplenishmentResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 404:
                    if ('\ThisIsDevelopment\OpenApi\Bol\Retailer\Models\Problem' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\ThisIsDevelopment\OpenApi\Bol\Retailer\Models\Problem' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\ThisIsDevelopment\OpenApi\Bol\Retailer\Models\Problem', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 400:
                    if ('\ThisIsDevelopment\OpenApi\Bol\Retailer\Models\Problem' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\ThisIsDevelopment\OpenApi\Bol\Retailer\Models\Problem' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\ThisIsDevelopment\OpenApi\Bol\Retailer\Models\Problem', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\ThisIsDevelopment\OpenApi\Bol\Retailer\Models\ReplenishmentResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ThisIsDevelopment\OpenApi\Bol\Retailer\Models\ReplenishmentResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ThisIsDevelopment\OpenApi\Bol\Retailer\Models\Problem',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ThisIsDevelopment\OpenApi\Bol\Retailer\Models\Problem',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getReplenishmentAsync
     *
     * Get a replenishment by replenishment id
     *
     * @param  string $replenishmentId The unique identifier of the replenishment. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getReplenishment'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getReplenishmentAsync($replenishmentId, string $contentType = self::contentTypes['getReplenishment'][0])
    {
        return $this->getReplenishmentAsyncWithHttpInfo($replenishmentId, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getReplenishmentAsyncWithHttpInfo
     *
     * Get a replenishment by replenishment id
     *
     * @param  string $replenishmentId The unique identifier of the replenishment. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getReplenishment'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getReplenishmentAsyncWithHttpInfo($replenishmentId, string $contentType = self::contentTypes['getReplenishment'][0])
    {
        $returnType = '\ThisIsDevelopment\OpenApi\Bol\Retailer\Models\ReplenishmentResponse';
        $request = $this->getReplenishmentRequest($replenishmentId, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getReplenishment'
     *
     * @param  string $replenishmentId The unique identifier of the replenishment. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getReplenishment'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getReplenishmentRequest($replenishmentId, string $contentType = self::contentTypes['getReplenishment'][0])
    {

        // verify the required parameter 'replenishmentId' is set
        if ($replenishmentId === null || (is_array($replenishmentId) && count($replenishmentId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $replenishmentId when calling getReplenishment'
            );
        }


        $resourcePath = '/retailer/replenishments/{replenishment-id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($replenishmentId !== null) {
            $resourcePath = str_replace(
                '{' . 'replenishment-id' . '}',
                ObjectSerializer::toPathValue($replenishmentId),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/vnd.retailer.v9+json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires Bearer authentication (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getReplenishments
     *
     * Get replenishments
     *
     * @param  string $reference Custom user defined reference to identify the replenishment. (optional)
     * @param  string $ean The EAN number associated with this product. (optional)
     * @param  string $startDate The creation start date to find the replenishment. In ISO 8601 format. (optional)
     * @param  string $endDate The end date of the range to find the replenishment. In ISO 8601 format. (optional)
     * @param  string[] $state The current state(s) of the replenishment. (optional)
     * @param  int $page The requested page number with a page size of 50 items. (optional, default to 1)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getReplenishments'] to see the possible values for this operation
     *
     * @throws \ThisIsDevelopment\OpenApi\Bol\Retailer\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \ThisIsDevelopment\OpenApi\Bol\Retailer\Models\ReplenishmentsResponse|\ThisIsDevelopment\OpenApi\Bol\Retailer\Models\Problem
     */
    public function getReplenishments($reference = null, $ean = null, $startDate = null, $endDate = null, $state = null, $page = 1, string $contentType = self::contentTypes['getReplenishments'][0])
    {
        list($response) = $this->getReplenishmentsWithHttpInfo($reference, $ean, $startDate, $endDate, $state, $page, $contentType);
        return $response;
    }

    /**
     * Operation getReplenishmentsWithHttpInfo
     *
     * Get replenishments
     *
     * @param  string $reference Custom user defined reference to identify the replenishment. (optional)
     * @param  string $ean The EAN number associated with this product. (optional)
     * @param  string $startDate The creation start date to find the replenishment. In ISO 8601 format. (optional)
     * @param  string $endDate The end date of the range to find the replenishment. In ISO 8601 format. (optional)
     * @param  string[] $state The current state(s) of the replenishment. (optional)
     * @param  int $page The requested page number with a page size of 50 items. (optional, default to 1)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getReplenishments'] to see the possible values for this operation
     *
     * @throws \ThisIsDevelopment\OpenApi\Bol\Retailer\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \ThisIsDevelopment\OpenApi\Bol\Retailer\Models\ReplenishmentsResponse|\ThisIsDevelopment\OpenApi\Bol\Retailer\Models\Problem, HTTP status code, HTTP response headers (array of strings)
     */
    public function getReplenishmentsWithHttpInfo($reference = null, $ean = null, $startDate = null, $endDate = null, $state = null, $page = 1, string $contentType = self::contentTypes['getReplenishments'][0])
    {
        $request = $this->getReplenishmentsRequest($reference, $ean, $startDate, $endDate, $state, $page, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\ThisIsDevelopment\OpenApi\Bol\Retailer\Models\ReplenishmentsResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\ThisIsDevelopment\OpenApi\Bol\Retailer\Models\ReplenishmentsResponse' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\ThisIsDevelopment\OpenApi\Bol\Retailer\Models\ReplenishmentsResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 400:
                    if ('\ThisIsDevelopment\OpenApi\Bol\Retailer\Models\Problem' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\ThisIsDevelopment\OpenApi\Bol\Retailer\Models\Problem' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\ThisIsDevelopment\OpenApi\Bol\Retailer\Models\Problem', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\ThisIsDevelopment\OpenApi\Bol\Retailer\Models\ReplenishmentsResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ThisIsDevelopment\OpenApi\Bol\Retailer\Models\ReplenishmentsResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ThisIsDevelopment\OpenApi\Bol\Retailer\Models\Problem',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getReplenishmentsAsync
     *
     * Get replenishments
     *
     * @param  string $reference Custom user defined reference to identify the replenishment. (optional)
     * @param  string $ean The EAN number associated with this product. (optional)
     * @param  string $startDate The creation start date to find the replenishment. In ISO 8601 format. (optional)
     * @param  string $endDate The end date of the range to find the replenishment. In ISO 8601 format. (optional)
     * @param  string[] $state The current state(s) of the replenishment. (optional)
     * @param  int $page The requested page number with a page size of 50 items. (optional, default to 1)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getReplenishments'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getReplenishmentsAsync($reference = null, $ean = null, $startDate = null, $endDate = null, $state = null, $page = 1, string $contentType = self::contentTypes['getReplenishments'][0])
    {
        return $this->getReplenishmentsAsyncWithHttpInfo($reference, $ean, $startDate, $endDate, $state, $page, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getReplenishmentsAsyncWithHttpInfo
     *
     * Get replenishments
     *
     * @param  string $reference Custom user defined reference to identify the replenishment. (optional)
     * @param  string $ean The EAN number associated with this product. (optional)
     * @param  string $startDate The creation start date to find the replenishment. In ISO 8601 format. (optional)
     * @param  string $endDate The end date of the range to find the replenishment. In ISO 8601 format. (optional)
     * @param  string[] $state The current state(s) of the replenishment. (optional)
     * @param  int $page The requested page number with a page size of 50 items. (optional, default to 1)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getReplenishments'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getReplenishmentsAsyncWithHttpInfo($reference = null, $ean = null, $startDate = null, $endDate = null, $state = null, $page = 1, string $contentType = self::contentTypes['getReplenishments'][0])
    {
        $returnType = '\ThisIsDevelopment\OpenApi\Bol\Retailer\Models\ReplenishmentsResponse';
        $request = $this->getReplenishmentsRequest($reference, $ean, $startDate, $endDate, $state, $page, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getReplenishments'
     *
     * @param  string $reference Custom user defined reference to identify the replenishment. (optional)
     * @param  string $ean The EAN number associated with this product. (optional)
     * @param  string $startDate The creation start date to find the replenishment. In ISO 8601 format. (optional)
     * @param  string $endDate The end date of the range to find the replenishment. In ISO 8601 format. (optional)
     * @param  string[] $state The current state(s) of the replenishment. (optional)
     * @param  int $page The requested page number with a page size of 50 items. (optional, default to 1)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getReplenishments'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getReplenishmentsRequest($reference = null, $ean = null, $startDate = null, $endDate = null, $state = null, $page = 1, string $contentType = self::contentTypes['getReplenishments'][0])
    {






        if ($page !== null && $page < 1) {
            throw new \InvalidArgumentException('invalid value for "$page" when calling ReplenishmentsApi.getReplenishments, must be bigger than or equal to 1.');
        }
        

        $resourcePath = '/retailer/replenishments';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $reference,
            'reference', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $ean,
            'ean', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $startDate,
            'start-date', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $endDate,
            'end-date', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $state,
            'state', // param base name
            'array', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $page,
            'page', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);




        $headers = $this->headerSelector->selectHeaders(
            ['application/vnd.retailer.v9+json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires Bearer authentication (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation postPickupTimeSlots
     *
     * Post pickup time slots
     *
     * @param  \ThisIsDevelopment\OpenApi\Bol\Retailer\Models\PickupTimeSlotsRequest $pickupTimeSlotsRequest pickupTimeSlotsRequest (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['postPickupTimeSlots'] to see the possible values for this operation
     *
     * @throws \ThisIsDevelopment\OpenApi\Bol\Retailer\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \ThisIsDevelopment\OpenApi\Bol\Retailer\Models\PickupTimeSlotsResponse|\ThisIsDevelopment\OpenApi\Bol\Retailer\Models\Problem
     */
    public function postPickupTimeSlots($pickupTimeSlotsRequest, string $contentType = self::contentTypes['postPickupTimeSlots'][0])
    {
        list($response) = $this->postPickupTimeSlotsWithHttpInfo($pickupTimeSlotsRequest, $contentType);
        return $response;
    }

    /**
     * Operation postPickupTimeSlotsWithHttpInfo
     *
     * Post pickup time slots
     *
     * @param  \ThisIsDevelopment\OpenApi\Bol\Retailer\Models\PickupTimeSlotsRequest $pickupTimeSlotsRequest (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['postPickupTimeSlots'] to see the possible values for this operation
     *
     * @throws \ThisIsDevelopment\OpenApi\Bol\Retailer\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \ThisIsDevelopment\OpenApi\Bol\Retailer\Models\PickupTimeSlotsResponse|\ThisIsDevelopment\OpenApi\Bol\Retailer\Models\Problem, HTTP status code, HTTP response headers (array of strings)
     */
    public function postPickupTimeSlotsWithHttpInfo($pickupTimeSlotsRequest, string $contentType = self::contentTypes['postPickupTimeSlots'][0])
    {
        $request = $this->postPickupTimeSlotsRequest($pickupTimeSlotsRequest, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\ThisIsDevelopment\OpenApi\Bol\Retailer\Models\PickupTimeSlotsResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\ThisIsDevelopment\OpenApi\Bol\Retailer\Models\PickupTimeSlotsResponse' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\ThisIsDevelopment\OpenApi\Bol\Retailer\Models\PickupTimeSlotsResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 400:
                    if ('\ThisIsDevelopment\OpenApi\Bol\Retailer\Models\Problem' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\ThisIsDevelopment\OpenApi\Bol\Retailer\Models\Problem' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\ThisIsDevelopment\OpenApi\Bol\Retailer\Models\Problem', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\ThisIsDevelopment\OpenApi\Bol\Retailer\Models\PickupTimeSlotsResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ThisIsDevelopment\OpenApi\Bol\Retailer\Models\PickupTimeSlotsResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ThisIsDevelopment\OpenApi\Bol\Retailer\Models\Problem',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation postPickupTimeSlotsAsync
     *
     * Post pickup time slots
     *
     * @param  \ThisIsDevelopment\OpenApi\Bol\Retailer\Models\PickupTimeSlotsRequest $pickupTimeSlotsRequest (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['postPickupTimeSlots'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function postPickupTimeSlotsAsync($pickupTimeSlotsRequest, string $contentType = self::contentTypes['postPickupTimeSlots'][0])
    {
        return $this->postPickupTimeSlotsAsyncWithHttpInfo($pickupTimeSlotsRequest, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation postPickupTimeSlotsAsyncWithHttpInfo
     *
     * Post pickup time slots
     *
     * @param  \ThisIsDevelopment\OpenApi\Bol\Retailer\Models\PickupTimeSlotsRequest $pickupTimeSlotsRequest (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['postPickupTimeSlots'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function postPickupTimeSlotsAsyncWithHttpInfo($pickupTimeSlotsRequest, string $contentType = self::contentTypes['postPickupTimeSlots'][0])
    {
        $returnType = '\ThisIsDevelopment\OpenApi\Bol\Retailer\Models\PickupTimeSlotsResponse';
        $request = $this->postPickupTimeSlotsRequest($pickupTimeSlotsRequest, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'postPickupTimeSlots'
     *
     * @param  \ThisIsDevelopment\OpenApi\Bol\Retailer\Models\PickupTimeSlotsRequest $pickupTimeSlotsRequest (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['postPickupTimeSlots'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function postPickupTimeSlotsRequest($pickupTimeSlotsRequest, string $contentType = self::contentTypes['postPickupTimeSlots'][0])
    {

        // verify the required parameter 'pickupTimeSlotsRequest' is set
        if ($pickupTimeSlotsRequest === null || (is_array($pickupTimeSlotsRequest) && count($pickupTimeSlotsRequest) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $pickupTimeSlotsRequest when calling postPickupTimeSlots'
            );
        }


        $resourcePath = '/retailer/replenishments/pickup-time-slots';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;





        $headers = $this->headerSelector->selectHeaders(
            ['application/vnd.retailer.v9+json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($pickupTimeSlotsRequest)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($pickupTimeSlotsRequest));
            } else {
                $httpBody = $pickupTimeSlotsRequest;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires Bearer authentication (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation postProductLabels
     *
     * Post product labels
     *
     * @param  \ThisIsDevelopment\OpenApi\Bol\Retailer\Models\ProductLabelsRequest $productLabelsRequest productLabelsRequest (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['postProductLabels'] to see the possible values for this operation
     *
     * @throws \ThisIsDevelopment\OpenApi\Bol\Retailer\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return string|\ThisIsDevelopment\OpenApi\Bol\Retailer\Models\Problem|\ThisIsDevelopment\OpenApi\Bol\Retailer\Models\Problem
     */
    public function postProductLabels($productLabelsRequest, string $contentType = self::contentTypes['postProductLabels'][0])
    {
        list($response) = $this->postProductLabelsWithHttpInfo($productLabelsRequest, $contentType);
        return $response;
    }

    /**
     * Operation postProductLabelsWithHttpInfo
     *
     * Post product labels
     *
     * @param  \ThisIsDevelopment\OpenApi\Bol\Retailer\Models\ProductLabelsRequest $productLabelsRequest (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['postProductLabels'] to see the possible values for this operation
     *
     * @throws \ThisIsDevelopment\OpenApi\Bol\Retailer\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of string|\ThisIsDevelopment\OpenApi\Bol\Retailer\Models\Problem|\ThisIsDevelopment\OpenApi\Bol\Retailer\Models\Problem, HTTP status code, HTTP response headers (array of strings)
     */
    public function postProductLabelsWithHttpInfo($productLabelsRequest, string $contentType = self::contentTypes['postProductLabels'][0])
    {
        $request = $this->postProductLabelsRequest($productLabelsRequest, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('string' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('string' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, 'string', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 404:
                    if ('\ThisIsDevelopment\OpenApi\Bol\Retailer\Models\Problem' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\ThisIsDevelopment\OpenApi\Bol\Retailer\Models\Problem' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\ThisIsDevelopment\OpenApi\Bol\Retailer\Models\Problem', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 400:
                    if ('\ThisIsDevelopment\OpenApi\Bol\Retailer\Models\Problem' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\ThisIsDevelopment\OpenApi\Bol\Retailer\Models\Problem' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\ThisIsDevelopment\OpenApi\Bol\Retailer\Models\Problem', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = 'string';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'string',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ThisIsDevelopment\OpenApi\Bol\Retailer\Models\Problem',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ThisIsDevelopment\OpenApi\Bol\Retailer\Models\Problem',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation postProductLabelsAsync
     *
     * Post product labels
     *
     * @param  \ThisIsDevelopment\OpenApi\Bol\Retailer\Models\ProductLabelsRequest $productLabelsRequest (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['postProductLabels'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function postProductLabelsAsync($productLabelsRequest, string $contentType = self::contentTypes['postProductLabels'][0])
    {
        return $this->postProductLabelsAsyncWithHttpInfo($productLabelsRequest, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation postProductLabelsAsyncWithHttpInfo
     *
     * Post product labels
     *
     * @param  \ThisIsDevelopment\OpenApi\Bol\Retailer\Models\ProductLabelsRequest $productLabelsRequest (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['postProductLabels'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function postProductLabelsAsyncWithHttpInfo($productLabelsRequest, string $contentType = self::contentTypes['postProductLabels'][0])
    {
        $returnType = 'string';
        $request = $this->postProductLabelsRequest($productLabelsRequest, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'postProductLabels'
     *
     * @param  \ThisIsDevelopment\OpenApi\Bol\Retailer\Models\ProductLabelsRequest $productLabelsRequest (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['postProductLabels'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function postProductLabelsRequest($productLabelsRequest, string $contentType = self::contentTypes['postProductLabels'][0])
    {

        // verify the required parameter 'productLabelsRequest' is set
        if ($productLabelsRequest === null || (is_array($productLabelsRequest) && count($productLabelsRequest) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $productLabelsRequest when calling postProductLabels'
            );
        }


        $resourcePath = '/retailer/replenishments/product-labels';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;





        $headers = $this->headerSelector->selectHeaders(
            ['application/vnd.retailer.v9+pdf', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($productLabelsRequest)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($productLabelsRequest));
            } else {
                $httpBody = $productLabelsRequest;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires Bearer authentication (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation postReplenishment
     *
     * Create a replenishment
     *
     * @param  \ThisIsDevelopment\OpenApi\Bol\Retailer\Models\CreateReplenishmentRequest $createReplenishmentRequest createReplenishmentRequest (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['postReplenishment'] to see the possible values for this operation
     *
     * @throws \ThisIsDevelopment\OpenApi\Bol\Retailer\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \ThisIsDevelopment\OpenApi\Bol\Retailer\Models\ProcessStatus|\ThisIsDevelopment\OpenApi\Bol\Retailer\Models\Problem
     */
    public function postReplenishment($createReplenishmentRequest, string $contentType = self::contentTypes['postReplenishment'][0])
    {
        list($response) = $this->postReplenishmentWithHttpInfo($createReplenishmentRequest, $contentType);
        return $response;
    }

    /**
     * Operation postReplenishmentWithHttpInfo
     *
     * Create a replenishment
     *
     * @param  \ThisIsDevelopment\OpenApi\Bol\Retailer\Models\CreateReplenishmentRequest $createReplenishmentRequest (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['postReplenishment'] to see the possible values for this operation
     *
     * @throws \ThisIsDevelopment\OpenApi\Bol\Retailer\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \ThisIsDevelopment\OpenApi\Bol\Retailer\Models\ProcessStatus|\ThisIsDevelopment\OpenApi\Bol\Retailer\Models\Problem, HTTP status code, HTTP response headers (array of strings)
     */
    public function postReplenishmentWithHttpInfo($createReplenishmentRequest, string $contentType = self::contentTypes['postReplenishment'][0])
    {
        $request = $this->postReplenishmentRequest($createReplenishmentRequest, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 202:
                    if ('\ThisIsDevelopment\OpenApi\Bol\Retailer\Models\ProcessStatus' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\ThisIsDevelopment\OpenApi\Bol\Retailer\Models\ProcessStatus' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\ThisIsDevelopment\OpenApi\Bol\Retailer\Models\ProcessStatus', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 400:
                    if ('\ThisIsDevelopment\OpenApi\Bol\Retailer\Models\Problem' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\ThisIsDevelopment\OpenApi\Bol\Retailer\Models\Problem' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\ThisIsDevelopment\OpenApi\Bol\Retailer\Models\Problem', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\ThisIsDevelopment\OpenApi\Bol\Retailer\Models\ProcessStatus';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 202:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ThisIsDevelopment\OpenApi\Bol\Retailer\Models\ProcessStatus',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ThisIsDevelopment\OpenApi\Bol\Retailer\Models\Problem',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation postReplenishmentAsync
     *
     * Create a replenishment
     *
     * @param  \ThisIsDevelopment\OpenApi\Bol\Retailer\Models\CreateReplenishmentRequest $createReplenishmentRequest (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['postReplenishment'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function postReplenishmentAsync($createReplenishmentRequest, string $contentType = self::contentTypes['postReplenishment'][0])
    {
        return $this->postReplenishmentAsyncWithHttpInfo($createReplenishmentRequest, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation postReplenishmentAsyncWithHttpInfo
     *
     * Create a replenishment
     *
     * @param  \ThisIsDevelopment\OpenApi\Bol\Retailer\Models\CreateReplenishmentRequest $createReplenishmentRequest (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['postReplenishment'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function postReplenishmentAsyncWithHttpInfo($createReplenishmentRequest, string $contentType = self::contentTypes['postReplenishment'][0])
    {
        $returnType = '\ThisIsDevelopment\OpenApi\Bol\Retailer\Models\ProcessStatus';
        $request = $this->postReplenishmentRequest($createReplenishmentRequest, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'postReplenishment'
     *
     * @param  \ThisIsDevelopment\OpenApi\Bol\Retailer\Models\CreateReplenishmentRequest $createReplenishmentRequest (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['postReplenishment'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function postReplenishmentRequest($createReplenishmentRequest, string $contentType = self::contentTypes['postReplenishment'][0])
    {

        // verify the required parameter 'createReplenishmentRequest' is set
        if ($createReplenishmentRequest === null || (is_array($createReplenishmentRequest) && count($createReplenishmentRequest) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $createReplenishmentRequest when calling postReplenishment'
            );
        }


        $resourcePath = '/retailer/replenishments';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;





        $headers = $this->headerSelector->selectHeaders(
            ['application/vnd.retailer.v9+json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($createReplenishmentRequest)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($createReplenishmentRequest));
            } else {
                $httpBody = $createReplenishmentRequest;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires Bearer authentication (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation postRequestProductDestinations
     *
     * Request product destinations
     *
     * @param  \ThisIsDevelopment\OpenApi\Bol\Retailer\Models\RequestProductDestinationsRequest $requestProductDestinationsRequest requestProductDestinationsRequest (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['postRequestProductDestinations'] to see the possible values for this operation
     *
     * @throws \ThisIsDevelopment\OpenApi\Bol\Retailer\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \ThisIsDevelopment\OpenApi\Bol\Retailer\Models\ProcessStatus|\ThisIsDevelopment\OpenApi\Bol\Retailer\Models\Problem
     */
    public function postRequestProductDestinations($requestProductDestinationsRequest, string $contentType = self::contentTypes['postRequestProductDestinations'][0])
    {
        list($response) = $this->postRequestProductDestinationsWithHttpInfo($requestProductDestinationsRequest, $contentType);
        return $response;
    }

    /**
     * Operation postRequestProductDestinationsWithHttpInfo
     *
     * Request product destinations
     *
     * @param  \ThisIsDevelopment\OpenApi\Bol\Retailer\Models\RequestProductDestinationsRequest $requestProductDestinationsRequest (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['postRequestProductDestinations'] to see the possible values for this operation
     *
     * @throws \ThisIsDevelopment\OpenApi\Bol\Retailer\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \ThisIsDevelopment\OpenApi\Bol\Retailer\Models\ProcessStatus|\ThisIsDevelopment\OpenApi\Bol\Retailer\Models\Problem, HTTP status code, HTTP response headers (array of strings)
     */
    public function postRequestProductDestinationsWithHttpInfo($requestProductDestinationsRequest, string $contentType = self::contentTypes['postRequestProductDestinations'][0])
    {
        $request = $this->postRequestProductDestinationsRequest($requestProductDestinationsRequest, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 202:
                    if ('\ThisIsDevelopment\OpenApi\Bol\Retailer\Models\ProcessStatus' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\ThisIsDevelopment\OpenApi\Bol\Retailer\Models\ProcessStatus' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\ThisIsDevelopment\OpenApi\Bol\Retailer\Models\ProcessStatus', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 400:
                    if ('\ThisIsDevelopment\OpenApi\Bol\Retailer\Models\Problem' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\ThisIsDevelopment\OpenApi\Bol\Retailer\Models\Problem' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\ThisIsDevelopment\OpenApi\Bol\Retailer\Models\Problem', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\ThisIsDevelopment\OpenApi\Bol\Retailer\Models\ProcessStatus';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 202:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ThisIsDevelopment\OpenApi\Bol\Retailer\Models\ProcessStatus',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ThisIsDevelopment\OpenApi\Bol\Retailer\Models\Problem',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation postRequestProductDestinationsAsync
     *
     * Request product destinations
     *
     * @param  \ThisIsDevelopment\OpenApi\Bol\Retailer\Models\RequestProductDestinationsRequest $requestProductDestinationsRequest (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['postRequestProductDestinations'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function postRequestProductDestinationsAsync($requestProductDestinationsRequest, string $contentType = self::contentTypes['postRequestProductDestinations'][0])
    {
        return $this->postRequestProductDestinationsAsyncWithHttpInfo($requestProductDestinationsRequest, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation postRequestProductDestinationsAsyncWithHttpInfo
     *
     * Request product destinations
     *
     * @param  \ThisIsDevelopment\OpenApi\Bol\Retailer\Models\RequestProductDestinationsRequest $requestProductDestinationsRequest (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['postRequestProductDestinations'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function postRequestProductDestinationsAsyncWithHttpInfo($requestProductDestinationsRequest, string $contentType = self::contentTypes['postRequestProductDestinations'][0])
    {
        $returnType = '\ThisIsDevelopment\OpenApi\Bol\Retailer\Models\ProcessStatus';
        $request = $this->postRequestProductDestinationsRequest($requestProductDestinationsRequest, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'postRequestProductDestinations'
     *
     * @param  \ThisIsDevelopment\OpenApi\Bol\Retailer\Models\RequestProductDestinationsRequest $requestProductDestinationsRequest (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['postRequestProductDestinations'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function postRequestProductDestinationsRequest($requestProductDestinationsRequest, string $contentType = self::contentTypes['postRequestProductDestinations'][0])
    {

        // verify the required parameter 'requestProductDestinationsRequest' is set
        if ($requestProductDestinationsRequest === null || (is_array($requestProductDestinationsRequest) && count($requestProductDestinationsRequest) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $requestProductDestinationsRequest when calling postRequestProductDestinations'
            );
        }


        $resourcePath = '/retailer/replenishments/product-destinations';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;





        $headers = $this->headerSelector->selectHeaders(
            ['application/vnd.retailer.v9+json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($requestProductDestinationsRequest)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($requestProductDestinationsRequest));
            } else {
                $httpBody = $requestProductDestinationsRequest;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires Bearer authentication (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation putReplenishment
     *
     * Update a replenishment by replenishment id
     *
     * @param  string $replenishmentId The unique identifier of the replenishment. (required)
     * @param  \ThisIsDevelopment\OpenApi\Bol\Retailer\Models\UpdateReplenishmentRequest $updateReplenishmentRequest updateReplenishmentRequest (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['putReplenishment'] to see the possible values for this operation
     *
     * @throws \ThisIsDevelopment\OpenApi\Bol\Retailer\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \ThisIsDevelopment\OpenApi\Bol\Retailer\Models\ProcessStatus|\ThisIsDevelopment\OpenApi\Bol\Retailer\Models\Problem
     */
    public function putReplenishment($replenishmentId, $updateReplenishmentRequest, string $contentType = self::contentTypes['putReplenishment'][0])
    {
        list($response) = $this->putReplenishmentWithHttpInfo($replenishmentId, $updateReplenishmentRequest, $contentType);
        return $response;
    }

    /**
     * Operation putReplenishmentWithHttpInfo
     *
     * Update a replenishment by replenishment id
     *
     * @param  string $replenishmentId The unique identifier of the replenishment. (required)
     * @param  \ThisIsDevelopment\OpenApi\Bol\Retailer\Models\UpdateReplenishmentRequest $updateReplenishmentRequest (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['putReplenishment'] to see the possible values for this operation
     *
     * @throws \ThisIsDevelopment\OpenApi\Bol\Retailer\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \ThisIsDevelopment\OpenApi\Bol\Retailer\Models\ProcessStatus|\ThisIsDevelopment\OpenApi\Bol\Retailer\Models\Problem, HTTP status code, HTTP response headers (array of strings)
     */
    public function putReplenishmentWithHttpInfo($replenishmentId, $updateReplenishmentRequest, string $contentType = self::contentTypes['putReplenishment'][0])
    {
        $request = $this->putReplenishmentRequest($replenishmentId, $updateReplenishmentRequest, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 202:
                    if ('\ThisIsDevelopment\OpenApi\Bol\Retailer\Models\ProcessStatus' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\ThisIsDevelopment\OpenApi\Bol\Retailer\Models\ProcessStatus' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\ThisIsDevelopment\OpenApi\Bol\Retailer\Models\ProcessStatus', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 400:
                    if ('\ThisIsDevelopment\OpenApi\Bol\Retailer\Models\Problem' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\ThisIsDevelopment\OpenApi\Bol\Retailer\Models\Problem' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\ThisIsDevelopment\OpenApi\Bol\Retailer\Models\Problem', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\ThisIsDevelopment\OpenApi\Bol\Retailer\Models\ProcessStatus';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 202:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ThisIsDevelopment\OpenApi\Bol\Retailer\Models\ProcessStatus',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ThisIsDevelopment\OpenApi\Bol\Retailer\Models\Problem',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation putReplenishmentAsync
     *
     * Update a replenishment by replenishment id
     *
     * @param  string $replenishmentId The unique identifier of the replenishment. (required)
     * @param  \ThisIsDevelopment\OpenApi\Bol\Retailer\Models\UpdateReplenishmentRequest $updateReplenishmentRequest (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['putReplenishment'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function putReplenishmentAsync($replenishmentId, $updateReplenishmentRequest, string $contentType = self::contentTypes['putReplenishment'][0])
    {
        return $this->putReplenishmentAsyncWithHttpInfo($replenishmentId, $updateReplenishmentRequest, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation putReplenishmentAsyncWithHttpInfo
     *
     * Update a replenishment by replenishment id
     *
     * @param  string $replenishmentId The unique identifier of the replenishment. (required)
     * @param  \ThisIsDevelopment\OpenApi\Bol\Retailer\Models\UpdateReplenishmentRequest $updateReplenishmentRequest (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['putReplenishment'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function putReplenishmentAsyncWithHttpInfo($replenishmentId, $updateReplenishmentRequest, string $contentType = self::contentTypes['putReplenishment'][0])
    {
        $returnType = '\ThisIsDevelopment\OpenApi\Bol\Retailer\Models\ProcessStatus';
        $request = $this->putReplenishmentRequest($replenishmentId, $updateReplenishmentRequest, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'putReplenishment'
     *
     * @param  string $replenishmentId The unique identifier of the replenishment. (required)
     * @param  \ThisIsDevelopment\OpenApi\Bol\Retailer\Models\UpdateReplenishmentRequest $updateReplenishmentRequest (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['putReplenishment'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function putReplenishmentRequest($replenishmentId, $updateReplenishmentRequest, string $contentType = self::contentTypes['putReplenishment'][0])
    {

        // verify the required parameter 'replenishmentId' is set
        if ($replenishmentId === null || (is_array($replenishmentId) && count($replenishmentId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $replenishmentId when calling putReplenishment'
            );
        }

        // verify the required parameter 'updateReplenishmentRequest' is set
        if ($updateReplenishmentRequest === null || (is_array($updateReplenishmentRequest) && count($updateReplenishmentRequest) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $updateReplenishmentRequest when calling putReplenishment'
            );
        }


        $resourcePath = '/retailer/replenishments/{replenishment-id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($replenishmentId !== null) {
            $resourcePath = str_replace(
                '{' . 'replenishment-id' . '}',
                ObjectSerializer::toPathValue($replenishmentId),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/vnd.retailer.v9+json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($updateReplenishmentRequest)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($updateReplenishmentRequest));
            } else {
                $httpBody = $updateReplenishmentRequest;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires Bearer authentication (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'PUT',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }
}
