<?php
/**
 * InsightsApi
 * PHP version 7.4
 *
 * @category Class
 * @package  ThisIsDevelopment\OpenApi\Bol\Retailer
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * v9 - Retailer API
 *
 * The bol.com API for retailers.  # Authentication Our API requires authentication via OAuth2. The detailed steps to authenticate are explained [here](https://api.bol.com/retailer/public/Retailer-API/authentication.html)   # Demo scenarios Our API specification includes examples of the responses you can expect. For more information as well as more examples, we refer you to the following resources:   - [Demo environment](https://api.bol.com/retailer/public/Retailer-API/demo/demo.html) - [Demo scenarios](https://api.bol.com/retailer/public/Retailer-API/demo/v9-index.html)
 *
 * The version of the OpenAPI document: 9.x
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 7.3.0-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace ThisIsDevelopment\OpenApi\Bol\Retailer\Api;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\ConnectException;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use ThisIsDevelopment\OpenApi\Bol\Retailer\ApiException;
use ThisIsDevelopment\OpenApi\Bol\Retailer\Configuration;
use ThisIsDevelopment\OpenApi\Bol\Retailer\HeaderSelector;
use ThisIsDevelopment\OpenApi\Bol\Retailer\ObjectSerializer;

/**
 * InsightsApi Class Doc Comment
 *
 * @category Class
 * @package  ThisIsDevelopment\OpenApi\Bol\Retailer
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class InsightsApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * @var int Host index
     */
    protected $hostIndex;

    /** @var string[] $contentTypes **/
    public const contentTypes = [
        'getOfferInsights' => [
            'application/json',
        ],
        'getPerformanceIndicators' => [
            'application/json',
        ],
        'getSalesForecast' => [
            'application/json',
        ],
        'getSearchTerms' => [
            'application/json',
        ],
    ];

    /**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     * @param int             $hostIndex (Optional) host index to select the list of hosts if defined in the OpenAPI spec
     */
    public function __construct(
        ClientInterface $client = null,
        Configuration $config = null,
        HeaderSelector $selector = null,
        $hostIndex = 0
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: new Configuration();
        $this->headerSelector = $selector ?: new HeaderSelector();
        $this->hostIndex = $hostIndex;
    }

    /**
     * Set the host index
     *
     * @param int $hostIndex Host index (required)
     */
    public function setHostIndex($hostIndex): void
    {
        $this->hostIndex = $hostIndex;
    }

    /**
     * Get the host index
     *
     * @return int Host index
     */
    public function getHostIndex()
    {
        return $this->hostIndex;
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation getOfferInsights
     *
     * Get offer insights
     *
     * @param  string $offerId Unique identifier for an offer. (required)
     * @param  string $period The time unit in which the offer insights are grouped. (required)
     * @param  int $numberOfPeriods The number of periods for which the offer insights are requested back in time. The maximum available periods are 24 for MONTH, 104 for WEEK, and 730 for DAY. (required)
     * @param  string $name The name of the requested offer insight. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getOfferInsights'] to see the possible values for this operation
     *
     * @throws \ThisIsDevelopment\OpenApi\Bol\Retailer\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \ThisIsDevelopment\OpenApi\Bol\Retailer\Models\OfferInsights|\ThisIsDevelopment\OpenApi\Bol\Retailer\Models\Problem
     */
    public function getOfferInsights($offerId, $period, $numberOfPeriods, $name, string $contentType = self::contentTypes['getOfferInsights'][0])
    {
        list($response) = $this->getOfferInsightsWithHttpInfo($offerId, $period, $numberOfPeriods, $name, $contentType);
        return $response;
    }

    /**
     * Operation getOfferInsightsWithHttpInfo
     *
     * Get offer insights
     *
     * @param  string $offerId Unique identifier for an offer. (required)
     * @param  string $period The time unit in which the offer insights are grouped. (required)
     * @param  int $numberOfPeriods The number of periods for which the offer insights are requested back in time. The maximum available periods are 24 for MONTH, 104 for WEEK, and 730 for DAY. (required)
     * @param  string $name The name of the requested offer insight. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getOfferInsights'] to see the possible values for this operation
     *
     * @throws \ThisIsDevelopment\OpenApi\Bol\Retailer\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \ThisIsDevelopment\OpenApi\Bol\Retailer\Models\OfferInsights|\ThisIsDevelopment\OpenApi\Bol\Retailer\Models\Problem, HTTP status code, HTTP response headers (array of strings)
     */
    public function getOfferInsightsWithHttpInfo($offerId, $period, $numberOfPeriods, $name, string $contentType = self::contentTypes['getOfferInsights'][0])
    {
        $request = $this->getOfferInsightsRequest($offerId, $period, $numberOfPeriods, $name, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\ThisIsDevelopment\OpenApi\Bol\Retailer\Models\OfferInsights' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\ThisIsDevelopment\OpenApi\Bol\Retailer\Models\OfferInsights' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\ThisIsDevelopment\OpenApi\Bol\Retailer\Models\OfferInsights', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 400:
                    if ('\ThisIsDevelopment\OpenApi\Bol\Retailer\Models\Problem' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\ThisIsDevelopment\OpenApi\Bol\Retailer\Models\Problem' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\ThisIsDevelopment\OpenApi\Bol\Retailer\Models\Problem', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\ThisIsDevelopment\OpenApi\Bol\Retailer\Models\OfferInsights';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ThisIsDevelopment\OpenApi\Bol\Retailer\Models\OfferInsights',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ThisIsDevelopment\OpenApi\Bol\Retailer\Models\Problem',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getOfferInsightsAsync
     *
     * Get offer insights
     *
     * @param  string $offerId Unique identifier for an offer. (required)
     * @param  string $period The time unit in which the offer insights are grouped. (required)
     * @param  int $numberOfPeriods The number of periods for which the offer insights are requested back in time. The maximum available periods are 24 for MONTH, 104 for WEEK, and 730 for DAY. (required)
     * @param  string $name The name of the requested offer insight. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getOfferInsights'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getOfferInsightsAsync($offerId, $period, $numberOfPeriods, $name, string $contentType = self::contentTypes['getOfferInsights'][0])
    {
        return $this->getOfferInsightsAsyncWithHttpInfo($offerId, $period, $numberOfPeriods, $name, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getOfferInsightsAsyncWithHttpInfo
     *
     * Get offer insights
     *
     * @param  string $offerId Unique identifier for an offer. (required)
     * @param  string $period The time unit in which the offer insights are grouped. (required)
     * @param  int $numberOfPeriods The number of periods for which the offer insights are requested back in time. The maximum available periods are 24 for MONTH, 104 for WEEK, and 730 for DAY. (required)
     * @param  string $name The name of the requested offer insight. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getOfferInsights'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getOfferInsightsAsyncWithHttpInfo($offerId, $period, $numberOfPeriods, $name, string $contentType = self::contentTypes['getOfferInsights'][0])
    {
        $returnType = '\ThisIsDevelopment\OpenApi\Bol\Retailer\Models\OfferInsights';
        $request = $this->getOfferInsightsRequest($offerId, $period, $numberOfPeriods, $name, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getOfferInsights'
     *
     * @param  string $offerId Unique identifier for an offer. (required)
     * @param  string $period The time unit in which the offer insights are grouped. (required)
     * @param  int $numberOfPeriods The number of periods for which the offer insights are requested back in time. The maximum available periods are 24 for MONTH, 104 for WEEK, and 730 for DAY. (required)
     * @param  string $name The name of the requested offer insight. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getOfferInsights'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getOfferInsightsRequest($offerId, $period, $numberOfPeriods, $name, string $contentType = self::contentTypes['getOfferInsights'][0])
    {

        // verify the required parameter 'offerId' is set
        if ($offerId === null || (is_array($offerId) && count($offerId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $offerId when calling getOfferInsights'
            );
        }

        // verify the required parameter 'period' is set
        if ($period === null || (is_array($period) && count($period) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $period when calling getOfferInsights'
            );
        }

        // verify the required parameter 'numberOfPeriods' is set
        if ($numberOfPeriods === null || (is_array($numberOfPeriods) && count($numberOfPeriods) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $numberOfPeriods when calling getOfferInsights'
            );
        }

        // verify the required parameter 'name' is set
        if ($name === null || (is_array($name) && count($name) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $name when calling getOfferInsights'
            );
        }


        $resourcePath = '/retailer/insights/offer';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $offerId,
            'offer-id', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            true // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $period,
            'period', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            true // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $numberOfPeriods,
            'number-of-periods', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            true // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $name,
            'name', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            true // required
        ) ?? []);




        $headers = $this->headerSelector->selectHeaders(
            ['application/vnd.retailer.v9+json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires Bearer authentication (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getPerformanceIndicators
     *
     * Get performance indicators
     *
     * @param  string $name The type of the performance indicator (required)
     * @param  string $year Year number in the ISO-8601 standard. (required)
     * @param  string $week Week number in the ISO-8601 standard. If you would like to get the relative scores from the current week, please provide the current week number here. Be advised that measurements can change heavily over the course of the week. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getPerformanceIndicators'] to see the possible values for this operation
     *
     * @throws \ThisIsDevelopment\OpenApi\Bol\Retailer\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \ThisIsDevelopment\OpenApi\Bol\Retailer\Models\PerformanceIndicators|\ThisIsDevelopment\OpenApi\Bol\Retailer\Models\Problem
     */
    public function getPerformanceIndicators($name, $year, $week, string $contentType = self::contentTypes['getPerformanceIndicators'][0])
    {
        list($response) = $this->getPerformanceIndicatorsWithHttpInfo($name, $year, $week, $contentType);
        return $response;
    }

    /**
     * Operation getPerformanceIndicatorsWithHttpInfo
     *
     * Get performance indicators
     *
     * @param  string $name The type of the performance indicator (required)
     * @param  string $year Year number in the ISO-8601 standard. (required)
     * @param  string $week Week number in the ISO-8601 standard. If you would like to get the relative scores from the current week, please provide the current week number here. Be advised that measurements can change heavily over the course of the week. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getPerformanceIndicators'] to see the possible values for this operation
     *
     * @throws \ThisIsDevelopment\OpenApi\Bol\Retailer\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \ThisIsDevelopment\OpenApi\Bol\Retailer\Models\PerformanceIndicators|\ThisIsDevelopment\OpenApi\Bol\Retailer\Models\Problem, HTTP status code, HTTP response headers (array of strings)
     */
    public function getPerformanceIndicatorsWithHttpInfo($name, $year, $week, string $contentType = self::contentTypes['getPerformanceIndicators'][0])
    {
        $request = $this->getPerformanceIndicatorsRequest($name, $year, $week, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\ThisIsDevelopment\OpenApi\Bol\Retailer\Models\PerformanceIndicators' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\ThisIsDevelopment\OpenApi\Bol\Retailer\Models\PerformanceIndicators' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\ThisIsDevelopment\OpenApi\Bol\Retailer\Models\PerformanceIndicators', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 400:
                    if ('\ThisIsDevelopment\OpenApi\Bol\Retailer\Models\Problem' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\ThisIsDevelopment\OpenApi\Bol\Retailer\Models\Problem' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\ThisIsDevelopment\OpenApi\Bol\Retailer\Models\Problem', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\ThisIsDevelopment\OpenApi\Bol\Retailer\Models\PerformanceIndicators';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ThisIsDevelopment\OpenApi\Bol\Retailer\Models\PerformanceIndicators',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ThisIsDevelopment\OpenApi\Bol\Retailer\Models\Problem',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getPerformanceIndicatorsAsync
     *
     * Get performance indicators
     *
     * @param  string $name The type of the performance indicator (required)
     * @param  string $year Year number in the ISO-8601 standard. (required)
     * @param  string $week Week number in the ISO-8601 standard. If you would like to get the relative scores from the current week, please provide the current week number here. Be advised that measurements can change heavily over the course of the week. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getPerformanceIndicators'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getPerformanceIndicatorsAsync($name, $year, $week, string $contentType = self::contentTypes['getPerformanceIndicators'][0])
    {
        return $this->getPerformanceIndicatorsAsyncWithHttpInfo($name, $year, $week, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getPerformanceIndicatorsAsyncWithHttpInfo
     *
     * Get performance indicators
     *
     * @param  string $name The type of the performance indicator (required)
     * @param  string $year Year number in the ISO-8601 standard. (required)
     * @param  string $week Week number in the ISO-8601 standard. If you would like to get the relative scores from the current week, please provide the current week number here. Be advised that measurements can change heavily over the course of the week. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getPerformanceIndicators'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getPerformanceIndicatorsAsyncWithHttpInfo($name, $year, $week, string $contentType = self::contentTypes['getPerformanceIndicators'][0])
    {
        $returnType = '\ThisIsDevelopment\OpenApi\Bol\Retailer\Models\PerformanceIndicators';
        $request = $this->getPerformanceIndicatorsRequest($name, $year, $week, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getPerformanceIndicators'
     *
     * @param  string $name The type of the performance indicator (required)
     * @param  string $year Year number in the ISO-8601 standard. (required)
     * @param  string $week Week number in the ISO-8601 standard. If you would like to get the relative scores from the current week, please provide the current week number here. Be advised that measurements can change heavily over the course of the week. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getPerformanceIndicators'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getPerformanceIndicatorsRequest($name, $year, $week, string $contentType = self::contentTypes['getPerformanceIndicators'][0])
    {

        // verify the required parameter 'name' is set
        if ($name === null || (is_array($name) && count($name) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $name when calling getPerformanceIndicators'
            );
        }

        // verify the required parameter 'year' is set
        if ($year === null || (is_array($year) && count($year) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $year when calling getPerformanceIndicators'
            );
        }

        // verify the required parameter 'week' is set
        if ($week === null || (is_array($week) && count($week) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $week when calling getPerformanceIndicators'
            );
        }


        $resourcePath = '/retailer/insights/performance/indicator';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $name,
            'name', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            true // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $year,
            'year', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            true // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $week,
            'week', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            true // required
        ) ?? []);




        $headers = $this->headerSelector->selectHeaders(
            ['application/vnd.retailer.v9+json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires Bearer authentication (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getSalesForecast
     *
     * Get sales forecast
     *
     * @param  string $offerId Unique identifier for an offer. (required)
     * @param  int $weeksAhead The number of weeks into the future, starting from today. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getSalesForecast'] to see the possible values for this operation
     *
     * @throws \ThisIsDevelopment\OpenApi\Bol\Retailer\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \ThisIsDevelopment\OpenApi\Bol\Retailer\Models\SalesForecastResponse|\ThisIsDevelopment\OpenApi\Bol\Retailer\Models\Problem
     */
    public function getSalesForecast($offerId, $weeksAhead, string $contentType = self::contentTypes['getSalesForecast'][0])
    {
        list($response) = $this->getSalesForecastWithHttpInfo($offerId, $weeksAhead, $contentType);
        return $response;
    }

    /**
     * Operation getSalesForecastWithHttpInfo
     *
     * Get sales forecast
     *
     * @param  string $offerId Unique identifier for an offer. (required)
     * @param  int $weeksAhead The number of weeks into the future, starting from today. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getSalesForecast'] to see the possible values for this operation
     *
     * @throws \ThisIsDevelopment\OpenApi\Bol\Retailer\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \ThisIsDevelopment\OpenApi\Bol\Retailer\Models\SalesForecastResponse|\ThisIsDevelopment\OpenApi\Bol\Retailer\Models\Problem, HTTP status code, HTTP response headers (array of strings)
     */
    public function getSalesForecastWithHttpInfo($offerId, $weeksAhead, string $contentType = self::contentTypes['getSalesForecast'][0])
    {
        $request = $this->getSalesForecastRequest($offerId, $weeksAhead, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\ThisIsDevelopment\OpenApi\Bol\Retailer\Models\SalesForecastResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\ThisIsDevelopment\OpenApi\Bol\Retailer\Models\SalesForecastResponse' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\ThisIsDevelopment\OpenApi\Bol\Retailer\Models\SalesForecastResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 400:
                    if ('\ThisIsDevelopment\OpenApi\Bol\Retailer\Models\Problem' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\ThisIsDevelopment\OpenApi\Bol\Retailer\Models\Problem' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\ThisIsDevelopment\OpenApi\Bol\Retailer\Models\Problem', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\ThisIsDevelopment\OpenApi\Bol\Retailer\Models\SalesForecastResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ThisIsDevelopment\OpenApi\Bol\Retailer\Models\SalesForecastResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ThisIsDevelopment\OpenApi\Bol\Retailer\Models\Problem',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getSalesForecastAsync
     *
     * Get sales forecast
     *
     * @param  string $offerId Unique identifier for an offer. (required)
     * @param  int $weeksAhead The number of weeks into the future, starting from today. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getSalesForecast'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getSalesForecastAsync($offerId, $weeksAhead, string $contentType = self::contentTypes['getSalesForecast'][0])
    {
        return $this->getSalesForecastAsyncWithHttpInfo($offerId, $weeksAhead, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getSalesForecastAsyncWithHttpInfo
     *
     * Get sales forecast
     *
     * @param  string $offerId Unique identifier for an offer. (required)
     * @param  int $weeksAhead The number of weeks into the future, starting from today. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getSalesForecast'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getSalesForecastAsyncWithHttpInfo($offerId, $weeksAhead, string $contentType = self::contentTypes['getSalesForecast'][0])
    {
        $returnType = '\ThisIsDevelopment\OpenApi\Bol\Retailer\Models\SalesForecastResponse';
        $request = $this->getSalesForecastRequest($offerId, $weeksAhead, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getSalesForecast'
     *
     * @param  string $offerId Unique identifier for an offer. (required)
     * @param  int $weeksAhead The number of weeks into the future, starting from today. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getSalesForecast'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getSalesForecastRequest($offerId, $weeksAhead, string $contentType = self::contentTypes['getSalesForecast'][0])
    {

        // verify the required parameter 'offerId' is set
        if ($offerId === null || (is_array($offerId) && count($offerId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $offerId when calling getSalesForecast'
            );
        }

        // verify the required parameter 'weeksAhead' is set
        if ($weeksAhead === null || (is_array($weeksAhead) && count($weeksAhead) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $weeksAhead when calling getSalesForecast'
            );
        }
        if ($weeksAhead > 12) {
            throw new \InvalidArgumentException('invalid value for "$weeksAhead" when calling InsightsApi.getSalesForecast, must be smaller than or equal to 12.');
        }
        if ($weeksAhead < 1) {
            throw new \InvalidArgumentException('invalid value for "$weeksAhead" when calling InsightsApi.getSalesForecast, must be bigger than or equal to 1.');
        }
        

        $resourcePath = '/retailer/insights/sales-forecast';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $offerId,
            'offer-id', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            true // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $weeksAhead,
            'weeks-ahead', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            true // required
        ) ?? []);




        $headers = $this->headerSelector->selectHeaders(
            ['application/vnd.retailer.v9+json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires Bearer authentication (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getSearchTerms
     *
     * Get search terms
     *
     * @param  string $searchTerm The search term for which you want to request the search volume. (required)
     * @param  string $period The time unit in which the offer insights are grouped. (required)
     * @param  int $numberOfPeriods The number of periods for which the offer insights are requested back in time. (required)
     * @param  bool $relatedSearchTerms Indicates whether or not you want to retrieve the related search terms. (optional, default to false)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getSearchTerms'] to see the possible values for this operation
     *
     * @throws \ThisIsDevelopment\OpenApi\Bol\Retailer\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \ThisIsDevelopment\OpenApi\Bol\Retailer\Models\SearchTerms|\ThisIsDevelopment\OpenApi\Bol\Retailer\Models\Problem
     */
    public function getSearchTerms($searchTerm, $period, $numberOfPeriods, $relatedSearchTerms = false, string $contentType = self::contentTypes['getSearchTerms'][0])
    {
        list($response) = $this->getSearchTermsWithHttpInfo($searchTerm, $period, $numberOfPeriods, $relatedSearchTerms, $contentType);
        return $response;
    }

    /**
     * Operation getSearchTermsWithHttpInfo
     *
     * Get search terms
     *
     * @param  string $searchTerm The search term for which you want to request the search volume. (required)
     * @param  string $period The time unit in which the offer insights are grouped. (required)
     * @param  int $numberOfPeriods The number of periods for which the offer insights are requested back in time. (required)
     * @param  bool $relatedSearchTerms Indicates whether or not you want to retrieve the related search terms. (optional, default to false)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getSearchTerms'] to see the possible values for this operation
     *
     * @throws \ThisIsDevelopment\OpenApi\Bol\Retailer\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \ThisIsDevelopment\OpenApi\Bol\Retailer\Models\SearchTerms|\ThisIsDevelopment\OpenApi\Bol\Retailer\Models\Problem, HTTP status code, HTTP response headers (array of strings)
     */
    public function getSearchTermsWithHttpInfo($searchTerm, $period, $numberOfPeriods, $relatedSearchTerms = false, string $contentType = self::contentTypes['getSearchTerms'][0])
    {
        $request = $this->getSearchTermsRequest($searchTerm, $period, $numberOfPeriods, $relatedSearchTerms, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\ThisIsDevelopment\OpenApi\Bol\Retailer\Models\SearchTerms' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\ThisIsDevelopment\OpenApi\Bol\Retailer\Models\SearchTerms' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\ThisIsDevelopment\OpenApi\Bol\Retailer\Models\SearchTerms', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 400:
                    if ('\ThisIsDevelopment\OpenApi\Bol\Retailer\Models\Problem' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\ThisIsDevelopment\OpenApi\Bol\Retailer\Models\Problem' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\ThisIsDevelopment\OpenApi\Bol\Retailer\Models\Problem', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\ThisIsDevelopment\OpenApi\Bol\Retailer\Models\SearchTerms';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ThisIsDevelopment\OpenApi\Bol\Retailer\Models\SearchTerms',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ThisIsDevelopment\OpenApi\Bol\Retailer\Models\Problem',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getSearchTermsAsync
     *
     * Get search terms
     *
     * @param  string $searchTerm The search term for which you want to request the search volume. (required)
     * @param  string $period The time unit in which the offer insights are grouped. (required)
     * @param  int $numberOfPeriods The number of periods for which the offer insights are requested back in time. (required)
     * @param  bool $relatedSearchTerms Indicates whether or not you want to retrieve the related search terms. (optional, default to false)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getSearchTerms'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getSearchTermsAsync($searchTerm, $period, $numberOfPeriods, $relatedSearchTerms = false, string $contentType = self::contentTypes['getSearchTerms'][0])
    {
        return $this->getSearchTermsAsyncWithHttpInfo($searchTerm, $period, $numberOfPeriods, $relatedSearchTerms, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getSearchTermsAsyncWithHttpInfo
     *
     * Get search terms
     *
     * @param  string $searchTerm The search term for which you want to request the search volume. (required)
     * @param  string $period The time unit in which the offer insights are grouped. (required)
     * @param  int $numberOfPeriods The number of periods for which the offer insights are requested back in time. (required)
     * @param  bool $relatedSearchTerms Indicates whether or not you want to retrieve the related search terms. (optional, default to false)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getSearchTerms'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getSearchTermsAsyncWithHttpInfo($searchTerm, $period, $numberOfPeriods, $relatedSearchTerms = false, string $contentType = self::contentTypes['getSearchTerms'][0])
    {
        $returnType = '\ThisIsDevelopment\OpenApi\Bol\Retailer\Models\SearchTerms';
        $request = $this->getSearchTermsRequest($searchTerm, $period, $numberOfPeriods, $relatedSearchTerms, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getSearchTerms'
     *
     * @param  string $searchTerm The search term for which you want to request the search volume. (required)
     * @param  string $period The time unit in which the offer insights are grouped. (required)
     * @param  int $numberOfPeriods The number of periods for which the offer insights are requested back in time. (required)
     * @param  bool $relatedSearchTerms Indicates whether or not you want to retrieve the related search terms. (optional, default to false)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getSearchTerms'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getSearchTermsRequest($searchTerm, $period, $numberOfPeriods, $relatedSearchTerms = false, string $contentType = self::contentTypes['getSearchTerms'][0])
    {

        // verify the required parameter 'searchTerm' is set
        if ($searchTerm === null || (is_array($searchTerm) && count($searchTerm) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $searchTerm when calling getSearchTerms'
            );
        }

        // verify the required parameter 'period' is set
        if ($period === null || (is_array($period) && count($period) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $period when calling getSearchTerms'
            );
        }

        // verify the required parameter 'numberOfPeriods' is set
        if ($numberOfPeriods === null || (is_array($numberOfPeriods) && count($numberOfPeriods) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $numberOfPeriods when calling getSearchTerms'
            );
        }



        $resourcePath = '/retailer/insights/search-terms';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $searchTerm,
            'search-term', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            true // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $period,
            'period', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            true // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $numberOfPeriods,
            'number-of-periods', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            true // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $relatedSearchTerms,
            'related-search-terms', // param base name
            'boolean', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);




        $headers = $this->headerSelector->selectHeaders(
            ['application/vnd.retailer.v9+json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires Bearer authentication (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }
}
