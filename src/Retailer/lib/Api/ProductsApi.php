<?php
/**
 * ProductsApi
 * PHP version 7.4
 *
 * @category Class
 * @package  ThisIsDevelopment\OpenApi\Bol\Retailer
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * v9 - Retailer API
 *
 * The bol.com API for retailers.  # Authentication Our API requires authentication via OAuth2. The detailed steps to authenticate are explained [here](https://api.bol.com/retailer/public/Retailer-API/authentication.html)   # Demo scenarios Our API specification includes examples of the responses you can expect. For more information as well as more examples, we refer you to the following resources:   - [Demo environment](https://api.bol.com/retailer/public/Retailer-API/demo/demo.html) - [Demo scenarios](https://api.bol.com/retailer/public/Retailer-API/demo/v9-index.html)
 *
 * The version of the OpenAPI document: 9.x
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 7.3.0-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace ThisIsDevelopment\OpenApi\Bol\Retailer\Api;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\ConnectException;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use ThisIsDevelopment\OpenApi\Bol\Retailer\ApiException;
use ThisIsDevelopment\OpenApi\Bol\Retailer\Configuration;
use ThisIsDevelopment\OpenApi\Bol\Retailer\HeaderSelector;
use ThisIsDevelopment\OpenApi\Bol\Retailer\ObjectSerializer;

/**
 * ProductsApi Class Doc Comment
 *
 * @category Class
 * @package  ThisIsDevelopment\OpenApi\Bol\Retailer
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class ProductsApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * @var int Host index
     */
    protected $hostIndex;

    /** @var string[] $contentTypes **/
    public const contentTypes = [
        'getCompetingOffers' => [
            'application/json',
        ],
        'getProductAssets' => [
            'application/json',
        ],
        'getProductIds' => [
            'application/json',
        ],
        'getProductList' => [
            'application/json',
        ],
        'getProductListFilters' => [
            'application/json',
        ],
        'getProductPlacement' => [
            'application/json',
        ],
        'getProductRatings' => [
            'application/json',
        ],
    ];

    /**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     * @param int             $hostIndex (Optional) host index to select the list of hosts if defined in the OpenAPI spec
     */
    public function __construct(
        ClientInterface $client = null,
        Configuration $config = null,
        HeaderSelector $selector = null,
        $hostIndex = 0
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: new Configuration();
        $this->headerSelector = $selector ?: new HeaderSelector();
        $this->hostIndex = $hostIndex;
    }

    /**
     * Set the host index
     *
     * @param int $hostIndex Host index (required)
     */
    public function setHostIndex($hostIndex): void
    {
        $this->hostIndex = $hostIndex;
    }

    /**
     * Get the host index
     *
     * @return int Host index
     */
    public function getHostIndex()
    {
        return $this->hostIndex;
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation getCompetingOffers
     *
     * Get a list of competing offers by EAN
     *
     * @param  string $ean The EAN number associated with this product. (required)
     * @param  int $page The requested page number with a page size of 50 items. (optional, default to 1)
     * @param  string $countryCode Countries in which this offer is currently on sale in the webshop, in ISO-3166-1 format. (optional)
     * @param  bool $bestOfferOnly Indicator to request the best offer within the country for the requested EAN. (optional, default to false)
     * @param  string $condition The condition of the offered product. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getCompetingOffers'] to see the possible values for this operation
     *
     * @throws \ThisIsDevelopment\OpenApi\Bol\Retailer\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \ThisIsDevelopment\OpenApi\Bol\Retailer\Models\CompetingOffersResponse|\ThisIsDevelopment\OpenApi\Bol\Retailer\Models\Problem|\ThisIsDevelopment\OpenApi\Bol\Retailer\Models\Problem
     */
    public function getCompetingOffers($ean, $page = 1, $countryCode = null, $bestOfferOnly = false, $condition = null, string $contentType = self::contentTypes['getCompetingOffers'][0])
    {
        list($response) = $this->getCompetingOffersWithHttpInfo($ean, $page, $countryCode, $bestOfferOnly, $condition, $contentType);
        return $response;
    }

    /**
     * Operation getCompetingOffersWithHttpInfo
     *
     * Get a list of competing offers by EAN
     *
     * @param  string $ean The EAN number associated with this product. (required)
     * @param  int $page The requested page number with a page size of 50 items. (optional, default to 1)
     * @param  string $countryCode Countries in which this offer is currently on sale in the webshop, in ISO-3166-1 format. (optional)
     * @param  bool $bestOfferOnly Indicator to request the best offer within the country for the requested EAN. (optional, default to false)
     * @param  string $condition The condition of the offered product. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getCompetingOffers'] to see the possible values for this operation
     *
     * @throws \ThisIsDevelopment\OpenApi\Bol\Retailer\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \ThisIsDevelopment\OpenApi\Bol\Retailer\Models\CompetingOffersResponse|\ThisIsDevelopment\OpenApi\Bol\Retailer\Models\Problem|\ThisIsDevelopment\OpenApi\Bol\Retailer\Models\Problem, HTTP status code, HTTP response headers (array of strings)
     */
    public function getCompetingOffersWithHttpInfo($ean, $page = 1, $countryCode = null, $bestOfferOnly = false, $condition = null, string $contentType = self::contentTypes['getCompetingOffers'][0])
    {
        $request = $this->getCompetingOffersRequest($ean, $page, $countryCode, $bestOfferOnly, $condition, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\ThisIsDevelopment\OpenApi\Bol\Retailer\Models\CompetingOffersResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\ThisIsDevelopment\OpenApi\Bol\Retailer\Models\CompetingOffersResponse' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\ThisIsDevelopment\OpenApi\Bol\Retailer\Models\CompetingOffersResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 400:
                    if ('\ThisIsDevelopment\OpenApi\Bol\Retailer\Models\Problem' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\ThisIsDevelopment\OpenApi\Bol\Retailer\Models\Problem' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\ThisIsDevelopment\OpenApi\Bol\Retailer\Models\Problem', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 404:
                    if ('\ThisIsDevelopment\OpenApi\Bol\Retailer\Models\Problem' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\ThisIsDevelopment\OpenApi\Bol\Retailer\Models\Problem' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\ThisIsDevelopment\OpenApi\Bol\Retailer\Models\Problem', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\ThisIsDevelopment\OpenApi\Bol\Retailer\Models\CompetingOffersResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ThisIsDevelopment\OpenApi\Bol\Retailer\Models\CompetingOffersResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ThisIsDevelopment\OpenApi\Bol\Retailer\Models\Problem',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ThisIsDevelopment\OpenApi\Bol\Retailer\Models\Problem',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getCompetingOffersAsync
     *
     * Get a list of competing offers by EAN
     *
     * @param  string $ean The EAN number associated with this product. (required)
     * @param  int $page The requested page number with a page size of 50 items. (optional, default to 1)
     * @param  string $countryCode Countries in which this offer is currently on sale in the webshop, in ISO-3166-1 format. (optional)
     * @param  bool $bestOfferOnly Indicator to request the best offer within the country for the requested EAN. (optional, default to false)
     * @param  string $condition The condition of the offered product. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getCompetingOffers'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getCompetingOffersAsync($ean, $page = 1, $countryCode = null, $bestOfferOnly = false, $condition = null, string $contentType = self::contentTypes['getCompetingOffers'][0])
    {
        return $this->getCompetingOffersAsyncWithHttpInfo($ean, $page, $countryCode, $bestOfferOnly, $condition, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getCompetingOffersAsyncWithHttpInfo
     *
     * Get a list of competing offers by EAN
     *
     * @param  string $ean The EAN number associated with this product. (required)
     * @param  int $page The requested page number with a page size of 50 items. (optional, default to 1)
     * @param  string $countryCode Countries in which this offer is currently on sale in the webshop, in ISO-3166-1 format. (optional)
     * @param  bool $bestOfferOnly Indicator to request the best offer within the country for the requested EAN. (optional, default to false)
     * @param  string $condition The condition of the offered product. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getCompetingOffers'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getCompetingOffersAsyncWithHttpInfo($ean, $page = 1, $countryCode = null, $bestOfferOnly = false, $condition = null, string $contentType = self::contentTypes['getCompetingOffers'][0])
    {
        $returnType = '\ThisIsDevelopment\OpenApi\Bol\Retailer\Models\CompetingOffersResponse';
        $request = $this->getCompetingOffersRequest($ean, $page, $countryCode, $bestOfferOnly, $condition, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getCompetingOffers'
     *
     * @param  string $ean The EAN number associated with this product. (required)
     * @param  int $page The requested page number with a page size of 50 items. (optional, default to 1)
     * @param  string $countryCode Countries in which this offer is currently on sale in the webshop, in ISO-3166-1 format. (optional)
     * @param  bool $bestOfferOnly Indicator to request the best offer within the country for the requested EAN. (optional, default to false)
     * @param  string $condition The condition of the offered product. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getCompetingOffers'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getCompetingOffersRequest($ean, $page = 1, $countryCode = null, $bestOfferOnly = false, $condition = null, string $contentType = self::contentTypes['getCompetingOffers'][0])
    {

        // verify the required parameter 'ean' is set
        if ($ean === null || (is_array($ean) && count($ean) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $ean when calling getCompetingOffers'
            );
        }

        if ($page !== null && $page > 200) {
            throw new \InvalidArgumentException('invalid value for "$page" when calling ProductsApi.getCompetingOffers, must be smaller than or equal to 200.');
        }
        if ($page !== null && $page < 1) {
            throw new \InvalidArgumentException('invalid value for "$page" when calling ProductsApi.getCompetingOffers, must be bigger than or equal to 1.');
        }
        




        $resourcePath = '/retailer/products/{ean}/offers';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $page,
            'page', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $countryCode,
            'country-code', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $bestOfferOnly,
            'best-offer-only', // param base name
            'boolean', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $condition,
            'condition', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);


        // path params
        if ($ean !== null) {
            $resourcePath = str_replace(
                '{' . 'ean' . '}',
                ObjectSerializer::toPathValue($ean),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/vnd.retailer.v9+json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires Bearer authentication (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getProductAssets
     *
     * Get product assets
     *
     * @param  string $ean The EAN number associated with this product. (required)
     * @param  string $usage Type of the asset being used for. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getProductAssets'] to see the possible values for this operation
     *
     * @throws \ThisIsDevelopment\OpenApi\Bol\Retailer\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \ThisIsDevelopment\OpenApi\Bol\Retailer\Models\ProductAssetsResponse|\ThisIsDevelopment\OpenApi\Bol\Retailer\Models\Problem|\ThisIsDevelopment\OpenApi\Bol\Retailer\Models\Problem
     */
    public function getProductAssets($ean, $usage = null, string $contentType = self::contentTypes['getProductAssets'][0])
    {
        list($response) = $this->getProductAssetsWithHttpInfo($ean, $usage, $contentType);
        return $response;
    }

    /**
     * Operation getProductAssetsWithHttpInfo
     *
     * Get product assets
     *
     * @param  string $ean The EAN number associated with this product. (required)
     * @param  string $usage Type of the asset being used for. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getProductAssets'] to see the possible values for this operation
     *
     * @throws \ThisIsDevelopment\OpenApi\Bol\Retailer\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \ThisIsDevelopment\OpenApi\Bol\Retailer\Models\ProductAssetsResponse|\ThisIsDevelopment\OpenApi\Bol\Retailer\Models\Problem|\ThisIsDevelopment\OpenApi\Bol\Retailer\Models\Problem, HTTP status code, HTTP response headers (array of strings)
     */
    public function getProductAssetsWithHttpInfo($ean, $usage = null, string $contentType = self::contentTypes['getProductAssets'][0])
    {
        $request = $this->getProductAssetsRequest($ean, $usage, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\ThisIsDevelopment\OpenApi\Bol\Retailer\Models\ProductAssetsResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\ThisIsDevelopment\OpenApi\Bol\Retailer\Models\ProductAssetsResponse' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\ThisIsDevelopment\OpenApi\Bol\Retailer\Models\ProductAssetsResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 400:
                    if ('\ThisIsDevelopment\OpenApi\Bol\Retailer\Models\Problem' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\ThisIsDevelopment\OpenApi\Bol\Retailer\Models\Problem' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\ThisIsDevelopment\OpenApi\Bol\Retailer\Models\Problem', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 404:
                    if ('\ThisIsDevelopment\OpenApi\Bol\Retailer\Models\Problem' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\ThisIsDevelopment\OpenApi\Bol\Retailer\Models\Problem' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\ThisIsDevelopment\OpenApi\Bol\Retailer\Models\Problem', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\ThisIsDevelopment\OpenApi\Bol\Retailer\Models\ProductAssetsResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ThisIsDevelopment\OpenApi\Bol\Retailer\Models\ProductAssetsResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ThisIsDevelopment\OpenApi\Bol\Retailer\Models\Problem',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ThisIsDevelopment\OpenApi\Bol\Retailer\Models\Problem',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getProductAssetsAsync
     *
     * Get product assets
     *
     * @param  string $ean The EAN number associated with this product. (required)
     * @param  string $usage Type of the asset being used for. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getProductAssets'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getProductAssetsAsync($ean, $usage = null, string $contentType = self::contentTypes['getProductAssets'][0])
    {
        return $this->getProductAssetsAsyncWithHttpInfo($ean, $usage, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getProductAssetsAsyncWithHttpInfo
     *
     * Get product assets
     *
     * @param  string $ean The EAN number associated with this product. (required)
     * @param  string $usage Type of the asset being used for. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getProductAssets'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getProductAssetsAsyncWithHttpInfo($ean, $usage = null, string $contentType = self::contentTypes['getProductAssets'][0])
    {
        $returnType = '\ThisIsDevelopment\OpenApi\Bol\Retailer\Models\ProductAssetsResponse';
        $request = $this->getProductAssetsRequest($ean, $usage, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getProductAssets'
     *
     * @param  string $ean The EAN number associated with this product. (required)
     * @param  string $usage Type of the asset being used for. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getProductAssets'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getProductAssetsRequest($ean, $usage = null, string $contentType = self::contentTypes['getProductAssets'][0])
    {

        // verify the required parameter 'ean' is set
        if ($ean === null || (is_array($ean) && count($ean) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $ean when calling getProductAssets'
            );
        }



        $resourcePath = '/retailer/products/{ean}/assets';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $usage,
            'usage', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);


        // path params
        if ($ean !== null) {
            $resourcePath = str_replace(
                '{' . 'ean' . '}',
                ObjectSerializer::toPathValue($ean),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/vnd.retailer.v9+json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires Bearer authentication (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getProductIds
     *
     * Get product ids by EAN
     *
     * @param  string $ean The EAN number associated with this product. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getProductIds'] to see the possible values for this operation
     *
     * @throws \ThisIsDevelopment\OpenApi\Bol\Retailer\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \ThisIsDevelopment\OpenApi\Bol\Retailer\Models\ProductIdsResponse|\ThisIsDevelopment\OpenApi\Bol\Retailer\Models\Problem|\ThisIsDevelopment\OpenApi\Bol\Retailer\Models\Problem
     */
    public function getProductIds($ean, string $contentType = self::contentTypes['getProductIds'][0])
    {
        list($response) = $this->getProductIdsWithHttpInfo($ean, $contentType);
        return $response;
    }

    /**
     * Operation getProductIdsWithHttpInfo
     *
     * Get product ids by EAN
     *
     * @param  string $ean The EAN number associated with this product. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getProductIds'] to see the possible values for this operation
     *
     * @throws \ThisIsDevelopment\OpenApi\Bol\Retailer\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \ThisIsDevelopment\OpenApi\Bol\Retailer\Models\ProductIdsResponse|\ThisIsDevelopment\OpenApi\Bol\Retailer\Models\Problem|\ThisIsDevelopment\OpenApi\Bol\Retailer\Models\Problem, HTTP status code, HTTP response headers (array of strings)
     */
    public function getProductIdsWithHttpInfo($ean, string $contentType = self::contentTypes['getProductIds'][0])
    {
        $request = $this->getProductIdsRequest($ean, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\ThisIsDevelopment\OpenApi\Bol\Retailer\Models\ProductIdsResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\ThisIsDevelopment\OpenApi\Bol\Retailer\Models\ProductIdsResponse' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\ThisIsDevelopment\OpenApi\Bol\Retailer\Models\ProductIdsResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 400:
                    if ('\ThisIsDevelopment\OpenApi\Bol\Retailer\Models\Problem' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\ThisIsDevelopment\OpenApi\Bol\Retailer\Models\Problem' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\ThisIsDevelopment\OpenApi\Bol\Retailer\Models\Problem', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 404:
                    if ('\ThisIsDevelopment\OpenApi\Bol\Retailer\Models\Problem' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\ThisIsDevelopment\OpenApi\Bol\Retailer\Models\Problem' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\ThisIsDevelopment\OpenApi\Bol\Retailer\Models\Problem', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\ThisIsDevelopment\OpenApi\Bol\Retailer\Models\ProductIdsResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ThisIsDevelopment\OpenApi\Bol\Retailer\Models\ProductIdsResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ThisIsDevelopment\OpenApi\Bol\Retailer\Models\Problem',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ThisIsDevelopment\OpenApi\Bol\Retailer\Models\Problem',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getProductIdsAsync
     *
     * Get product ids by EAN
     *
     * @param  string $ean The EAN number associated with this product. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getProductIds'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getProductIdsAsync($ean, string $contentType = self::contentTypes['getProductIds'][0])
    {
        return $this->getProductIdsAsyncWithHttpInfo($ean, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getProductIdsAsyncWithHttpInfo
     *
     * Get product ids by EAN
     *
     * @param  string $ean The EAN number associated with this product. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getProductIds'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getProductIdsAsyncWithHttpInfo($ean, string $contentType = self::contentTypes['getProductIds'][0])
    {
        $returnType = '\ThisIsDevelopment\OpenApi\Bol\Retailer\Models\ProductIdsResponse';
        $request = $this->getProductIdsRequest($ean, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getProductIds'
     *
     * @param  string $ean The EAN number associated with this product. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getProductIds'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getProductIdsRequest($ean, string $contentType = self::contentTypes['getProductIds'][0])
    {

        // verify the required parameter 'ean' is set
        if ($ean === null || (is_array($ean) && count($ean) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $ean when calling getProductIds'
            );
        }


        $resourcePath = '/retailer/products/{ean}/product-ids';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($ean !== null) {
            $resourcePath = str_replace(
                '{' . 'ean' . '}',
                ObjectSerializer::toPathValue($ean),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/vnd.retailer.v9+json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires Bearer authentication (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getProductList
     *
     * Get product list
     *
     * @param  \ThisIsDevelopment\OpenApi\Bol\Retailer\Models\ProductListRequest $productListRequest productListRequest (required)
     * @param  string $acceptLanguage The language in which the product list will be retrieved. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getProductList'] to see the possible values for this operation
     *
     * @throws \ThisIsDevelopment\OpenApi\Bol\Retailer\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \ThisIsDevelopment\OpenApi\Bol\Retailer\Models\ProductListResponse|\ThisIsDevelopment\OpenApi\Bol\Retailer\Models\Problem|\ThisIsDevelopment\OpenApi\Bol\Retailer\Models\Problem|\ThisIsDevelopment\OpenApi\Bol\Retailer\Models\Problem
     */
    public function getProductList($productListRequest, $acceptLanguage = null, string $contentType = self::contentTypes['getProductList'][0])
    {
        list($response) = $this->getProductListWithHttpInfo($productListRequest, $acceptLanguage, $contentType);
        return $response;
    }

    /**
     * Operation getProductListWithHttpInfo
     *
     * Get product list
     *
     * @param  \ThisIsDevelopment\OpenApi\Bol\Retailer\Models\ProductListRequest $productListRequest (required)
     * @param  string $acceptLanguage The language in which the product list will be retrieved. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getProductList'] to see the possible values for this operation
     *
     * @throws \ThisIsDevelopment\OpenApi\Bol\Retailer\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \ThisIsDevelopment\OpenApi\Bol\Retailer\Models\ProductListResponse|\ThisIsDevelopment\OpenApi\Bol\Retailer\Models\Problem|\ThisIsDevelopment\OpenApi\Bol\Retailer\Models\Problem|\ThisIsDevelopment\OpenApi\Bol\Retailer\Models\Problem, HTTP status code, HTTP response headers (array of strings)
     */
    public function getProductListWithHttpInfo($productListRequest, $acceptLanguage = null, string $contentType = self::contentTypes['getProductList'][0])
    {
        $request = $this->getProductListRequest($productListRequest, $acceptLanguage, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\ThisIsDevelopment\OpenApi\Bol\Retailer\Models\ProductListResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\ThisIsDevelopment\OpenApi\Bol\Retailer\Models\ProductListResponse' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\ThisIsDevelopment\OpenApi\Bol\Retailer\Models\ProductListResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 400:
                    if ('\ThisIsDevelopment\OpenApi\Bol\Retailer\Models\Problem' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\ThisIsDevelopment\OpenApi\Bol\Retailer\Models\Problem' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\ThisIsDevelopment\OpenApi\Bol\Retailer\Models\Problem', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 404:
                    if ('\ThisIsDevelopment\OpenApi\Bol\Retailer\Models\Problem' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\ThisIsDevelopment\OpenApi\Bol\Retailer\Models\Problem' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\ThisIsDevelopment\OpenApi\Bol\Retailer\Models\Problem', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 406:
                    if ('\ThisIsDevelopment\OpenApi\Bol\Retailer\Models\Problem' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\ThisIsDevelopment\OpenApi\Bol\Retailer\Models\Problem' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\ThisIsDevelopment\OpenApi\Bol\Retailer\Models\Problem', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\ThisIsDevelopment\OpenApi\Bol\Retailer\Models\ProductListResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ThisIsDevelopment\OpenApi\Bol\Retailer\Models\ProductListResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ThisIsDevelopment\OpenApi\Bol\Retailer\Models\Problem',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ThisIsDevelopment\OpenApi\Bol\Retailer\Models\Problem',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 406:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ThisIsDevelopment\OpenApi\Bol\Retailer\Models\Problem',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getProductListAsync
     *
     * Get product list
     *
     * @param  \ThisIsDevelopment\OpenApi\Bol\Retailer\Models\ProductListRequest $productListRequest (required)
     * @param  string $acceptLanguage The language in which the product list will be retrieved. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getProductList'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getProductListAsync($productListRequest, $acceptLanguage = null, string $contentType = self::contentTypes['getProductList'][0])
    {
        return $this->getProductListAsyncWithHttpInfo($productListRequest, $acceptLanguage, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getProductListAsyncWithHttpInfo
     *
     * Get product list
     *
     * @param  \ThisIsDevelopment\OpenApi\Bol\Retailer\Models\ProductListRequest $productListRequest (required)
     * @param  string $acceptLanguage The language in which the product list will be retrieved. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getProductList'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getProductListAsyncWithHttpInfo($productListRequest, $acceptLanguage = null, string $contentType = self::contentTypes['getProductList'][0])
    {
        $returnType = '\ThisIsDevelopment\OpenApi\Bol\Retailer\Models\ProductListResponse';
        $request = $this->getProductListRequest($productListRequest, $acceptLanguage, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getProductList'
     *
     * @param  \ThisIsDevelopment\OpenApi\Bol\Retailer\Models\ProductListRequest $productListRequest (required)
     * @param  string $acceptLanguage The language in which the product list will be retrieved. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getProductList'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getProductListRequest($productListRequest, $acceptLanguage = null, string $contentType = self::contentTypes['getProductList'][0])
    {

        // verify the required parameter 'productListRequest' is set
        if ($productListRequest === null || (is_array($productListRequest) && count($productListRequest) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $productListRequest when calling getProductList'
            );
        }



        $resourcePath = '/retailer/products/list';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // header params
        if ($acceptLanguage !== null) {
            $headerParams['Accept-Language'] = ObjectSerializer::toHeaderValue($acceptLanguage);
        }



        $headers = $this->headerSelector->selectHeaders(
            ['application/vnd.retailer.v9+json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($productListRequest)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($productListRequest));
            } else {
                $httpBody = $productListRequest;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires Bearer authentication (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getProductListFilters
     *
     * Get product list filters
     *
     * @param  ProductListFiltersRequest $productListFiltersRequest productListFiltersRequest (required)
     * @param  string $countryCode The country for which the filters will be retrieved. (optional)
     * @param  string $searchTerm The search-term to get the associated categories and filters for. (optional)
     * @param  string $categoryId The category to get the associated filters for. (optional)
     * @param  string $acceptLanguage The language in which the product list filters will be retrieved. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getProductListFilters'] to see the possible values for this operation
     *
     * @throws \ThisIsDevelopment\OpenApi\Bol\Retailer\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \ThisIsDevelopment\OpenApi\Bol\Retailer\Models\ProductListFiltersResponse|\ThisIsDevelopment\OpenApi\Bol\Retailer\Models\Problem|\ThisIsDevelopment\OpenApi\Bol\Retailer\Models\Problem|\ThisIsDevelopment\OpenApi\Bol\Retailer\Models\Problem
     */
    public function getProductListFilters($productListFiltersRequest, $countryCode = null, $searchTerm = null, $categoryId = null, $acceptLanguage = null, string $contentType = self::contentTypes['getProductListFilters'][0])
    {
        list($response) = $this->getProductListFiltersWithHttpInfo($productListFiltersRequest, $countryCode, $searchTerm, $categoryId, $acceptLanguage, $contentType);
        return $response;
    }

    /**
     * Operation getProductListFiltersWithHttpInfo
     *
     * Get product list filters
     *
     * @param  ProductListFiltersRequest $productListFiltersRequest (required)
     * @param  string $countryCode The country for which the filters will be retrieved. (optional)
     * @param  string $searchTerm The search-term to get the associated categories and filters for. (optional)
     * @param  string $categoryId The category to get the associated filters for. (optional)
     * @param  string $acceptLanguage The language in which the product list filters will be retrieved. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getProductListFilters'] to see the possible values for this operation
     *
     * @throws \ThisIsDevelopment\OpenApi\Bol\Retailer\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \ThisIsDevelopment\OpenApi\Bol\Retailer\Models\ProductListFiltersResponse|\ThisIsDevelopment\OpenApi\Bol\Retailer\Models\Problem|\ThisIsDevelopment\OpenApi\Bol\Retailer\Models\Problem|\ThisIsDevelopment\OpenApi\Bol\Retailer\Models\Problem, HTTP status code, HTTP response headers (array of strings)
     */
    public function getProductListFiltersWithHttpInfo($productListFiltersRequest, $countryCode = null, $searchTerm = null, $categoryId = null, $acceptLanguage = null, string $contentType = self::contentTypes['getProductListFilters'][0])
    {
        $request = $this->getProductListFiltersRequest($productListFiltersRequest, $countryCode, $searchTerm, $categoryId, $acceptLanguage, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\ThisIsDevelopment\OpenApi\Bol\Retailer\Models\ProductListFiltersResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\ThisIsDevelopment\OpenApi\Bol\Retailer\Models\ProductListFiltersResponse' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\ThisIsDevelopment\OpenApi\Bol\Retailer\Models\ProductListFiltersResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 400:
                    if ('\ThisIsDevelopment\OpenApi\Bol\Retailer\Models\Problem' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\ThisIsDevelopment\OpenApi\Bol\Retailer\Models\Problem' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\ThisIsDevelopment\OpenApi\Bol\Retailer\Models\Problem', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 404:
                    if ('\ThisIsDevelopment\OpenApi\Bol\Retailer\Models\Problem' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\ThisIsDevelopment\OpenApi\Bol\Retailer\Models\Problem' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\ThisIsDevelopment\OpenApi\Bol\Retailer\Models\Problem', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 406:
                    if ('\ThisIsDevelopment\OpenApi\Bol\Retailer\Models\Problem' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\ThisIsDevelopment\OpenApi\Bol\Retailer\Models\Problem' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\ThisIsDevelopment\OpenApi\Bol\Retailer\Models\Problem', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\ThisIsDevelopment\OpenApi\Bol\Retailer\Models\ProductListFiltersResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ThisIsDevelopment\OpenApi\Bol\Retailer\Models\ProductListFiltersResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ThisIsDevelopment\OpenApi\Bol\Retailer\Models\Problem',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ThisIsDevelopment\OpenApi\Bol\Retailer\Models\Problem',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 406:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ThisIsDevelopment\OpenApi\Bol\Retailer\Models\Problem',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getProductListFiltersAsync
     *
     * Get product list filters
     *
     * @param  ProductListFiltersRequest $productListFiltersRequest (required)
     * @param  string $countryCode The country for which the filters will be retrieved. (optional)
     * @param  string $searchTerm The search-term to get the associated categories and filters for. (optional)
     * @param  string $categoryId The category to get the associated filters for. (optional)
     * @param  string $acceptLanguage The language in which the product list filters will be retrieved. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getProductListFilters'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getProductListFiltersAsync($productListFiltersRequest, $countryCode = null, $searchTerm = null, $categoryId = null, $acceptLanguage = null, string $contentType = self::contentTypes['getProductListFilters'][0])
    {
        return $this->getProductListFiltersAsyncWithHttpInfo($productListFiltersRequest, $countryCode, $searchTerm, $categoryId, $acceptLanguage, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getProductListFiltersAsyncWithHttpInfo
     *
     * Get product list filters
     *
     * @param  ProductListFiltersRequest $productListFiltersRequest (required)
     * @param  string $countryCode The country for which the filters will be retrieved. (optional)
     * @param  string $searchTerm The search-term to get the associated categories and filters for. (optional)
     * @param  string $categoryId The category to get the associated filters for. (optional)
     * @param  string $acceptLanguage The language in which the product list filters will be retrieved. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getProductListFilters'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getProductListFiltersAsyncWithHttpInfo($productListFiltersRequest, $countryCode = null, $searchTerm = null, $categoryId = null, $acceptLanguage = null, string $contentType = self::contentTypes['getProductListFilters'][0])
    {
        $returnType = '\ThisIsDevelopment\OpenApi\Bol\Retailer\Models\ProductListFiltersResponse';
        $request = $this->getProductListFiltersRequest($productListFiltersRequest, $countryCode, $searchTerm, $categoryId, $acceptLanguage, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getProductListFilters'
     *
     * @param  ProductListFiltersRequest $productListFiltersRequest (required)
     * @param  string $countryCode The country for which the filters will be retrieved. (optional)
     * @param  string $searchTerm The search-term to get the associated categories and filters for. (optional)
     * @param  string $categoryId The category to get the associated filters for. (optional)
     * @param  string $acceptLanguage The language in which the product list filters will be retrieved. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getProductListFilters'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getProductListFiltersRequest($productListFiltersRequest, $countryCode = null, $searchTerm = null, $categoryId = null, $acceptLanguage = null, string $contentType = self::contentTypes['getProductListFilters'][0])
    {

        // verify the required parameter 'productListFiltersRequest' is set
        if ($productListFiltersRequest === null || (is_array($productListFiltersRequest) && count($productListFiltersRequest) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $productListFiltersRequest when calling getProductListFilters'
            );
        }


        if ($searchTerm !== null && strlen($searchTerm) > 50) {
            throw new \InvalidArgumentException('invalid length for "$searchTerm" when calling ProductsApi.getProductListFilters, must be smaller than or equal to 50.');
        }
        if ($searchTerm !== null && strlen($searchTerm) < 0) {
            throw new \InvalidArgumentException('invalid length for "$searchTerm" when calling ProductsApi.getProductListFilters, must be bigger than or equal to 0.');
        }
        
        if ($categoryId !== null && strlen($categoryId) > 11) {
            throw new \InvalidArgumentException('invalid length for "$categoryId" when calling ProductsApi.getProductListFilters, must be smaller than or equal to 11.');
        }
        if ($categoryId !== null && strlen($categoryId) < 0) {
            throw new \InvalidArgumentException('invalid length for "$categoryId" when calling ProductsApi.getProductListFilters, must be bigger than or equal to 0.');
        }
        


        $resourcePath = '/retailer/products/list-filters';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $countryCode,
            'country-code', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $searchTerm,
            'search-term', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $categoryId,
            'category-id', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $productListFiltersRequest,
            'productListFiltersRequest', // param base name
            'object', // openApiType
            'form', // style
            true, // explode
            true // required
        ) ?? []);

        // header params
        if ($acceptLanguage !== null) {
            $headerParams['Accept-Language'] = ObjectSerializer::toHeaderValue($acceptLanguage);
        }



        $headers = $this->headerSelector->selectHeaders(
            ['application/vnd.retailer.v9+json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires Bearer authentication (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getProductPlacement
     *
     * Get product placement
     *
     * @param  string $ean The EAN number associated with this product. (required)
     * @param  string $countryCode The country of the product placed on the webshop. (optional)
     * @param  string $acceptLanguage The language in which the product categories and URL will be retrieved. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getProductPlacement'] to see the possible values for this operation
     *
     * @throws \ThisIsDevelopment\OpenApi\Bol\Retailer\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \ThisIsDevelopment\OpenApi\Bol\Retailer\Models\ProductPlacementResponse|\ThisIsDevelopment\OpenApi\Bol\Retailer\Models\Problem|\ThisIsDevelopment\OpenApi\Bol\Retailer\Models\Problem|\ThisIsDevelopment\OpenApi\Bol\Retailer\Models\Problem
     */
    public function getProductPlacement($ean, $countryCode = null, $acceptLanguage = null, string $contentType = self::contentTypes['getProductPlacement'][0])
    {
        list($response) = $this->getProductPlacementWithHttpInfo($ean, $countryCode, $acceptLanguage, $contentType);
        return $response;
    }

    /**
     * Operation getProductPlacementWithHttpInfo
     *
     * Get product placement
     *
     * @param  string $ean The EAN number associated with this product. (required)
     * @param  string $countryCode The country of the product placed on the webshop. (optional)
     * @param  string $acceptLanguage The language in which the product categories and URL will be retrieved. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getProductPlacement'] to see the possible values for this operation
     *
     * @throws \ThisIsDevelopment\OpenApi\Bol\Retailer\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \ThisIsDevelopment\OpenApi\Bol\Retailer\Models\ProductPlacementResponse|\ThisIsDevelopment\OpenApi\Bol\Retailer\Models\Problem|\ThisIsDevelopment\OpenApi\Bol\Retailer\Models\Problem|\ThisIsDevelopment\OpenApi\Bol\Retailer\Models\Problem, HTTP status code, HTTP response headers (array of strings)
     */
    public function getProductPlacementWithHttpInfo($ean, $countryCode = null, $acceptLanguage = null, string $contentType = self::contentTypes['getProductPlacement'][0])
    {
        $request = $this->getProductPlacementRequest($ean, $countryCode, $acceptLanguage, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\ThisIsDevelopment\OpenApi\Bol\Retailer\Models\ProductPlacementResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\ThisIsDevelopment\OpenApi\Bol\Retailer\Models\ProductPlacementResponse' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\ThisIsDevelopment\OpenApi\Bol\Retailer\Models\ProductPlacementResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 400:
                    if ('\ThisIsDevelopment\OpenApi\Bol\Retailer\Models\Problem' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\ThisIsDevelopment\OpenApi\Bol\Retailer\Models\Problem' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\ThisIsDevelopment\OpenApi\Bol\Retailer\Models\Problem', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 404:
                    if ('\ThisIsDevelopment\OpenApi\Bol\Retailer\Models\Problem' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\ThisIsDevelopment\OpenApi\Bol\Retailer\Models\Problem' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\ThisIsDevelopment\OpenApi\Bol\Retailer\Models\Problem', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 406:
                    if ('\ThisIsDevelopment\OpenApi\Bol\Retailer\Models\Problem' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\ThisIsDevelopment\OpenApi\Bol\Retailer\Models\Problem' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\ThisIsDevelopment\OpenApi\Bol\Retailer\Models\Problem', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\ThisIsDevelopment\OpenApi\Bol\Retailer\Models\ProductPlacementResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ThisIsDevelopment\OpenApi\Bol\Retailer\Models\ProductPlacementResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ThisIsDevelopment\OpenApi\Bol\Retailer\Models\Problem',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ThisIsDevelopment\OpenApi\Bol\Retailer\Models\Problem',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 406:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ThisIsDevelopment\OpenApi\Bol\Retailer\Models\Problem',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getProductPlacementAsync
     *
     * Get product placement
     *
     * @param  string $ean The EAN number associated with this product. (required)
     * @param  string $countryCode The country of the product placed on the webshop. (optional)
     * @param  string $acceptLanguage The language in which the product categories and URL will be retrieved. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getProductPlacement'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getProductPlacementAsync($ean, $countryCode = null, $acceptLanguage = null, string $contentType = self::contentTypes['getProductPlacement'][0])
    {
        return $this->getProductPlacementAsyncWithHttpInfo($ean, $countryCode, $acceptLanguage, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getProductPlacementAsyncWithHttpInfo
     *
     * Get product placement
     *
     * @param  string $ean The EAN number associated with this product. (required)
     * @param  string $countryCode The country of the product placed on the webshop. (optional)
     * @param  string $acceptLanguage The language in which the product categories and URL will be retrieved. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getProductPlacement'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getProductPlacementAsyncWithHttpInfo($ean, $countryCode = null, $acceptLanguage = null, string $contentType = self::contentTypes['getProductPlacement'][0])
    {
        $returnType = '\ThisIsDevelopment\OpenApi\Bol\Retailer\Models\ProductPlacementResponse';
        $request = $this->getProductPlacementRequest($ean, $countryCode, $acceptLanguage, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getProductPlacement'
     *
     * @param  string $ean The EAN number associated with this product. (required)
     * @param  string $countryCode The country of the product placed on the webshop. (optional)
     * @param  string $acceptLanguage The language in which the product categories and URL will be retrieved. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getProductPlacement'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getProductPlacementRequest($ean, $countryCode = null, $acceptLanguage = null, string $contentType = self::contentTypes['getProductPlacement'][0])
    {

        // verify the required parameter 'ean' is set
        if ($ean === null || (is_array($ean) && count($ean) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $ean when calling getProductPlacement'
            );
        }




        $resourcePath = '/retailer/products/{ean}/placement';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $countryCode,
            'country-code', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);

        // header params
        if ($acceptLanguage !== null) {
            $headerParams['Accept-Language'] = ObjectSerializer::toHeaderValue($acceptLanguage);
        }

        // path params
        if ($ean !== null) {
            $resourcePath = str_replace(
                '{' . 'ean' . '}',
                ObjectSerializer::toPathValue($ean),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/vnd.retailer.v9+json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires Bearer authentication (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getProductRatings
     *
     * Get product ratings
     *
     * @param  string $ean The EAN number associated with this rating. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getProductRatings'] to see the possible values for this operation
     *
     * @throws \ThisIsDevelopment\OpenApi\Bol\Retailer\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \ThisIsDevelopment\OpenApi\Bol\Retailer\Models\ProductRatingsResponse|\ThisIsDevelopment\OpenApi\Bol\Retailer\Models\Problem|\ThisIsDevelopment\OpenApi\Bol\Retailer\Models\Problem
     */
    public function getProductRatings($ean, string $contentType = self::contentTypes['getProductRatings'][0])
    {
        list($response) = $this->getProductRatingsWithHttpInfo($ean, $contentType);
        return $response;
    }

    /**
     * Operation getProductRatingsWithHttpInfo
     *
     * Get product ratings
     *
     * @param  string $ean The EAN number associated with this rating. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getProductRatings'] to see the possible values for this operation
     *
     * @throws \ThisIsDevelopment\OpenApi\Bol\Retailer\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \ThisIsDevelopment\OpenApi\Bol\Retailer\Models\ProductRatingsResponse|\ThisIsDevelopment\OpenApi\Bol\Retailer\Models\Problem|\ThisIsDevelopment\OpenApi\Bol\Retailer\Models\Problem, HTTP status code, HTTP response headers (array of strings)
     */
    public function getProductRatingsWithHttpInfo($ean, string $contentType = self::contentTypes['getProductRatings'][0])
    {
        $request = $this->getProductRatingsRequest($ean, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\ThisIsDevelopment\OpenApi\Bol\Retailer\Models\ProductRatingsResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\ThisIsDevelopment\OpenApi\Bol\Retailer\Models\ProductRatingsResponse' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\ThisIsDevelopment\OpenApi\Bol\Retailer\Models\ProductRatingsResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 400:
                    if ('\ThisIsDevelopment\OpenApi\Bol\Retailer\Models\Problem' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\ThisIsDevelopment\OpenApi\Bol\Retailer\Models\Problem' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\ThisIsDevelopment\OpenApi\Bol\Retailer\Models\Problem', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 404:
                    if ('\ThisIsDevelopment\OpenApi\Bol\Retailer\Models\Problem' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\ThisIsDevelopment\OpenApi\Bol\Retailer\Models\Problem' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\ThisIsDevelopment\OpenApi\Bol\Retailer\Models\Problem', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\ThisIsDevelopment\OpenApi\Bol\Retailer\Models\ProductRatingsResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ThisIsDevelopment\OpenApi\Bol\Retailer\Models\ProductRatingsResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ThisIsDevelopment\OpenApi\Bol\Retailer\Models\Problem',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ThisIsDevelopment\OpenApi\Bol\Retailer\Models\Problem',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getProductRatingsAsync
     *
     * Get product ratings
     *
     * @param  string $ean The EAN number associated with this rating. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getProductRatings'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getProductRatingsAsync($ean, string $contentType = self::contentTypes['getProductRatings'][0])
    {
        return $this->getProductRatingsAsyncWithHttpInfo($ean, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getProductRatingsAsyncWithHttpInfo
     *
     * Get product ratings
     *
     * @param  string $ean The EAN number associated with this rating. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getProductRatings'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getProductRatingsAsyncWithHttpInfo($ean, string $contentType = self::contentTypes['getProductRatings'][0])
    {
        $returnType = '\ThisIsDevelopment\OpenApi\Bol\Retailer\Models\ProductRatingsResponse';
        $request = $this->getProductRatingsRequest($ean, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getProductRatings'
     *
     * @param  string $ean The EAN number associated with this rating. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getProductRatings'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getProductRatingsRequest($ean, string $contentType = self::contentTypes['getProductRatings'][0])
    {

        // verify the required parameter 'ean' is set
        if ($ean === null || (is_array($ean) && count($ean) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $ean when calling getProductRatings'
            );
        }


        $resourcePath = '/retailer/products/{ean}/ratings';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($ean !== null) {
            $resourcePath = str_replace(
                '{' . 'ean' . '}',
                ObjectSerializer::toPathValue($ean),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/vnd.retailer.v9+json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires Bearer authentication (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }
}
